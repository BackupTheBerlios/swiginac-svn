/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.25
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPYTHON

#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/***********************************************************************
 *
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 *
 ************************************************************************/

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
#  if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#    define SWIGTEMPLATEDISAMBIGUATOR template
#  else
#    define SWIGTEMPLATEDISAMBIGUATOR 
#  endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__) || defined(__ICC)
#   define SWIGUNUSED __attribute__ ((unused)) 
# else
#   define SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods for Windows DLLs */
#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   define SWIGEXPORT
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif



#include <Python.h>

/***********************************************************************
 * swigrun.swg
 *
 *     This file contains generic CAPI SWIG runtime support for pointer
 *     type checking.
 *
 ************************************************************************/

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "2"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the swig runtime code.
  In 99.9% of the cases, swig just needs to declare them as 'static'.
  
  But only do this if is strictly necessary, ie, if you have problems
  with your compiler or so.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store inforomation on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;


/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (int)(*f1 - *f2);
  }
  return (l1 - f1) - (l2 - f2);
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/* think of this as a c++ template<> or a scheme macro */
#define SWIG_TypeCheck_Template(comparison, ty)         \
  if (ty) {                                             \
    swig_cast_info *iter = ty->cast;                    \
    while (iter) {                                      \
      if (comparison) {                                 \
        if (iter == ty->cast) return iter;              \
        /* Move iter to the top of the linked list */   \
        iter->prev->next = iter->next;                  \
        if (iter->next)                                 \
          iter->next->prev = iter->prev;                \
        iter->next = ty->cast;                          \
        iter->prev = 0;                                 \
        if (ty->cast) ty->cast->prev = iter;            \
        ty->cast = iter;                                \
        return iter;                                    \
      }                                                 \
      iter = iter->next;                                \
    }                                                   \
  }                                                     \
  return 0

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  SWIG_TypeCheck_Template(strcmp(iter->type->name, c) == 0, ty);
}

/* Same as previous function, except strcmp is replaced with a pointer comparison */
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *into) {
  SWIG_TypeCheck_Template(iter->type == from, into);
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  if (!ti->clientdata) {
    swig_cast_info *cast = ti->cast;
    /* if (ti->clientdata == clientdata) return; */
    ti->clientdata = clientdata;
    
    while (cast) {
      if (!cast->converter)
	SWIG_TypeClientData(cast->type, clientdata);
      cast = cast->next;
    }
  }
}

/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}


/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu = 0;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * SWIG API. Portion that goes into the runtime
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * for internal method declarations
 * ----------------------------------------------------------------------------- */

#ifndef SWIGINTERN
#  define SWIGINTERN static SWIGUNUSED
#endif

#ifndef SWIGINTERNINLINE
#  define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/*
  Exception handling in wrappers
*/
#define SWIG_fail                goto fail
#define SWIG_arg_fail(arg)       SWIG_Python_ArgFail(arg)
#define SWIG_append_errmsg(msg)   SWIG_Python_AddErrMesg(msg,0)
#define SWIG_preppend_errmsg(msg) SWIG_Python_AddErrMesg(msg,1)
#define SWIG_type_error(type,obj) SWIG_Python_TypeError(type,obj)
#define SWIG_null_ref(type)       SWIG_Python_NullRef(type)

/*
  Contract support
*/
#define SWIG_contract_assert(expr, msg) \
 if (!(expr)) { PyErr_SetString(PyExc_RuntimeError, (char *) msg ); goto fail; } else

/* -----------------------------------------------------------------------------
 * Constant declarations
 * ----------------------------------------------------------------------------- */

/* Constant Types */
#define SWIG_PY_INT     1
#define SWIG_PY_FLOAT   2
#define SWIG_PY_STRING  3
#define SWIG_PY_POINTER 4
#define SWIG_PY_BINARY  5

/* Constant information structure */
typedef struct swig_const_info {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_const_info;


/* -----------------------------------------------------------------------------
 * Alloc. memory flags
 * ----------------------------------------------------------------------------- */
#define SWIG_OLDOBJ  1
#define SWIG_NEWOBJ  SWIG_OLDOBJ + 1
#define SWIG_PYSTR   SWIG_NEWOBJ + 1

#ifdef __cplusplus
}
#endif


/***********************************************************************
 * pyrun.swg
 *
 *     This file contains the runtime support for Python modules
 *     and includes code for managing global variables and pointer
 *     type checking.
 *
 * Author : David Beazley (beazley@cs.uchicago.edu)
 ************************************************************************/

/* Common SWIG API */
#define SWIG_ConvertPtr(obj, pp, type, flags)    SWIG_Python_ConvertPtr(obj, pp, type, flags)
#define SWIG_NewPointerObj(p, type, flags)       SWIG_Python_NewPointerObj(p, type, flags)
#define SWIG_MustGetPtr(p, type, argnum, flags)  SWIG_Python_MustGetPtr(p, type, argnum, flags)
 

/* Python-specific SWIG API */
#define SWIG_ConvertPacked(obj, ptr, sz, ty, flags)   SWIG_Python_ConvertPacked(obj, ptr, sz, ty, flags)
#define SWIG_NewPackedObj(ptr, sz, type)              SWIG_Python_NewPackedObj(ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Python_GetModule()
#define SWIG_SetModule(clientdata, pointer) SWIG_Python_SetModule(pointer)

/* -----------------------------------------------------------------------------
 * Pointer declarations
 * ----------------------------------------------------------------------------- */
/*
  Use SWIG_NO_COBJECT_TYPES to force the use of strings to represent
  C/C++ pointers in the python side. Very useful for debugging, but
  not always safe.
*/
#if !defined(SWIG_NO_COBJECT_TYPES) && !defined(SWIG_COBJECT_TYPES)
#  define SWIG_COBJECT_TYPES
#endif

/* Flags for pointer conversion */
#define SWIG_POINTER_EXCEPTION     0x1
#define SWIG_POINTER_DISOWN        0x2


/* Add PyOS_snprintf for old Pythons */
#if PY_VERSION_HEX < 0x02020000
#define PyOS_snprintf snprintf
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* -----------------------------------------------------------------------------
 * Create a new pointer string 
 * ----------------------------------------------------------------------------- */
#ifndef SWIG_BUFFER_SIZE
#define SWIG_BUFFER_SIZE 1024
#endif

#if defined(SWIG_COBJECT_TYPES)
#if !defined(SWIG_COBJECT_PYTHON)
/* -----------------------------------------------------------------------------
 * Implements a simple Swig Object type, and use it instead of PyCObject
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *ptr;
  const char *desc;
} PySwigObject;

/* Declarations for objects of type PySwigObject */

SWIGRUNTIME int
PySwigObject_print(PySwigObject *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  if (SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result))) {
    fputs("<Swig Object at ", fp); fputs(result, fp); fputs(">", fp);
    return 0; 
  } else {
    return 1; 
  }
}
  
SWIGRUNTIME PyObject *
PySwigObject_repr(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromFormat("<Swig Object at %s>", result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_str(PySwigObject *v)
{
  char result[SWIG_BUFFER_SIZE];
  return SWIG_PackVoidPtr(result, v->ptr, v->desc, sizeof(result)) ?
    PyString_FromString(result) : 0;
}

SWIGRUNTIME PyObject *
PySwigObject_long(PySwigObject *v)
{
  return PyLong_FromVoidPtr(v->ptr);
}

SWIGRUNTIME PyObject *
PySwigObject_format(const char* fmt, PySwigObject *v)
{
  PyObject *res = NULL;
  PyObject *args = PyTuple_New(1);
  if (args && (PyTuple_SetItem(args, 0, PySwigObject_long(v)) == 0)) {
    PyObject *ofmt = PyString_FromString(fmt);
    if (ofmt) {
      res = PyString_Format(ofmt,args);
      Py_DECREF(ofmt);
    }
    Py_DECREF(args);
  }  
  return res;
}

SWIGRUNTIME PyObject *
PySwigObject_oct(PySwigObject *v)
{
  return PySwigObject_format("%o",v);
}

SWIGRUNTIME PyObject *
PySwigObject_hex(PySwigObject *v)
{
  return PySwigObject_format("%x",v);
}

SWIGRUNTIME int
PySwigObject_compare(PySwigObject *v, PySwigObject *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    void *i = v->ptr;
    void *j = w->ptr;
    return (i < j) ? -1 : ((i > j) ? 1 : 0);
  }
}

SWIGRUNTIME void
PySwigObject_dealloc(PySwigObject *self)
{
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigObject_type(void) {
  static char pyswigobject_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  
  static PyNumberMethods PySwigObject_as_number = {
    (binaryfunc)0, /*nb_add*/
    (binaryfunc)0, /*nb_subtract*/
    (binaryfunc)0, /*nb_multiply*/
    (binaryfunc)0, /*nb_divide*/
    (binaryfunc)0, /*nb_remainder*/
    (binaryfunc)0, /*nb_divmod*/
    (ternaryfunc)0,/*nb_power*/
    (unaryfunc)0,  /*nb_negative*/
    (unaryfunc)0,  /*nb_positive*/
    (unaryfunc)0,  /*nb_absolute*/
    (inquiry)0,    /*nb_nonzero*/
    0,		   /*nb_invert*/
    0,		   /*nb_lshift*/
    0,		   /*nb_rshift*/
    0,		   /*nb_and*/
    0,		   /*nb_xor*/
    0,		   /*nb_or*/
    (coercion)0,   /*nb_coerce*/
    (unaryfunc)PySwigObject_long, /*nb_int*/
    (unaryfunc)PySwigObject_long, /*nb_long*/
    (unaryfunc)0,                 /*nb_float*/
    (unaryfunc)PySwigObject_oct,  /*nb_oct*/
    (unaryfunc)PySwigObject_hex,  /*nb_hex*/
#if PY_VERSION_HEX >= 0x02000000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 /* nb_inplace_add -> nb_inplace_true_divide */ 
#endif
  };

  static PyTypeObject pyswigobject_type
#if !defined(__cplusplus)
  ;  
  static int type_init = 0;
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigObject",		/*tp_name*/
    sizeof(PySwigObject),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigObject_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigObject_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigObject_compare,	/*tp_compare*/
    (reprfunc)PySwigObject_repr,	/*tp_repr*/
    &PySwigObject_as_number,	        /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigObject_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigobject_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigobject_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigobject_type;
}

SWIGRUNTIME PyObject *
PySwigObject_FromVoidPtrAndDesc(void *ptr, const char *desc)
{
  PySwigObject *self = PyObject_NEW(PySwigObject, PySwigObject_type());
  if (self) {
    self->ptr = ptr;
    self->desc = desc;
  }
  return (PyObject *)self;
}

SWIGRUNTIMEINLINE void *
PySwigObject_AsVoidPtr(PyObject *self)
{
  return ((PySwigObject *)self)->ptr;
}

SWIGRUNTIMEINLINE const char *
PySwigObject_GetDesc(PyObject *self)
{
  return ((PySwigObject *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigObject_Check(PyObject *op) {
  return ((op)->ob_type == PySwigObject_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigObject") == 0);
}

/* -----------------------------------------------------------------------------
 * Implements a simple Swig Packed type, and use it instead of string
 * ----------------------------------------------------------------------------- */

typedef struct {
  PyObject_HEAD
  void *pack;
  const char *desc;
  size_t size;
} PySwigPacked;

SWIGRUNTIME int
PySwigPacked_print(PySwigPacked *v, FILE *fp, int flags)
{
  char result[SWIG_BUFFER_SIZE];
  flags = flags;
  fputs("<Swig Packed ", fp); 
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    fputs("at ", fp); 
    fputs(result, fp); 
  }
  fputs(v->desc,fp); 
  fputs(">", fp);
  return 0; 
}
  
SWIGRUNTIME PyObject *
PySwigPacked_repr(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))) {
    return PyString_FromFormat("<Swig Packed at %s%s>", result, v->desc);
  } else {
    return PyString_FromFormat("<Swig Packed %s>", v->desc);
  }  
}

SWIGRUNTIME PyObject *
PySwigPacked_str(PySwigPacked *v)
{
  char result[SWIG_BUFFER_SIZE];
  if (SWIG_PackDataName(result, v->pack, v->size, 0, sizeof(result))){
    return PyString_FromFormat("%s%s", result, v->desc);
  } else {
    return PyString_FromFormat("%s", v->desc);
  }  
}

SWIGRUNTIME int
PySwigPacked_compare(PySwigPacked *v, PySwigPacked *w)
{
  int c = strcmp(v->desc, w->desc);
  if (c) {
    return (c > 0) ? 1 : -1;
  } else {
    size_t i = v->size;
    size_t j = w->size;
    int s = (i < j) ? -1 : ((i > j) ? 1 : 0);
    return s ? s : strncmp((char *)v->pack, (char *)w->pack, 2*v->size);
  }
}

SWIGRUNTIME void
PySwigPacked_dealloc(PySwigPacked *self)
{
  free(self->pack);
  PyObject_DEL(self);
}

SWIGRUNTIME PyTypeObject*
PySwigPacked_type(void) {
  static char pyswigpacked_type__doc__[] = 
    "Swig object carries a C/C++ instance pointer";
  static PyTypeObject pyswigpacked_type
#if !defined(__cplusplus)
  ;
  static int type_init = 0;  
  if (!type_init) {
    PyTypeObject tmp
#endif
    = {
    PyObject_HEAD_INIT(&PyType_Type)
    0,					/*ob_size*/
    (char *)"PySwigPacked",		/*tp_name*/
    sizeof(PySwigPacked),		/*tp_basicsize*/
    0,					/*tp_itemsize*/
    /* methods */
    (destructor)PySwigPacked_dealloc,	/*tp_dealloc*/
    (printfunc)PySwigPacked_print,	/*tp_print*/
    (getattrfunc)0,			/*tp_getattr*/
    (setattrfunc)0,			/*tp_setattr*/
    (cmpfunc)PySwigPacked_compare,	/*tp_compare*/
    (reprfunc)PySwigPacked_repr,	/*tp_repr*/
    0,	                                /*tp_as_number*/
    0,					/*tp_as_sequence*/
    0,					/*tp_as_mapping*/
    (hashfunc)0,			/*tp_hash*/
    (ternaryfunc)0,			/*tp_call*/
    (reprfunc)PySwigPacked_str,		/*tp_str*/
    /* Space for future expansion */
    0,0,0,0,
    pyswigpacked_type__doc__, 	        /* Documentation string */
#if PY_VERSION_HEX >= 0x02000000
    0,                                  /* tp_traverse */
    0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
    0,                                  /* tp_richcompare */
    0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000         
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
    0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
    0,0,0,0                             /* tp_alloc -> tp_next */
#endif
    };
#if !defined(__cplusplus)
    pyswigpacked_type = tmp;
    type_init = 1;
  }
#endif
  return &pyswigpacked_type;
}

SWIGRUNTIME PyObject *
PySwigPacked_FromDataAndDesc(void *ptr, size_t size, const char *desc)
{
  PySwigPacked *self = PyObject_NEW(PySwigPacked, PySwigPacked_type());
  if (self == NULL) {
    return NULL;
  } else {
    void *pack = malloc(size);
    if (pack) {
      memcpy(pack, ptr, size);
      self->pack = pack;
      self->desc = desc;
      self->size = size;
      return (PyObject *) self;
    }
    return NULL;
  }
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_UnpackData(PyObject *obj, void *ptr, size_t size)
{
  PySwigPacked *self = (PySwigPacked *)obj;
  if (self->size != size) return 0;
  memcpy(ptr, self->pack, size);
  return self->desc;
}

SWIGRUNTIMEINLINE const char *
PySwigPacked_GetDesc(PyObject *self)
{
  return ((PySwigPacked *)self)->desc;
}

SWIGRUNTIMEINLINE int
PySwigPacked_Check(PyObject *op) {
  return ((op)->ob_type == PySwigPacked_type()) 
    || (strcmp((op)->ob_type->tp_name,"PySwigPacked") == 0);
}

#else
/* -----------------------------------------------------------------------------
 * Use the old Python PyCObject instead of PySwigObject
 * ----------------------------------------------------------------------------- */

#define PySwigObject_GetDesc(obj)	           PyCObject_GetDesc(obj)
#define PySwigObject_Check(obj)	           PyCObject_Check(obj)
#define PySwigObject_AsVoidPtr(obj)	   PyCObject_AsVoidPtr(obj)
#define PySwigObject_FromVoidPtrAndDesc(p, d)  PyCObject_FromVoidPtrAndDesc(p, d, NULL)

#endif

#endif

/* -----------------------------------------------------------------------------
 * errors manipulation
 * ----------------------------------------------------------------------------- */

SWIGRUNTIME void
SWIG_Python_TypeError(const char *type, PyObject *obj)
{
  if (type) {
#if defined(SWIG_COBJECT_TYPES)
    if (obj && PySwigObject_Check(obj)) {
      const char *otype = (const char *) PySwigObject_GetDesc(obj);
      if (otype) {
	PyErr_Format(PyExc_TypeError, "a '%s' is expected, 'PySwigObject(%s)' is received",
		     type, otype);
	return;
      }
    } else 
#endif      
    {
      const char *otype = (obj ? obj->ob_type->tp_name : 0); 
      if (otype) {
	PyObject *str = PyObject_Str(obj);
	const char *cstr = str ? PyString_AsString(str) : 0;
	if (cstr) {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s(%s)' is received",
		       type, otype, cstr);
	} else {
	  PyErr_Format(PyExc_TypeError, "a '%s' is expected, '%s' is received",
		       type, otype);
	}
	Py_XDECREF(str);
	return;
      }
    }   
    PyErr_Format(PyExc_TypeError, "a '%s' is expected", type);
  } else {
    PyErr_Format(PyExc_TypeError, "unexpected type is received");
  }
}

SWIGRUNTIMEINLINE void
SWIG_Python_NullRef(const char *type)
{
  if (type) {
    PyErr_Format(PyExc_TypeError, "null reference of type '%s' was received",type);
  } else {
    PyErr_Format(PyExc_TypeError, "null reference was received");
  }
}

SWIGRUNTIME int
SWIG_Python_AddErrMesg(const char* mesg, int infront)
{
  if (PyErr_Occurred()) {
    PyObject *type = 0;
    PyObject *value = 0;
    PyObject *traceback = 0;
    PyErr_Fetch(&type, &value, &traceback);
    if (value) {
      PyObject *old_str = PyObject_Str(value);
      Py_XINCREF(type);
      PyErr_Clear();
      if (infront) {
	PyErr_Format(type, "%s %s", mesg, PyString_AsString(old_str));
      } else {
	PyErr_Format(type, "%s %s", PyString_AsString(old_str), mesg);
      }
      Py_DECREF(old_str);
    }
    return 1;
  } else {
    return 0;
  }
}

SWIGRUNTIME int
SWIG_Python_ArgFail(int argnum)
{
  if (PyErr_Occurred()) {
    /* add information about failing argument */
    char mesg[256];
    PyOS_snprintf(mesg, sizeof(mesg), "argument number %d:", argnum);
    return SWIG_Python_AddErrMesg(mesg, 1);
  } else {
    return 0;
  }
}


/* -----------------------------------------------------------------------------
 * pointers/data manipulation
 * ----------------------------------------------------------------------------- */

/* Convert a pointer value */
SWIGRUNTIME int
SWIG_Python_ConvertPtr(PyObject *obj, void **ptr, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;
  static PyObject *SWIG_this = 0;
  int    newref = 0;
  PyObject  *pyobj = 0;
  void *vptr;
  
  if (!obj) return 0;
  if (obj == Py_None) {
    *ptr = 0;
    return 0;
  }

#ifdef SWIG_COBJECT_TYPES
  if (!(PySwigObject_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PySwigObject_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  }  
  vptr = PySwigObject_AsVoidPtr(obj);
  c = (const char *) PySwigObject_GetDesc(obj);
  if (newref) { Py_DECREF(obj); }
  goto type_check;
#else
  if (!(PyString_Check(obj))) {
    if (!SWIG_this)
      SWIG_this = PyString_FromString("this");
    pyobj = obj;
    obj = PyObject_GetAttr(obj,SWIG_this);
    newref = 1;
    if (!obj) goto type_error;
    if (!PyString_Check(obj)) {
      Py_DECREF(obj);
      goto type_error;
    }
  } 
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackVoidPtr(c, &vptr, ty->name);
  if (newref) { Py_DECREF(obj); }
  if (!c) goto type_error;
#endif

type_check:
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
    *ptr = SWIG_TypeCast(tc,vptr);
  } else {
    *ptr = vptr;
  }
  if ((pyobj) && (flags & SWIG_POINTER_DISOWN)) {
    PyObject_SetAttrString(pyobj,(char*)"thisown",Py_False);
  }
  return 0;

type_error:
  PyErr_Clear();
  if (pyobj && !obj) {    
    obj = pyobj;
    if (PyCFunction_Check(obj)) {
      /* here we get the method pointer for callbacks */
      char *doc = (((PyCFunctionObject *)obj) -> m_ml -> ml_doc);
      c = doc ? strstr(doc, "swig_ptr: ") : 0;
      if (c) {
	c = ty ? SWIG_UnpackVoidPtr(c + 10, &vptr, ty->name) : 0;
	if (!c) goto type_error;
	goto type_check;
      }
    }
  }
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ pointer", obj);
    }
  }
  return -1;
}

/* Convert a pointer value, signal an exception on a type mismatch */
SWIGRUNTIME void *
SWIG_Python_MustGetPtr(PyObject *obj, swig_type_info *ty, int argnum, int flags) {
  void *result;
  if (SWIG_Python_ConvertPtr(obj, &result, ty, flags) == -1) {
    PyErr_Clear();
    if (flags & SWIG_POINTER_EXCEPTION) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
      SWIG_Python_ArgFail(argnum);
    }
  }
  return result;
}

/* Convert a packed value value */
SWIGRUNTIME int
SWIG_Python_ConvertPacked(PyObject *obj, void *ptr, size_t sz, swig_type_info *ty, int flags) {
  swig_cast_info *tc;
  const char *c = 0;

#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  c = PySwigPacked_UnpackData(obj, ptr, sz);
#else
  if ((!obj) || (!PyString_Check(obj))) goto type_error;
  c = PyString_AS_STRING(obj);
  /* Pointer values must start with leading underscore */
  c = SWIG_UnpackDataName(c, ptr, sz, ty->name);
#endif
  if (!c) goto type_error;
  if (ty) {
    tc = SWIG_TypeCheck(c,ty);
    if (!tc) goto type_error;
  }
  return 0;

type_error:
  PyErr_Clear();
  if (flags & SWIG_POINTER_EXCEPTION) {
    if (ty) {
      SWIG_Python_TypeError(SWIG_TypePrettyName(ty), obj);
    } else {
      SWIG_Python_TypeError("C/C++ packed data", obj);
    }
  }
  return -1;
}  

/* Create a new array object */
SWIGRUNTIME PyObject *
SWIG_Python_NewPointerObj(void *ptr, swig_type_info *type, int own) {
  PyObject *robj = 0;
  if (!type) {
    if (!PyErr_Occurred()) {
      PyErr_Format(PyExc_TypeError, "Swig: null type passed to NewPointerObj");
    }
    return robj;
  }
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#ifdef SWIG_COBJECT_TYPES
  robj = PySwigObject_FromVoidPtrAndDesc((void *) ptr, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackVoidPtr(result, ptr, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  if (!robj || (robj == Py_None)) return robj;
  if (type->clientdata) {
    PyObject *inst;
    PyObject *args = Py_BuildValue((char*)"(O)", robj);
    Py_DECREF(robj);
    inst = PyObject_CallObject((PyObject *) type->clientdata, args);
    Py_DECREF(args);
    if (inst) {
      if (own) {
        PyObject_SetAttrString(inst,(char*)"thisown",Py_True);
      }
      robj = inst;
    }
  }
  return robj;
}

SWIGRUNTIME PyObject *
SWIG_Python_NewPackedObj(void *ptr, size_t sz, swig_type_info *type) {
  PyObject *robj = 0;
  if (!ptr) {
    Py_INCREF(Py_None);
    return Py_None;
  }
#if defined(SWIG_COBJECT_TYPES) && !defined(SWIG_COBJECT_PYTHON)
  robj = PySwigPacked_FromDataAndDesc((void *) ptr, sz, (char *)type->name);
#else
  {
    char result[SWIG_BUFFER_SIZE];
    robj = SWIG_PackDataName(result, ptr, sz, type->name, sizeof(result)) ?
      PyString_FromString(result) : 0;
  }
#endif
  return robj;
}

/* -----------------------------------------------------------------------------*
 *  Get type list 
 * -----------------------------------------------------------------------------*/

#ifdef SWIG_LINK_RUNTIME
void *SWIG_ReturnGlobalTypeList(void *);
#endif

SWIGRUNTIME swig_module_info *
SWIG_Python_GetModule(void) {
  static void *type_pointer = (void *)0;
  /* first check if module already created */
  if (!type_pointer) {
#ifdef SWIG_LINK_RUNTIME
    type_pointer = SWIG_ReturnGlobalTypeList((void *)0);
#else
    type_pointer = PyCObject_Import((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				    (char*)"type_pointer" SWIG_TYPE_TABLE_NAME);
    if (PyErr_Occurred()) {
      PyErr_Clear();
      type_pointer = (void *)0;
    }
  }
#endif
  return (swig_module_info *) type_pointer;
}

SWIGRUNTIME void
SWIG_Python_SetModule(swig_module_info *swig_module) {
  static PyMethodDef swig_empty_runtime_method_table[] = { {NULL, NULL, 0, NULL} };/* Sentinel */

  PyObject *module = Py_InitModule((char*)"swig_runtime_data" SWIG_RUNTIME_VERSION,
				   swig_empty_runtime_method_table);
  PyObject *pointer = PyCObject_FromVoidPtr((void *) swig_module, NULL);
  if (pointer && module) {
    PyModule_AddObject(module, (char*)"type_pointer" SWIG_TYPE_TABLE_NAME, pointer);
  }
}

#ifdef __cplusplus
}
#endif


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_GiNaC__H_SERIAL swig_types[0]
#define SWIGTYPE_p_GiNaC__Li2_SERIAL swig_types[1]
#define SWIGTYPE_p_GiNaC__Li3_SERIAL swig_types[2]
#define SWIGTYPE_p_GiNaC__Li_SERIAL swig_types[3]
#define SWIGTYPE_p_GiNaC__Order_SERIAL swig_types[4]
#define SWIGTYPE_p_GiNaC__S_SERIAL swig_types[5]
#define SWIGTYPE_p_GiNaC__abs_SERIAL swig_types[6]
#define SWIGTYPE_p_GiNaC__acos_SERIAL swig_types[7]
#define SWIGTYPE_p_GiNaC__acosh_SERIAL swig_types[8]
#define SWIGTYPE_p_GiNaC__add swig_types[9]
#define SWIGTYPE_p_GiNaC__asin_SERIAL swig_types[10]
#define SWIGTYPE_p_GiNaC__asinh_SERIAL swig_types[11]
#define SWIGTYPE_p_GiNaC__atan2_SERIAL swig_types[12]
#define SWIGTYPE_p_GiNaC__atan_SERIAL swig_types[13]
#define SWIGTYPE_p_GiNaC__atanh_SERIAL swig_types[14]
#define SWIGTYPE_p_GiNaC__basic swig_types[15]
#define SWIGTYPE_p_GiNaC__beta_SERIAL swig_types[16]
#define SWIGTYPE_p_GiNaC__binomial_SERIAL swig_types[17]
#define SWIGTYPE_p_GiNaC__clifford swig_types[18]
#define SWIGTYPE_p_GiNaC__cliffordunit swig_types[19]
#define SWIGTYPE_p_GiNaC__conjugate_function_SERIAL swig_types[20]
#define SWIGTYPE_p_GiNaC__constant swig_types[21]
#define SWIGTYPE_p_GiNaC__cos_SERIAL swig_types[22]
#define SWIGTYPE_p_GiNaC__cosh_SERIAL swig_types[23]
#define SWIGTYPE_p_GiNaC__csgn_SERIAL swig_types[24]
#define SWIGTYPE_p_GiNaC__determinant_algo swig_types[25]
#define SWIGTYPE_p_GiNaC__diracgamma swig_types[26]
#define SWIGTYPE_p_GiNaC__diracgamma5 swig_types[27]
#define SWIGTYPE_p_GiNaC__diracgammaL swig_types[28]
#define SWIGTYPE_p_GiNaC__diracgammaR swig_types[29]
#define SWIGTYPE_p_GiNaC__diracone swig_types[30]
#define SWIGTYPE_p_GiNaC__do_taylor swig_types[31]
#define SWIGTYPE_p_GiNaC__epvector__iterator swig_types[32]
#define SWIGTYPE_p_GiNaC__eta_SERIAL swig_types[33]
#define SWIGTYPE_p_GiNaC__ex swig_types[34]
#define SWIGTYPE_p_GiNaC__exp_SERIAL swig_types[35]
#define SWIGTYPE_p_GiNaC__expairseq swig_types[36]
#define SWIGTYPE_p_GiNaC__expand_options swig_types[37]
#define SWIGTYPE_p_GiNaC__factorial_SERIAL swig_types[38]
#define SWIGTYPE_p_GiNaC__function swig_types[39]
#define SWIGTYPE_p_GiNaC__function_options swig_types[40]
#define SWIGTYPE_p_GiNaC__idx swig_types[41]
#define SWIGTYPE_p_GiNaC__indexed swig_types[42]
#define SWIGTYPE_p_GiNaC__info_flags swig_types[43]
#define SWIGTYPE_p_GiNaC__integral swig_types[44]
#define SWIGTYPE_p_GiNaC__lgamma_SERIAL swig_types[45]
#define SWIGTYPE_p_GiNaC__log_SERIAL swig_types[46]
#define SWIGTYPE_p_GiNaC__map_function swig_types[47]
#define SWIGTYPE_p_GiNaC__matrix swig_types[48]
#define SWIGTYPE_p_GiNaC__minkmetric swig_types[49]
#define SWIGTYPE_p_GiNaC__mul swig_types[50]
#define SWIGTYPE_p_GiNaC__ncmul swig_types[51]
#define SWIGTYPE_p_GiNaC__numeric swig_types[52]
#define SWIGTYPE_p_GiNaC__power swig_types[53]
#define SWIGTYPE_p_GiNaC__print_context swig_types[54]
#define SWIGTYPE_p_GiNaC__pseries swig_types[55]
#define SWIGTYPE_p_GiNaC__refcounted swig_types[56]
#define SWIGTYPE_p_GiNaC__registered_class_options swig_types[57]
#define SWIGTYPE_p_GiNaC__relational swig_types[58]
#define SWIGTYPE_p_GiNaC__scalar_products swig_types[59]
#define SWIGTYPE_p_GiNaC__sin_SERIAL swig_types[60]
#define SWIGTYPE_p_GiNaC__sinh_SERIAL swig_types[61]
#define SWIGTYPE_p_GiNaC__spinidx swig_types[62]
#define SWIGTYPE_p_GiNaC__spinmetric swig_types[63]
#define SWIGTYPE_p_GiNaC__spmapkey swig_types[64]
#define SWIGTYPE_p_GiNaC__subs_options swig_types[65]
#define SWIGTYPE_p_GiNaC__symbol swig_types[66]
#define SWIGTYPE_p_GiNaC__symmetry swig_types[67]
#define SWIGTYPE_p_GiNaC__tan_SERIAL swig_types[68]
#define SWIGTYPE_p_GiNaC__tanh_SERIAL swig_types[69]
#define SWIGTYPE_p_GiNaC__tensdelta swig_types[70]
#define SWIGTYPE_p_GiNaC__tensepsilon swig_types[71]
#define SWIGTYPE_p_GiNaC__tensmetric swig_types[72]
#define SWIGTYPE_p_GiNaC__tensor swig_types[73]
#define SWIGTYPE_p_GiNaC__tgamma_SERIAL swig_types[74]
#define SWIGTYPE_p_GiNaC__varidx swig_types[75]
#define SWIGTYPE_p_GiNaC__visitor swig_types[76]
#define SWIGTYPE_p_GiNaC__wildcard swig_types[77]
#define SWIGTYPE_p_GiNaC__zetaderiv_SERIAL swig_types[78]
#define SWIGTYPE_p_char swig_types[79]
#define SWIGTYPE_p_class_infoTGiNaC__registered_class_options_t swig_types[80]
#define SWIGTYPE_p_cln__cl_N swig_types[81]
#define SWIGTYPE_p_conjugate_funcp_1 swig_types[82]
#define SWIGTYPE_p_conjugate_funcp_2 swig_types[83]
#define SWIGTYPE_p_conjugate_funcp_3 swig_types[84]
#define SWIGTYPE_p_conjugate_funcp_4 swig_types[85]
#define SWIGTYPE_p_conjugate_funcp_5 swig_types[86]
#define SWIGTYPE_p_conjugate_funcp_exvector swig_types[87]
#define SWIGTYPE_p_derivative_funcp_1 swig_types[88]
#define SWIGTYPE_p_derivative_funcp_2 swig_types[89]
#define SWIGTYPE_p_derivative_funcp_3 swig_types[90]
#define SWIGTYPE_p_derivative_funcp_4 swig_types[91]
#define SWIGTYPE_p_derivative_funcp_5 swig_types[92]
#define SWIGTYPE_p_derivative_funcp_exvector swig_types[93]
#define SWIGTYPE_p_eval_funcp_1 swig_types[94]
#define SWIGTYPE_p_eval_funcp_2 swig_types[95]
#define SWIGTYPE_p_eval_funcp_3 swig_types[96]
#define SWIGTYPE_p_eval_funcp_4 swig_types[97]
#define SWIGTYPE_p_eval_funcp_5 swig_types[98]
#define SWIGTYPE_p_eval_funcp_exvector swig_types[99]
#define SWIGTYPE_p_evalf_funcp_1 swig_types[100]
#define SWIGTYPE_p_evalf_funcp_2 swig_types[101]
#define SWIGTYPE_p_evalf_funcp_3 swig_types[102]
#define SWIGTYPE_p_evalf_funcp_4 swig_types[103]
#define SWIGTYPE_p_evalf_funcp_5 swig_types[104]
#define SWIGTYPE_p_evalf_funcp_exvector swig_types[105]
#define SWIGTYPE_p_evalffunctype swig_types[106]
#define SWIGTYPE_p_exprseq swig_types[107]
#define SWIGTYPE_p_exvector swig_types[108]
#define SWIGTYPE_p_exvector__const_iterator swig_types[109]
#define SWIGTYPE_p_exvector__iterator swig_types[110]
#define SWIGTYPE_p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex swig_types[111]
#define SWIGTYPE_p_lst swig_types[112]
#define SWIGTYPE_p_print_functor swig_types[113]
#define SWIGTYPE_p_series_funcp_1 swig_types[114]
#define SWIGTYPE_p_series_funcp_2 swig_types[115]
#define SWIGTYPE_p_series_funcp_3 swig_types[116]
#define SWIGTYPE_p_series_funcp_4 swig_types[117]
#define SWIGTYPE_p_series_funcp_5 swig_types[118]
#define SWIGTYPE_p_series_funcp_exvector swig_types[119]
#define SWIGTYPE_p_std__listTGiNaC__epvector__iterator_t swig_types[120]
#define SWIGTYPE_p_std__logic_error swig_types[121]
#define SWIGTYPE_p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t swig_types[122]
#define SWIGTYPE_p_std__mapTGiNaC__spmapkey_GiNaC__ex_t swig_types[123]
#define SWIGTYPE_p_std__runtime_error swig_types[124]
#define SWIGTYPE_p_std__vectorTexpair_t swig_types[125]
#define SWIGTYPE_p_std__vectorTprint_functor_t swig_types[126]
#define SWIGTYPE_p_std__vectorTstd__listTGiNaC__epvector__iterator_t_t swig_types[127]
#define SWIGTYPE_p_symmetry_type swig_types[128]
#define SWIGTYPE_ptrdiff_t swig_types[129]
#define SWIGTYPE_size_t swig_types[130]
#define SWIGTYPE_std__ptrdiff_t swig_types[131]
#define SWIGTYPE_std__size_t swig_types[132]
static swig_type_info *swig_types[133];
static swig_module_info swig_module = {swig_types, 133, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */


/*-----------------------------------------------
              @(target):= _swiginac.so
  ------------------------------------------------*/
#define SWIG_init    init_swiginac

#define SWIG_name    "_swiginac"

#include "ginac.h"
using namespace GiNaC;
#include <sstream>


#include <string>

 
lst* list2lst(PyObject *input);
PyObject* lst2list(lst *input); 

//GETDESC1 and GETDESC2 are equivalent - GETDESC1 is the official way how to do
//it, but it's slower than the undocumented way GETDESC2.

#define GETDESC1(NAME) \
static swig_type_info *NAME##descr=0;\
if (!NAME##descr){\
    NAME##descr=SWIG_TypeQuery("GiNaC::"#NAME" *");\
    if (!NAME##descr) {\
        PyErr_SetString(PyExc_ValueError,"Cannot get a "#NAME" descriptor. Fix in ex.i");\
        return NULL;\
    }\
}

#define GETDESC2(NAME) \
static swig_type_info *NAME##descr=SWIGTYPE_p_GiNaC__##NAME

#define GETDESC(NAME) GETDESC2(NAME)

//converts any type from python to ex
ex * type2ex(PyObject * input) {
    basic *btmp;
    GETDESC(basic);
    if (not((SWIG_ConvertPtr(input, (void **) &btmp, basicdescr,0)) == -1))
        return new ex((*btmp));
    if (PyInt_Check(input)) 
        return new ex(numeric(PyInt_AsLong(input)));
    if (PyFloat_Check(input)) 
        return new ex(numeric(PyFloat_AsDouble(input)));
    if (PyList_Check(input)) {
        lst *l=list2lst(input);
        if (l==NULL) return NULL;
        return new ex(l->eval());
    }
    return NULL;
} 

bool checktype2ex(PyObject * input) {
    //we assume, that everything can be converted to ex. 
    //if you find some counterexample, write test for it first (which fail)
    //and then implement it here.
    return true;
}

#define EX2(NAME) \
case TINFO_##NAME: {\
    NAME *p = new NAME(ex_to<NAME>(*input));\
    GETDESC(NAME);\
    return SWIG_NewPointerObj((void *)p, NAME##descr, 1);\
}

//unwraps ex and return python object
PyObject * ex2type(const ex * input) {
    switch (ex_to<basic>(*input).tinfo()) {
        EX2(basic)
        EX2(numeric)
        EX2(expairseq)
        EX2(add)
        EX2(mul)
        EX2(symbol)
        EX2(constant)
        //EX2(exprseq)
        EX2(function)
        //EX2(fderivative)
        EX2(ncmul)
        case TINFO_lst: {
            lst *l = new lst(ex_to<lst>(*input));
            return lst2list(l);
        }
        EX2(matrix)
        EX2(power)
        EX2(relational)
        //EX2(fail)
        EX2(pseries)
        EX2(indexed)
        //EX2(color)
        EX2(clifford)
        EX2(idx)
        EX2(varidx)
        EX2(spinidx)
        EX2(tensor)
        EX2(tensdelta)
        EX2(tensmetric)
        EX2(minkmetric)
        EX2(spinmetric)
        EX2(tensepsilon)
        //EX2(su3one)
        //EX2(su3t)
        //EX2(su3f)
        //EX2(su3d)
        EX2(diracone)
        EX2(diracgamma)
        EX2(diracgamma5)
        EX2(diracgammaL)
        EX2(diracgammaR)
        EX2(wildcard)
        EX2(symmetry)
        EX2(integral)
        EX2(cliffordunit)
        default:
            throw (std::logic_error("Cannot unwrap ex. Fix in ex.i"));
    }
}

//converts ginac lst to python list (unwrapping all exs)
PyObject *lst2list(lst *input) {
    lst::const_iterator i = input->begin();
    lst::const_iterator i_end = input->end();
    PyObject *pylist = PyList_New(0);
    while (i!=i_end) {
        PyObject *item = ex2type(&(*i));
        PyList_Append(pylist, item);
        //is this necessary?
        Py_INCREF(item);
        i++;
    }
    return (pylist);
}

/*
PyObject *lst2list(lst *input) {
    lst *l = input;
    int n = l->nops(); 
    PyObject *pylist = PyList_New(n);
    PyObject *item;
    for (int i=0;i<n;i++) {
        item = ex2type(&(l->let_op(i)));
        PyList_SetItem(pylist, i, item);
        Py_INCREF(item);
    }
    return (pylist);
}*/

//convert any python list to ginac lst
lst* list2lst(PyObject * input)
{
    lst *out=new lst();
    if PyList_Check(input) {
        int n = PyList_Size(input);
        PyObject *item;
        ex *tmp;
        for (int i = 0; i<n;i++) {
            item = PyList_GetItem(input, i);
            tmp = type2ex(item);
            if (tmp) {
                out->append(*tmp);
            } else {
                PyErr_SetString(PyExc_ValueError,"Cannot convert type to ex.");
                return NULL;
            }
        }
        return out;
    }
    else {
        PyErr_SetString(PyExc_ValueError,"List expected.");
        delete out;
        return NULL;
    }
}

//converts ginac exvector to python list (unwrapping all exs)
PyObject *exvector2list(exvector *input) {
    exvector::const_iterator i = input->begin();
    exvector::const_iterator i_end = input->end();
    PyObject *pylist = PyList_New(0);
    while (i!=i_end) {
        PyObject *item = ex2type(&(*i));
        PyList_Append(pylist, item);
        //is this necessary?
        Py_INCREF(item);
        i++;
    }
    return (pylist);
}



SWIGINTERNINLINE PyObject* 
  SWIG_From_unsigned_SS_long(unsigned long value)
{
  return (value > LONG_MAX) ?
    PyLong_FromUnsignedLong(value) 
    : PyInt_FromLong((long)(value)); 
}


SWIGINTERN int
  SWIG_AsVal_unsigned_SS_long(PyObject *obj, unsigned long *val) 
{
  if (PyInt_Check(obj)) {
    long v = PyInt_AS_LONG(obj);
    if (v >= 0) {
      if (val) *val = v;
      return 1;
    }   
  }
  if (PyLong_Check(obj)) {
    unsigned long v = PyLong_AsUnsignedLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  } 
  if (val) {
    SWIG_type_error("unsigned long", obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned long
SWIG_As_unsigned_SS_long(PyObject* obj)
{
  unsigned long v;
  if (!SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_long(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_long(obj, (unsigned long*)0);
}


/* returns SWIG_OLDOBJ if the input is a raw char*, SWIG_PYSTR if is a PyString */
SWIGINTERN int
SWIG_AsCharPtrAndSize(PyObject *obj, char** cptr, size_t* psize)
{
  static swig_type_info* pchar_info = 0;
  char* vptr = 0;
  if (!pchar_info) pchar_info = SWIG_TypeQuery("char *");
  if (SWIG_ConvertPtr(obj, (void**)&vptr, pchar_info, 0) != -1) {
    if (cptr) *cptr = vptr;
    if (psize) *psize = vptr ? (strlen(vptr) + 1) : 0;
    return SWIG_OLDOBJ;
  } else {
    PyErr_Clear();
    if (PyString_Check(obj)) {
      if (cptr) {
	*cptr = PyString_AS_STRING(obj);
	if (psize) {
	  *psize = PyString_GET_SIZE(obj) + 1;
	}
      }
      return SWIG_PYSTR;
    }
  }
  if (cptr) {
    SWIG_type_error("char *", obj);
  }
  return 0;
}


SWIGINTERNINLINE int
SWIG_AsCharPtr(PyObject *obj, char **val)
{
  if (SWIG_AsCharPtrAndSize(obj, val, (size_t*)(0))) {
    return 1;
  }
  if (val) {
    PyErr_Clear();
    SWIG_type_error("char *", obj);
  }
  return 0;
}


#include <limits.h>


SWIGINTERNINLINE int
  SWIG_CheckUnsignedLongInRange(unsigned long value,
				unsigned long max_value,
				const char *errmsg) 
{
  if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %lu is greater than '%s' minimum %lu",
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
 }


#if UINT_MAX != ULONG_MAX
SWIGINTERN int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{ 
  const char* errmsg = val ? "unsigned int" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, INT_MAX, errmsg)) {
      if (val) *val = (unsigned int)(v);
      return 1;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE unsigned int
  SWIG_AsVal_unsigned_SS_int(PyObject *obj, unsigned int *val)
{
  return SWIG_AsVal_unsigned_SS_long(obj,(unsigned long *)val);
}
#endif


SWIGINTERNINLINE unsigned int
SWIG_As_unsigned_SS_int(PyObject* obj)
{
  unsigned int v;
  if (!SWIG_AsVal_unsigned_SS_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_int(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_int(obj, (unsigned int*)0);
}


SWIGINTERN PyObject *
SWIG_FromCharPtr(const char* cptr)
{ 
  if (cptr) {
    size_t size = strlen(cptr);
    if (size > INT_MAX) {
      return SWIG_NewPointerObj((char*)(cptr), 
				SWIG_TypeQuery("char *"), 0);
    } else {
      if (size != 0) {
	return PyString_FromStringAndSize(cptr, size);
      } else {
	return PyString_FromString(cptr);
      }
    }
  }
  Py_INCREF(Py_None);
  return Py_None;
}


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_long PyInt_FromLong
/*@@*/


#if UINT_MAX < LONG_MAX
/*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_long
/*@@*/
#else
/*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_int SWIG_From_unsigned_SS_long
/*@@*/
#endif

unsigned int GiNaC::find_tinfo_key(std::string const &);

  SWIGINTERN int
    SWIG_AsPtr_std_string(PyObject* obj, std::string **val)
    {
      static swig_type_info* string_info = SWIG_TypeQuery("std::string *");
      std::string *vptr;    
      if (SWIG_ConvertPtr(obj, (void**)&vptr, string_info, 0) != -1) {
	if (val) *val = vptr;
	return SWIG_OLDOBJ;
      } else {
	PyErr_Clear();
	char* buf = 0 ; size_t size = 0;
	if (SWIG_AsCharPtrAndSize(obj, &buf, &size)) {
	  if (buf) {
	    if (val) *val = new std::string(buf, size - 1);
	    return SWIG_NEWOBJ;
	  }
	} else {
	  PyErr_Clear();
	}  
	if (val) {
	  PyErr_SetString(PyExc_TypeError,"a string is expected");
	}
	return 0;
      }
    }

GiNaC::unarch_func GiNaC::find_unarch_func(std::string const &);

SWIGINTERN int
  SWIG_CheckLongInRange(long value, long min_value, long max_value,
			const char *errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %ld is less than '%s' minimum %ld", 
		   value, errmsg, min_value);
    }
    return 0;    
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError,
		   "value %ld is greater than '%s' maximum %ld", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_long(PyObject * obj, long* val)
{
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    long v = PyLong_AsLong(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("long", obj);
  }
  return 0;
 }


#if INT_MAX != LONG_MAX
SWIGINTERN int
  SWIG_AsVal_int(PyObject *obj, int *val)
{ 
  const char* errmsg = val ? "int" : (char*)0;
  long v;
  if (SWIG_AsVal_long(obj, &v)) {
    if (SWIG_CheckLongInRange(v, INT_MIN,INT_MAX, errmsg)) {
      if (val) *val = (int)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;    
}
#else
SWIGINTERNINLINE int
  SWIG_AsVal_int(PyObject *obj, int *val)
{
  return SWIG_AsVal_long(obj,(long*)val);
}
#endif


SWIGINTERNINLINE int
SWIG_As_int(PyObject* obj)
{
  int v;
  if (!SWIG_AsVal_int(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(int));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_int(PyObject* obj)
{
  return SWIG_AsVal_int(obj, (int*)0);
}


SWIGINTERNINLINE PyObject*
  SWIG_From_bool(bool value)
{
  PyObject *obj = value ? Py_True : Py_False;
  Py_INCREF(obj);
  return obj;
}


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_int PyInt_FromLong
/*@@*/


SWIGINTERN int
  SWIG_AsVal_bool(PyObject *obj, bool *val)
{
  if (obj == Py_True) {
    if (val) *val = true;
    return 1;
  }
  if (obj == Py_False) {
    if (val) *val = false;
    return 1;
  }
  int res = 0;
  if (SWIG_AsVal_int(obj, &res)) {    
    if (val) *val = res ? true : false;
    return 1;
  } else {
    PyErr_Clear();
  }  
  if (val) {
    SWIG_type_error("bool", obj);
  }
  return 0;
}


SWIGINTERNINLINE bool
SWIG_As_bool(PyObject* obj)
{
  bool v;
  if (!SWIG_AsVal_bool(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(bool));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_bool(PyObject* obj)
{
  return SWIG_AsVal_bool(obj, (bool*)0);
}

static std::string GiNaC_basic_printpython(GiNaC::basic *self){
        std::ostringstream out;
        (*self).print(print_python(out));
        return out.str();
    }

SWIGINTERNINLINE PyObject *
SWIG_FromCharArray(const char* carray, size_t size)
{
  if (size > INT_MAX) {
    return SWIG_NewPointerObj((char *)(carray), 
			      SWIG_TypeQuery("char *"), 0);
  } else {
    return PyString_FromStringAndSize(carray, (int)(size));
  }
}


SWIGINTERNINLINE PyObject*
  SWIG_From_std_string(const std::string& s)
  {
    return SWIG_FromCharArray(s.data(), s.size());
  }

static std::string GiNaC_basic_printlatex(GiNaC::basic *self){
        std::ostringstream out;
        (*self).print(print_latex(out));
        return out.str();
    }
static std::string GiNaC_basic_printc(GiNaC::basic *self){
        std::ostringstream out;
        (*self).print(print_csrc_double(out));
        return out.str();
    }
static bool GiNaC_basic___nonzero__(GiNaC::basic const *self){
        if (is_exactly_a<relational>(*self))
            return ex_to<relational>((*self).eval());
        else
            throw (std::logic_error("Cannot convert to bool."));
    }
static GiNaC::ex GiNaC_basic___add____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){ return (*self)+b; }
static GiNaC::ex GiNaC_basic___add____SWIG_1(GiNaC::basic const *self,int const &b){ return (*self)+b; }

#include <float.h>
SWIGINTERN int
  SWIG_CheckDoubleInRange(double value, double min_value, 
			  double max_value, const char* errmsg)
{
  if (value < min_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is less than %s minimum %g", 
		   value, errmsg, min_value);
    }
    return 0;
  } else if (value > max_value) {
    if (errmsg) {
      PyErr_Format(PyExc_OverflowError, 
		   "value %g is greater than %s maximum %g", 
		   value, errmsg, max_value);
    }
    return 0;
  }
  return 1;
}


SWIGINTERN int
  SWIG_AsVal_double(PyObject *obj, double *val)
{
  if (PyFloat_Check(obj)) {
    if (val) *val = PyFloat_AS_DOUBLE(obj);
    return 1;
  }  
  if (PyInt_Check(obj)) {
    if (val) *val = PyInt_AS_LONG(obj);
    return 1;
  }
  if (PyLong_Check(obj)) {
    double v = PyLong_AsDouble(obj);
    if (!PyErr_Occurred()) {
      if (val) *val = v;
      return 1;
    } else {
      if (!val) PyErr_Clear();
      return 0;
    }
  }
  if (val) {
    SWIG_type_error("double", obj);
  }
  return 0;
}


SWIGINTERN int
  SWIG_AsVal_float(PyObject *obj, float *val)
{
  const char* errmsg = val ? "float" : (char*)0;
  double v;
  if (SWIG_AsVal_double(obj, &v)) {
    if (SWIG_CheckDoubleInRange(v, -FLT_MAX, FLT_MAX, errmsg)) {
      if (val) *val = (float)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE float
SWIG_As_float(PyObject* obj)
{
  float v;
  if (!SWIG_AsVal_float(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(float));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_float(PyObject* obj)
{
  return SWIG_AsVal_float(obj, (float*)0);
}

static GiNaC::ex GiNaC_basic___add____SWIG_2(GiNaC::basic const *self,float const &b){ return (*self)+b; }
static GiNaC::ex GiNaC_basic___radd____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){ return b+(*self); }
static GiNaC::ex GiNaC_basic___radd____SWIG_1(GiNaC::basic const *self,int const &b){ return b+(*self); }
static GiNaC::ex GiNaC_basic___radd____SWIG_2(GiNaC::basic const *self,float const &b){ return b+(*self); }
static GiNaC::ex GiNaC_basic___sub____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){ return (*self)-b; }
static GiNaC::ex GiNaC_basic___sub____SWIG_1(GiNaC::basic const *self,int const &b){ return (*self)-b; }
static GiNaC::ex GiNaC_basic___sub____SWIG_2(GiNaC::basic const *self,float const &b){ return (*self)-b; }
static GiNaC::ex GiNaC_basic___rsub____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){ return b-(*self); }
static GiNaC::ex GiNaC_basic___rsub____SWIG_1(GiNaC::basic const *self,int const &b){ return b-(*self); }
static GiNaC::ex GiNaC_basic___rsub____SWIG_2(GiNaC::basic const *self,float const &b){ return b-(*self); }
static GiNaC::ex GiNaC_basic___mul____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){ return (*self)*b; }
static GiNaC::ex GiNaC_basic___mul____SWIG_1(GiNaC::basic const *self,int const &b){ return (*self)*b; }
static GiNaC::ex GiNaC_basic___mul____SWIG_2(GiNaC::basic const *self,float const &b){ return (*self)*b; }
static GiNaC::ex GiNaC_basic___rmul____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){ return b*(*self); }
static GiNaC::ex GiNaC_basic___rmul____SWIG_1(GiNaC::basic const *self,int const &b){ return b*(*self); }
static GiNaC::ex GiNaC_basic___rmul____SWIG_2(GiNaC::basic const *self,float const &b){ return b*(*self); }
static GiNaC::ex GiNaC_basic___div____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){ return (*self)/b; }
static GiNaC::ex GiNaC_basic___div____SWIG_1(GiNaC::basic const *self,int const &b){ return (*self)/b; }
static GiNaC::ex GiNaC_basic___div____SWIG_2(GiNaC::basic const *self,float const &b){ return (*self)/b; }
static GiNaC::ex GiNaC_basic___rdiv____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){ return b/(*self); }
static GiNaC::ex GiNaC_basic___rdiv____SWIG_1(GiNaC::basic const *self,int const &b){ return b/(*self); }
static GiNaC::ex GiNaC_basic___rdiv____SWIG_2(GiNaC::basic const *self,float const &b){ return b/(*self); }
static GiNaC::ex GiNaC_basic___pow____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){return pow(*self,b); }
static GiNaC::ex GiNaC_basic___pow____SWIG_1(GiNaC::basic const *self,int const &b){ return pow(*self,b); }
static GiNaC::ex GiNaC_basic___pow____SWIG_2(GiNaC::basic const *self,float const &b){ return pow(*self,b); }
static GiNaC::ex GiNaC_basic___rpow____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){return pow(b,*self); }
static GiNaC::ex GiNaC_basic___rpow____SWIG_1(GiNaC::basic const *self,int const &b){ return pow(b,*self); }
static GiNaC::ex GiNaC_basic___rpow____SWIG_2(GiNaC::basic const *self,float const &b){ return pow(b,*self);}
static GiNaC::ex GiNaC_basic___pos__(GiNaC::basic const *self){ return +(*self); }
static GiNaC::ex GiNaC_basic___neg__(GiNaC::basic const *self){ return -(*self); }
static GiNaC::ex GiNaC_basic___lt____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){return *self < b;}
static GiNaC::ex GiNaC_basic___lt____SWIG_1(GiNaC::basic const *self,int const &b){return *self < b;}
static GiNaC::ex GiNaC_basic___lt____SWIG_2(GiNaC::basic const *self,float const &b){return *self < b;}
static GiNaC::ex GiNaC_basic___le____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){return *self <= b;}
static GiNaC::ex GiNaC_basic___le____SWIG_1(GiNaC::basic const *self,int const &b){return *self <= b;}
static GiNaC::ex GiNaC_basic___le____SWIG_2(GiNaC::basic const *self,float const &b){return *self <= b;}
static GiNaC::ex GiNaC_basic___eq____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){return *self == b;}
static GiNaC::ex GiNaC_basic___eq____SWIG_1(GiNaC::basic const *self,int const &b){return *self == b;}
static GiNaC::ex GiNaC_basic___eq____SWIG_2(GiNaC::basic const *self,float const &b){return *self == b;}
static GiNaC::ex GiNaC_basic___ne____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){return *self != b;}
static GiNaC::ex GiNaC_basic___ne____SWIG_1(GiNaC::basic const *self,int const &b){return *self != b;}
static GiNaC::ex GiNaC_basic___ne____SWIG_2(GiNaC::basic const *self,float const &b){return *self != b;}
static GiNaC::ex GiNaC_basic___gt____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){return *self > b;}
static GiNaC::ex GiNaC_basic___gt____SWIG_1(GiNaC::basic const *self,int const &b){return *self > b;}
static GiNaC::ex GiNaC_basic___gt____SWIG_2(GiNaC::basic const *self,float const &b){return *self > b;}
static GiNaC::ex GiNaC_basic___ge____SWIG_0(GiNaC::basic const *self,GiNaC::basic const &b){return *self >= b;}
static GiNaC::ex GiNaC_basic___ge____SWIG_1(GiNaC::basic const *self,int const &b){return *self >= b;}
static GiNaC::ex GiNaC_basic___ge____SWIG_2(GiNaC::basic const *self,float const &b){return *self >= b;}
static GiNaC::ex GiNaC_basic_subs__SWIG_0(GiNaC::basic *self,lst const &ls,lst const &lr){
        return self->eval().subs(ls,lr);
    }
static GiNaC::ex GiNaC_basic_subs__SWIG_1(GiNaC::basic const *self,GiNaC::ex const &e,unsigned int options=0){
        return self->eval().subs(e,options);
    }
static GiNaC::ex GiNaC_basic_normal__SWIG_0(GiNaC::basic const *self,int level=0){
        return self->eval().normal(level);
    }
static GiNaC::ex GiNaC_basic_denom(GiNaC::basic const *self){
        return self->eval().denom();
    }
static bool GiNaC_basic_is_zero(GiNaC::basic const *self){
        return self->eval().is_zero();
    }
static GiNaC::ex GiNaC_basic_content(GiNaC::basic const *self,GiNaC::ex const &x){
        return self->eval().content(x);
    }
static GiNaC::ex GiNaC_basic_primpart(GiNaC::basic const *self,GiNaC::ex const &x){
        return self->eval().primpart(x);
    }
static GiNaC::ex GiNaC_basic_unit(GiNaC::basic const *self,GiNaC::ex const &x){
        return self->eval().unit(x);
    }
static GiNaC::ex GiNaC_basic_simplify_indexed__SWIG_0(GiNaC::basic const *self,unsigned int options=0){
        return self->eval().simplify_indexed(options);
    }
static GiNaC::ex GiNaC_basic_simplify_indexed__SWIG_2(GiNaC::basic const *self,GiNaC::scalar_products const &sp,unsigned int options=0){
        return self->eval().simplify_indexed(sp,options);
    }
extern int GiNaC::max_recursion_level;

SWIGINTERNINLINE long
SWIG_As_long(PyObject* obj)
{
  long v;
  if (!SWIG_AsVal_long(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(long));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_long(PyObject* obj)
{
  return SWIG_AsVal_long(obj, (long*)0);
}


SWIGINTERNINLINE double
SWIG_As_double(PyObject* obj)
{
  double v;
  if (!SWIG_AsVal_double(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(double));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_double(PyObject* obj)
{
  return SWIG_AsVal_double(obj, (double*)0);
}


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_double PyFloat_FromDouble
/*@@*/

static double GiNaC_numeric___float__(GiNaC::numeric *self){
        return (*self).to_double();
    }
static int GiNaC_numeric___int__(GiNaC::numeric *self){
        return (*self).to_int();
    }
extern GiNaC::constant const GiNaC::Pi;
extern GiNaC::constant const GiNaC::Catalan;
extern GiNaC::constant const GiNaC::Euler;
extern GiNaC::numeric const GiNaC::I;
static GiNaC::matrix *new_GiNaC_matrix__SWIG_2(lst const &l){
        matrix *m = new matrix(ex_to<matrix>(lst_to_matrix(l)));
        return m;
    }
static void GiNaC_matrix___setitem__(GiNaC::matrix *self,int idx0,int idx1,GiNaC::ex &e){
        (*self)(idx0, idx1) = e;
    }
static GiNaC::ex GiNaC_matrix___getitem__(GiNaC::matrix *self,int idx0,int idx1){
        return (*self)(idx0, idx1);
    }
GiNaC::ex GiNaC::lst_to_matrix(lst const &);
GiNaC::ex GiNaC::diag_matrix(lst const &);
GiNaC::ex GiNaC::unit_matrix(unsigned int,unsigned int);
GiNaC::ex GiNaC::symbolic_matrix(unsigned int,unsigned int,std::string const &,std::string const &);
int GiNaC::canonicalize(exvector::iterator,GiNaC::symmetry const &);
 

symmetry * type2symmetry(PyObject * input) {
    symmetry *tmp_ptr;
    GETDESC(symmetry);
    if (not((SWIG_ConvertPtr(input, (void **) &tmp_ptr, symmetrydescr, 0)) 
                    == -1)) return tmp_ptr;
    if (PyInt_Check(input)) return new symmetry(PyInt_AsLong(input));
    return NULL;
} 

bool checktype2symmetry(PyObject * input) {
    if (PyInt_Check(input)) return true;
    symmetry *tmp_ptr;
    GETDESC(symmetry);
    return (SWIG_ConvertPtr(input, (void **) &tmp_ptr, symmetrydescr, 0)) != -1;
}



SWIGINTERN int
  SWIG_AsVal_unsigned_SS_char(PyObject *obj, unsigned char *val)
{ 
  const char* errmsg = val ? "unsigned char" : (char*)0;
  unsigned long v;
  if (SWIG_AsVal_unsigned_SS_long(obj, &v)) {
    if (SWIG_CheckUnsignedLongInRange(v, UCHAR_MAX,errmsg)) {
      if (val) *val = (unsigned char)(v);
      return 1;
    } else {
      return 0;
    }
  } else {
    PyErr_Clear();
  }
  if (val) {
    SWIG_type_error(errmsg, obj);
  }
  return 0;
}


SWIGINTERNINLINE unsigned char
SWIG_As_unsigned_SS_char(PyObject* obj)
{
  unsigned char v;
  if (!SWIG_AsVal_unsigned_SS_char(obj, &v)) {
    /*
      this is needed to make valgrind/purify happier. 
     */
    memset((void*)&v, 0, sizeof(unsigned char));
  }
  return v;
}

  
SWIGINTERNINLINE int
SWIG_Check_unsigned_SS_char(PyObject* obj)
{
  return SWIG_AsVal_unsigned_SS_char(obj, (unsigned char*)0);
}


  /*@/usr/share/swig1.3/python/pymacros.swg,66,SWIG_define@*/
#define SWIG_From_unsigned_SS_char PyInt_FromLong
/*@@*/


namespace GiNaC {
    ex parse_string(const std::string &str, lst &ls) {
        return ex(str,ls);
    }
}

#ifdef __cplusplus
extern "C" {
#endif
static PyObject *_wrap_new_refcounted(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::refcounted *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_refcounted")) goto fail;
    result = (GiNaC::refcounted *)new GiNaC::refcounted();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__refcounted, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_refcounted_add_reference(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::refcounted *arg1 = (GiNaC::refcounted *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:refcounted_add_reference",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__refcounted, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->add_reference();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_refcounted_remove_reference(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::refcounted *arg1 = (GiNaC::refcounted *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:refcounted_remove_reference",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__refcounted, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (arg1)->remove_reference();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_refcounted_get_refcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::refcounted *arg1 = (GiNaC::refcounted *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:refcounted_get_refcount",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__refcounted, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::refcounted const *)arg1)->get_refcount();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_refcounted_set_refcount(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::refcounted *arg1 = (GiNaC::refcounted *) 0 ;
    size_t arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:refcounted_set_refcount",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__refcounted, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_refcount(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_refcounted(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::refcounted *arg1 = (GiNaC::refcounted *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_refcounted",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__refcounted, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * refcounted_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__refcounted, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_registered_class_options(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    char *arg2 = (char *) 0 ;
    unsigned int arg3 ;
    GiNaC::unarch_func arg4 = (GiNaC::unarch_func) 0 ;
    GiNaC::registered_class_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_registered_class_options",&obj0,&obj1,&obj2,&obj3)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    if (!SWIG_AsCharPtr(obj1, (char**)&arg2)) {
        SWIG_arg_fail(2);SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    result = (GiNaC::registered_class_options *)new GiNaC::registered_class_options((char const *)arg1,(char const *)arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__registered_class_options, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_registered_class_options_get_name(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::registered_class_options *arg1 = (GiNaC::registered_class_options *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:registered_class_options_get_name",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__registered_class_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((GiNaC::registered_class_options const *)arg1)->get_name();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_registered_class_options_get_parent_name(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::registered_class_options *arg1 = (GiNaC::registered_class_options *) 0 ;
    char *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:registered_class_options_get_parent_name",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__registered_class_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (char *)((GiNaC::registered_class_options const *)arg1)->get_parent_name();
    
    resultobj = SWIG_FromCharPtr(result);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_registered_class_options_get_id(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::registered_class_options *arg1 = (GiNaC::registered_class_options *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:registered_class_options_get_id",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__registered_class_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::registered_class_options const *)arg1)->get_id();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_registered_class_options_get_unarch_func(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::registered_class_options *arg1 = (GiNaC::registered_class_options *) 0 ;
    GiNaC::unarch_func result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:registered_class_options_get_unarch_func",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__registered_class_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (GiNaC::unarch_func)((GiNaC::registered_class_options const *)arg1)->get_unarch_func();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_registered_class_options_get_print_dispatch_table(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::registered_class_options *arg1 = (GiNaC::registered_class_options *) 0 ;
    std::vector<print_functor > *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:registered_class_options_get_print_dispatch_table",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__registered_class_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::vector<print_functor > const &_result_ref = ((GiNaC::registered_class_options const *)arg1)->get_print_dispatch_table();
        result = (std::vector<print_functor > *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTprint_functor_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_registered_class_options_set_print_func(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::registered_class_options *arg1 = (GiNaC::registered_class_options *) 0 ;
    unsigned int arg2 ;
    print_functor *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:registered_class_options_set_print_func",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__registered_class_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_print_functor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("print_functor");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    (arg1)->set_print_func(arg2,(print_functor const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_registered_class_options(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::registered_class_options *arg1 = (GiNaC::registered_class_options *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_registered_class_options",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__registered_class_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * registered_class_options_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__registered_class_options, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_find_tinfo_key(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    unsigned int result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:find_tinfo_key",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (unsigned int)GiNaC::find_tinfo_key((std::string const &)*arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_find_unarch_func(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    GiNaC::unarch_func result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:find_unarch_func",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (GiNaC::unarch_func)GiNaC::find_unarch_func((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex, 0);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_delete_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_basic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    GiNaC::basic *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::basic *)new GiNaC::basic((GiNaC::basic const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__basic, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_duplicate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_duplicate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (GiNaC::basic *)((GiNaC::basic const *)arg1)->duplicate();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__basic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_eval__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_eval",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->eval(arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_eval__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_eval",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->eval();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_eval(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_basic_eval__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic_eval__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_eval'");
    return NULL;
}


static PyObject *_wrap_basic_evalf__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_evalf",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->evalf(arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_evalf__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_evalf",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->evalf();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_evalf(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_basic_evalf__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic_evalf__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_evalf'");
    return NULL;
}


static PyObject *_wrap_basic_evalm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_evalm",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->evalm();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_eval_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_eval_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->eval_indexed((GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_dbgprint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_dbgprint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((GiNaC::basic const *)arg1)->dbgprint();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_dbgprinttree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_dbgprinttree",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((GiNaC::basic const *)arg1)->dbgprinttree();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_precedence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_precedence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::basic const *)arg1)->precedence();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_info(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_info",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::basic const *)arg1)->info(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_nops(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_nops",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->nops();
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_op(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    size_t arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_op",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->op(arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_let_op(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    size_t arg2 ;
    GiNaC::ex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_let_op",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::ex &_result_ref = (arg1)->let_op(arg2);
        result = (GiNaC::ex *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__ex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_has(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_has",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (bool)((GiNaC::basic const *)arg1)->has((GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_match(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    lst *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_match",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=list2lst(obj2);
        if (!arg3) return NULL;
    }
    result = (bool)((GiNaC::basic const *)arg1)->match((GiNaC::ex const &)*arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_map(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::map_function *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_map",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__map_function, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::map_function");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->map(*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_accept(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::visitor *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_accept",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__visitor, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::visitor");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    ((GiNaC::basic const *)arg1)->accept(*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_degree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_degree",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (int)((GiNaC::basic const *)arg1)->degree((GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_ldegree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_ldegree",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (int)((GiNaC::basic const *)arg1)->ldegree((GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_coeff__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_coeff",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->coeff((GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_coeff__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_coeff",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = ((GiNaC::basic const *)arg1)->coeff((GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_coeff(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_basic_coeff__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_basic_coeff__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_coeff'");
    return NULL;
}


static PyObject *_wrap_basic_expand__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_expand",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->expand(arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_expand__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_expand",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->expand();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_expand(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_basic_expand__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_basic_expand__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_expand'");
    return NULL;
}


static PyObject *_wrap_basic_collect__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_collect",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->collect((GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_collect__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_collect",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = ((GiNaC::basic const *)arg1)->collect((GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_collect(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_basic_collect__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_basic_collect__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_collect'");
    return NULL;
}


static PyObject *_wrap_basic_series__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::relational *arg2 = 0 ;
    int arg3 ;
    unsigned int arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:basic_series",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__relational, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::relational");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->series((GiNaC::relational const &)*arg2,arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_series__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::relational *arg2 = 0 ;
    int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_series",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__relational, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::relational");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->series((GiNaC::relational const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_series(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__relational, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_basic_series__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__relational, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_basic_series__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_series'");
    return NULL;
}


static PyObject *_wrap_basic_to_rational(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::exmap *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_to_rational",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::exmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->to_rational(*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_to_polynomial(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::exmap *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_to_polynomial",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::exmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->to_polynomial(*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_integer_content(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_integer_content",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->integer_content();
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_smod(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_smod",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->smod((GiNaC::numeric const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_max_coefficient(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_max_coefficient",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->max_coefficient();
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_get_free_indices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    exvector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_get_free_indices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->get_free_indices();
    
    {
        resultobj = exvector2list(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_add_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_add_indexed",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = ((GiNaC::basic const *)arg1)->add_indexed((GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_scalar_mul_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::numeric *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_scalar_mul_indexed",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->scalar_mul_indexed((GiNaC::ex const &)*arg2,(GiNaC::numeric const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_contract_with(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    exvector *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:basic_contract_with",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((GiNaC::basic const *)arg1)->contract_with(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_return_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_return_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::basic const *)arg1)->return_type();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_return_type_tinfo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_return_type_tinfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::basic const *)arg1)->return_type_tinfo();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_conjugate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_conjugate",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::basic const *)arg1)->conjugate();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_print_dispatch(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::registered_class_info *arg2 = 0 ;
    GiNaC::print_context *arg3 = 0 ;
    unsigned int arg4 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:basic_print_dispatch",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_class_infoTGiNaC__registered_class_options_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::registered_class_info");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__print_context, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("GiNaC::print_context");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    ((GiNaC::basic const *)arg1)->print_dispatch((class_info<GiNaC::registered_class_options > const &)*arg2,(GiNaC::print_context const &)*arg3,arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_subs_one_level(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::exmap *arg2 = 0 ;
    unsigned int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_subs_one_level",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::exmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->subs_one_level((std::map<GiNaC::ex,GiNaC::ex,GiNaC::ex_is_less > const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_diff__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::symbol *arg2 = 0 ;
    unsigned int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_diff",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symbol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symbol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->diff((GiNaC::symbol const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_diff__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::symbol *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_diff",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symbol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symbol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::basic const *)arg1)->diff((GiNaC::symbol const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_diff(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symbol, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic_diff__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symbol, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_basic_diff__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_diff'");
    return NULL;
}


static PyObject *_wrap_basic_compare(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_compare",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)((GiNaC::basic const *)arg1)->compare((GiNaC::basic const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_is_equal(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_is_equal",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::basic const *)arg1)->is_equal((GiNaC::basic const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_hold(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_hold",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        GiNaC::basic const &_result_ref = ((GiNaC::basic const *)arg1)->hold();
        result = (GiNaC::basic *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__basic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_gethash(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_gethash",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::basic const *)arg1)->gethash();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_tinfo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_tinfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::basic const *)arg1)->tinfo();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_setflag(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int arg2 ;
    GiNaC::basic *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_setflag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::basic const &_result_ref = ((GiNaC::basic const *)arg1)->setflag(arg2);
        result = (GiNaC::basic *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__basic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_clearflag(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int arg2 ;
    GiNaC::basic *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_clearflag",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::basic const &_result_ref = ((GiNaC::basic const *)arg1)->clearflag(arg2);
        result = (GiNaC::basic *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__basic, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_printpython(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_printpython",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = GiNaC_basic_printpython(arg1);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_printlatex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_printlatex",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = GiNaC_basic_printlatex(arg1);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_printc(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_printc",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = GiNaC_basic_printc(arg1);
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___nonzero__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic___nonzero__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = (bool)GiNaC_basic___nonzero__((GiNaC::basic const *)arg1);
    }
    catch(std::logic_error &_e) {
        {
            std::logic_error * temp = new std::logic_error(_e);
            if (SWIGTYPE_p_std__logic_error->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_std__logic_error->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_std__logic_error,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"std::logic_error");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_std__logic_error,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___add____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___add____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___add____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___add____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___add____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___add__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___add____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___add__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___add____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___add____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___add____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___radd____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___radd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___radd____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___radd____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___radd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___radd____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___radd____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___radd__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___radd____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___radd__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___radd____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___radd____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___radd____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___sub____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___sub____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___sub____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___sub____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___sub____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___sub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___sub____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___sub__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___sub____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___sub____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___sub____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___rsub____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rsub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___rsub____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rsub____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rsub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___rsub____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rsub____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rsub__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___rsub____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rsub__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___rsub____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___rsub____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___rsub____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___mul____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___mul____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___mul____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___mul____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___mul____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___mul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___mul____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___mul__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___mul____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___mul____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___mul____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___rmul____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rmul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___rmul____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rmul____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rmul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___rmul____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rmul____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rmul__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___rmul____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rmul__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___rmul____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___rmul____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___rmul____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___div____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___div__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___div____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___div____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___div__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___div____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___div____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___div__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___div____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___div__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___div____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___div____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___div____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___rdiv____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rdiv__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___rdiv____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rdiv____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rdiv__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___rdiv____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rdiv____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rdiv__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___rdiv____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rdiv__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___rdiv____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___rdiv____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___rdiv____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___pow____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___pow__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___pow____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___pow____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___pow__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___pow____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___pow____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___pow__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___pow____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___pow__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___pow____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___pow____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___pow____SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic___pow__'");
    return NULL;
}


static PyObject *_wrap_basic___rpow____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rpow__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___rpow____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rpow____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rpow__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___rpow____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rpow____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___rpow__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___rpow____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___rpow__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___rpow____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___rpow____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___rpow____SWIG_2(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic___rpow__'");
    return NULL;
}


static PyObject *_wrap_basic___pos__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic___pos__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = GiNaC_basic___pos__((GiNaC::basic const *)arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___neg__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic___neg__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = GiNaC_basic___neg__((GiNaC::basic const *)arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___lt____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___lt____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___lt____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___lt____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___lt____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___lt____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___lt__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___lt____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___lt____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___lt____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___le____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___le__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___le____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___le____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___le__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___le____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___le____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___le__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___le____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___le__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___le____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___le____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___le____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___eq____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___eq____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___eq____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___eq____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___eq____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___eq____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___eq__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___eq____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___eq____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___eq____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___ne____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___ne____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___ne____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___ne____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___ne____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___ne__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___ne____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___ne__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___ne____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___ne____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___ne____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___gt____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___gt____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___gt____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___gt____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___gt____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___gt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___gt____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___gt__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___gt____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___gt____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___gt____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic___ge____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___ge__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic___ge____SWIG_0((GiNaC::basic const *)arg1,(GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___ge____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int *arg2 = 0 ;
    GiNaC::ex result;
    int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___ge__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (int)(SWIG_As_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___ge____SWIG_1((GiNaC::basic const *)arg1,(int const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___ge____SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    float *arg2 = 0 ;
    GiNaC::ex result;
    float temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic___ge__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (float)(SWIG_As_float(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    result = GiNaC_basic___ge____SWIG_2((GiNaC::basic const *)arg1,(float const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic___ge__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic___ge____SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic___ge____SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_float(argv[1]);
            if (_v) {
                return _wrap_basic___ge____SWIG_2(self,args);
            }
        }
    }
    
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}


static PyObject *_wrap_basic_subs__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    lst *arg2 = 0 ;
    lst *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_subs",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=list2lst(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC_basic_subs__SWIG_0(arg1,(lst const &)*arg2,(lst const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_subs__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    unsigned int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_subs",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC_basic_subs__SWIG_1((GiNaC::basic const *)arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_subs__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_subs",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC_basic_subs__SWIG_1((GiNaC::basic const *)arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_subs(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_basic_subs__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyList_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_basic_subs__SWIG_0(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_basic_subs__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_subs'");
    return NULL;
}


static PyObject *_wrap_basic_normal__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_normal",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic_normal__SWIG_0((GiNaC::basic const *)arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_normal__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_normal",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = GiNaC_basic_normal__SWIG_0((GiNaC::basic const *)arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_normal(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_basic_normal__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_basic_normal__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_normal'");
    return NULL;
}


static PyObject *_wrap_basic_denom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_denom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = GiNaC_basic_denom((GiNaC::basic const *)arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_is_zero(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_is_zero",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)GiNaC_basic_is_zero((GiNaC::basic const *)arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_content(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_content",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC_basic_content((GiNaC::basic const *)arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_primpart(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_primpart",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC_basic_primpart((GiNaC::basic const *)arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_unit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_unit",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC_basic_unit((GiNaC::basic const *)arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_simplify_indexed__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    unsigned int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_simplify_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic_simplify_indexed__SWIG_0((GiNaC::basic const *)arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_simplify_indexed__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:basic_simplify_indexed",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = GiNaC_basic_simplify_indexed__SWIG_0((GiNaC::basic const *)arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_simplify_indexed__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::scalar_products *arg2 = 0 ;
    unsigned int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:basic_simplify_indexed",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::scalar_products");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC_basic_simplify_indexed__SWIG_2((GiNaC::basic const *)arg1,(GiNaC::scalar_products const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_simplify_indexed__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = (GiNaC::basic *) 0 ;
    GiNaC::scalar_products *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:basic_simplify_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::scalar_products");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC_basic_simplify_indexed__SWIG_2((GiNaC::basic const *)arg1,(GiNaC::scalar_products const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_basic_simplify_indexed(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_basic_simplify_indexed__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__scalar_products, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_basic_simplify_indexed__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_basic_simplify_indexed__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__basic, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__scalar_products, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_basic_simplify_indexed__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'basic_simplify_indexed'");
    return NULL;
}


static PyObject * basic_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__basic, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_max_recursion_level_set(PyObject *_val) {
    {
        int temp = (int)(SWIG_As_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::max_recursion_level (int)'");
            return 1;
        }
        GiNaC::max_recursion_level = temp;
    }
    return 0;
}


static PyObject *_wrap_max_recursion_level_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(GiNaC::max_recursion_level)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_symbol__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    GiNaC::symbol *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_symbol",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (GiNaC::symbol *)new GiNaC::symbol((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symbol, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_symbol__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    GiNaC::symbol *result;
    int res1 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_symbol",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (GiNaC::symbol *)new GiNaC::symbol((std::string const &)*arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symbol, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_new_symbol(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_symbol__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_symbol__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_symbol'");
    return NULL;
}


static PyObject *_wrap_delete_symbol(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symbol *arg1 = (GiNaC::symbol *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_symbol",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symbol, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * symbol_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__symbol, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_numeric__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int arg1 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_numeric",&obj0)) goto fail;
    {
        arg1 = (int)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::numeric *)new GiNaC::numeric(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_numeric__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_numeric",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::numeric *)new GiNaC::numeric(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_numeric__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long arg1 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_numeric",&obj0)) goto fail;
    {
        arg1 = (long)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::numeric *)new GiNaC::numeric(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_numeric__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned long arg1 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_numeric",&obj0)) goto fail;
    {
        arg1 = (unsigned long)(SWIG_As_unsigned_SS_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::numeric *)new GiNaC::numeric(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_numeric__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    long arg1 ;
    long arg2 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_numeric",&obj0,&obj1)) goto fail;
    {
        arg1 = (long)(SWIG_As_long(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (long)(SWIG_As_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::numeric *)new GiNaC::numeric(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_numeric__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double arg1 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_numeric",&obj0)) goto fail;
    {
        arg1 = (double)(SWIG_As_double(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::numeric *)new GiNaC::numeric(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_numeric__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    char *arg1 = (char *) 0 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_numeric",&obj0)) goto fail;
    if (!SWIG_AsCharPtr(obj0, (char**)&arg1)) {
        SWIG_arg_fail(1);SWIG_fail;
    }
    result = (GiNaC::numeric *)new GiNaC::numeric((char const *)arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_add(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_add",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::numeric const *)arg1)->add((GiNaC::numeric const &)*arg2);
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_sub(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_sub",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::numeric const *)arg1)->sub((GiNaC::numeric const &)*arg2);
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_mul(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_mul",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::numeric const *)arg1)->mul((GiNaC::numeric const &)*arg2);
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_div(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_div",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::numeric const *)arg1)->div((GiNaC::numeric const &)*arg2);
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_power(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_power",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::numeric const *)arg1)->power((GiNaC::numeric const &)*arg2);
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_add_dyn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_add_dyn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::numeric const &_result_ref = ((GiNaC::numeric const *)arg1)->add_dyn((GiNaC::numeric const &)*arg2);
        result = (GiNaC::numeric *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_sub_dyn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_sub_dyn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::numeric const &_result_ref = ((GiNaC::numeric const *)arg1)->sub_dyn((GiNaC::numeric const &)*arg2);
        result = (GiNaC::numeric *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_mul_dyn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_mul_dyn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::numeric const &_result_ref = ((GiNaC::numeric const *)arg1)->mul_dyn((GiNaC::numeric const &)*arg2);
        result = (GiNaC::numeric *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_div_dyn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_div_dyn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::numeric const &_result_ref = ((GiNaC::numeric const *)arg1)->div_dyn((GiNaC::numeric const &)*arg2);
        result = (GiNaC::numeric *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_power_dyn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_power_dyn",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::numeric const &_result_ref = ((GiNaC::numeric const *)arg1)->power_dyn((GiNaC::numeric const &)*arg2);
        result = (GiNaC::numeric *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_inverse(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_inverse",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::numeric const *)arg1)->inverse();
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_csgn(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_csgn",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((GiNaC::numeric const *)arg1)->csgn();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_compare(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_compare",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)((GiNaC::numeric const *)arg1)->compare((GiNaC::numeric const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_equal(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:numeric_is_equal",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::numeric const *)arg1)->is_equal((GiNaC::numeric const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_zero(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_zero",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_zero();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_positive(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_positive",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_positive();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_negative(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_negative",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_negative();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_integer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_integer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_integer();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_pos_integer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_pos_integer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_pos_integer();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_nonneg_integer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_nonneg_integer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_nonneg_integer();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_even(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_even",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_even();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_odd(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_odd",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_odd();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_prime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_prime",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_prime();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_rational(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_rational",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_rational();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_real(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_real",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_real();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_cinteger(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_cinteger",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_cinteger();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_is_crational(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_is_crational",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::numeric const *)arg1)->is_crational();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_to_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_to_int",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((GiNaC::numeric const *)arg1)->to_int();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_to_long(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    long result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_to_long",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (long)((GiNaC::numeric const *)arg1)->to_long();
    
    {
        resultobj = SWIG_From_long((long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_to_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_to_double",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)((GiNaC::numeric const *)arg1)->to_double();
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_to_cl_N(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    cln::cl_N result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_to_cl_N",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::numeric const *)arg1)->to_cl_N();
    
    {
        cln::cl_N * resultptr;
        resultptr = new cln::cl_N((cln::cl_N &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_cln__cl_N, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_real(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_real",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::numeric const *)arg1)->real();
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_imag(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_imag",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::numeric const *)arg1)->imag();
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_numer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_numer",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::numeric const *)arg1)->numer();
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_denom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    SwigValueWrapper<GiNaC::numeric > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_denom",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::numeric const *)arg1)->denom();
    
    {
        GiNaC::numeric * resultptr;
        resultptr = new GiNaC::numeric((GiNaC::numeric const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__numeric, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric_int_length(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric_int_length",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)((GiNaC::numeric const *)arg1)->int_length();
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_numeric__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    cln::cl_N *arg1 = 0 ;
    GiNaC::numeric *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_numeric",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_cln__cl_N, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("cln::cl_N");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::numeric *)new GiNaC::numeric((cln::cl_N const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__numeric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_numeric(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_cln__cl_N, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_numeric__SWIG_7(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_numeric__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            return _wrap_new_numeric__SWIG_0(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_long(argv[0]);
        if (_v) {
            return _wrap_new_numeric__SWIG_3(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_long(argv[0]);
        if (_v) {
            return _wrap_new_numeric__SWIG_2(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_double(argv[0]);
        if (_v) {
            return _wrap_new_numeric__SWIG_5(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsCharPtr(argv[0], (char **)(0));
        if (_v) {
            return _wrap_new_numeric__SWIG_6(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_long(argv[0]);
        if (_v) {
            _v = SWIG_Check_long(argv[1]);
            if (_v) {
                return _wrap_new_numeric__SWIG_4(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_numeric'");
    return NULL;
}


static PyObject *_wrap_numeric___float__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    double result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric___float__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (double)GiNaC_numeric___float__(arg1);
    
    {
        resultobj = SWIG_From_double((double)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numeric___int__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numeric___int__",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (int)GiNaC_numeric___int__(arg1);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_numeric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::numeric *arg1 = (GiNaC::numeric *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_numeric",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * numeric_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__numeric, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_PiEvalf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex result;
    
    if(!PyArg_ParseTuple(args,(char *)":PiEvalf")) goto fail;
    result = GiNaC::PiEvalf();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_EulerEvalf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex result;
    
    if(!PyArg_ParseTuple(args,(char *)":EulerEvalf")) goto fail;
    result = GiNaC::EulerEvalf();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_CatalanEvalf(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex result;
    
    if(!PyArg_ParseTuple(args,(char *)":CatalanEvalf")) goto fail;
    result = GiNaC::CatalanEvalf();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_relational__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::relational::operators arg3 ;
    GiNaC::relational *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_relational",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (GiNaC::relational::operators)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (GiNaC::relational *)new GiNaC::relational((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__relational, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_relational__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::relational *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_relational",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::relational *)new GiNaC::relational((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__relational, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_relational(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_relational__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_new_relational__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_relational'");
    return NULL;
}


static PyObject *_wrap_relational_lhs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::relational *arg1 = (GiNaC::relational *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:relational_lhs",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__relational, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::relational const *)arg1)->lhs();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_relational_rhs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::relational *arg1 = (GiNaC::relational *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:relational_rhs",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__relational, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::relational const *)arg1)->rhs();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_relational(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::relational *arg1 = (GiNaC::relational *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_relational",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__relational, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * relational_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__relational, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_quo__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    bool arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:quo",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = GiNaC::quo((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_quo__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:quo",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::quo((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_quo(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_quo__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_quo__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'quo'");
    return NULL;
}


static PyObject *_wrap_rem__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    bool arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:rem",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = GiNaC::rem((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rem__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:rem",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::rem((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rem(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_rem__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_rem__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'rem'");
    return NULL;
}


static PyObject *_wrap_decomp_rational(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:decomp_rational",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::decomp_rational((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_prem__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    bool arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:prem",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = GiNaC::prem((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_prem__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:prem",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::prem((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_prem(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_prem__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_prem__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'prem'");
    return NULL;
}


static PyObject *_wrap_sprem__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    bool arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:sprem",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = GiNaC::sprem((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sprem__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:sprem",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::sprem((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sprem(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_sprem__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_sprem__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'sprem'");
    return NULL;
}


static PyObject *_wrap_divide__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    bool arg4 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:divide",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)GiNaC::divide((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,*arg3,arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_divide__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:divide",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = (bool)GiNaC::divide((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_divide(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_divide__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_divide__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'divide'");
    return NULL;
}


static PyObject *_wrap_gcd__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = (GiNaC::ex *) 0 ;
    GiNaC::ex *arg4 = (GiNaC::ex *) 0 ;
    bool arg5 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:gcd",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__ex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_GiNaC__ex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    {
        arg5 = (bool)(SWIG_As_bool(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = GiNaC::gcd((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3,arg4,arg5);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_gcd__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = (GiNaC::ex *) 0 ;
    GiNaC::ex *arg4 = (GiNaC::ex *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:gcd",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__ex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_GiNaC__ex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(4)) SWIG_fail;
    result = GiNaC::gcd((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_gcd__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = (GiNaC::ex *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:gcd",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__ex, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(3)) SWIG_fail;
    result = GiNaC::gcd((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_gcd__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:gcd",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::gcd((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_gcd(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_gcd__SWIG_3(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_GiNaC__ex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    return _wrap_gcd__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_GiNaC__ex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_GiNaC__ex, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        return _wrap_gcd__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    void *ptr;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_GiNaC__ex, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = 1;
                    }
                }
                if (_v) {
                    {
                        void *ptr;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_GiNaC__ex, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = 1;
                        }
                    }
                    if (_v) {
                        _v = SWIG_Check_bool(argv[4]);
                        if (_v) {
                            return _wrap_gcd__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'gcd'");
    return NULL;
}


static PyObject *_wrap_lcm__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:lcm",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::lcm((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lcm__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lcm",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::lcm((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lcm(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_lcm__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_lcm__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'lcm'");
    return NULL;
}


static PyObject *_wrap_sqrfree__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sqrfree",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::sqrfree((GiNaC::ex const &)*arg1,(lst const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sqrfree__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sqrfree",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::sqrfree((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sqrfree(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_sqrfree__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_sqrfree__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'sqrfree'");
    return NULL;
}


static PyObject *_wrap_sqrfree_parfrac(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::symbol *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sqrfree_parfrac",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symbol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symbol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::sqrfree_parfrac((GiNaC::ex const &)*arg1,(GiNaC::symbol const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_collect_common_factors(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:collect_common_factors",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::collect_common_factors((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_resultant(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:resultant",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::resultant((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_constant__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    evalffunctype arg2 ;
    std::string *arg3 = 0 ;
    GiNaC::constant *result;
    int res1 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_constant",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        evalffunctype * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_evalffunctype, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("evalffunctype");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    result = (GiNaC::constant *)new GiNaC::constant((std::string const &)*arg1,arg2,(std::string const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__constant, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_constant__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    evalffunctype arg2 ;
    GiNaC::constant *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_constant",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        evalffunctype * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_evalffunctype, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("evalffunctype");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    result = (GiNaC::constant *)new GiNaC::constant((std::string const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__constant, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_constant__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    GiNaC::constant *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_constant",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (GiNaC::constant *)new GiNaC::constant((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__constant, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_constant__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    GiNaC::numeric *arg2 = 0 ;
    std::string *arg3 = 0 ;
    GiNaC::constant *result;
    int res1 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_constant",&obj0,&obj1,&obj2)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    result = (GiNaC::constant *)new GiNaC::constant((std::string const &)*arg1,(GiNaC::numeric const &)*arg2,(std::string const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__constant, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_new_constant__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    GiNaC::numeric *arg2 = 0 ;
    GiNaC::constant *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_constant",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::constant *)new GiNaC::constant((std::string const &)*arg1,(GiNaC::numeric const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__constant, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_constant(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_constant__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_evalffunctype, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_constant__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__numeric, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_constant__SWIG_4(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__numeric, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_new_constant__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_evalffunctype, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_new_constant__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_constant'");
    return NULL;
}


static PyObject *_wrap_delete_constant(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::constant *arg1 = (GiNaC::constant *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_constant",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__constant, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * constant_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__constant, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_Pi_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Pi is read-only.");
    return 1;
}


static PyObject *_wrap_Pi_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&GiNaC::Pi), SWIGTYPE_p_GiNaC__constant, 0);
    return pyobj;
}


static int _wrap_Catalan_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Catalan is read-only.");
    return 1;
}


static PyObject *_wrap_Catalan_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&GiNaC::Catalan), SWIGTYPE_p_GiNaC__constant, 0);
    return pyobj;
}


static int _wrap_Euler_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Euler is read-only.");
    return 1;
}


static PyObject *_wrap_Euler_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&GiNaC::Euler), SWIGTYPE_p_GiNaC__constant, 0);
    return pyobj;
}


static int _wrap_I_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable I is read-only.");
    return 1;
}


static PyObject *_wrap_I_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&GiNaC::I), SWIGTYPE_p_GiNaC__numeric, 0);
    return pyobj;
}


static PyObject *_wrap_new_integral(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::integral *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_integral",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = (GiNaC::integral *)new GiNaC::integral((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__integral, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_integral_get_free_indices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::integral *arg1 = (GiNaC::integral *) 0 ;
    exvector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:integral_get_free_indices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__integral, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::integral const *)arg1)->get_free_indices();
    
    {
        resultobj = exvector2list(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_integral_return_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::integral *arg1 = (GiNaC::integral *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:integral_return_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__integral, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::integral const *)arg1)->return_type();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_integral_return_type_tinfo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::integral *arg1 = (GiNaC::integral *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:integral_return_type_tinfo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__integral, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::integral const *)arg1)->return_type_tinfo();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_integral_eval_integ(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::integral *arg1 = (GiNaC::integral *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:integral_eval_integ",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__integral, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::integral const *)arg1)->eval_integ();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_integral_max_integration_level_set(PyObject *_val) {
    {
        int temp = (int)(SWIG_As_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::integral::max_integration_level (int)'");
            return 1;
        }
        GiNaC::integral::max_integration_level = temp;
    }
    return 0;
}


static PyObject *_wrap_integral_max_integration_level_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_int((int)(GiNaC::integral::max_integration_level)); 
    }
    return pyobj;
}


static int _wrap_integral_relative_integration_error_set(PyObject *_val) {
    {
        GiNaC::ex * temp;
        if ((SWIG_ConvertPtr(_val, (void **)(&temp), SWIGTYPE_p_GiNaC__ex, SWIG_POINTER_EXCEPTION)) == -1) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::integral::relative_integration_error'");
            return 1;
        }
        GiNaC::integral::relative_integration_error = *((GiNaC::ex *) temp);
    }
    return 0;
}


static PyObject *_wrap_integral_relative_integration_error_get(void) {
    PyObject *pyobj = NULL;
    
    pyobj = SWIG_NewPointerObj((void *)(&GiNaC::integral::relative_integration_error), SWIGTYPE_p_GiNaC__ex, 0);
    return pyobj;
}


static PyObject *_wrap_delete_integral(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::integral *arg1 = (GiNaC::integral *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_integral",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__integral, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * integral_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__integral, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_adaptivesimpson__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:adaptivesimpson",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    result = GiNaC::adaptivesimpson((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_adaptivesimpson__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:adaptivesimpson",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = GiNaC::adaptivesimpson((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_adaptivesimpson(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_adaptivesimpson__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_adaptivesimpson__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'adaptivesimpson'");
    return NULL;
}


static PyObject *_wrap_new_matrix__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    unsigned int arg2 ;
    GiNaC::matrix *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_matrix",&obj0,&obj1)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::matrix *)new GiNaC::matrix(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__matrix, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_matrix__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    unsigned int arg2 ;
    lst *arg3 = 0 ;
    GiNaC::matrix *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_matrix",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3=list2lst(obj2);
        if (!arg3) return NULL;
    }
    result = (GiNaC::matrix *)new GiNaC::matrix(arg1,arg2,(lst const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__matrix, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_eval_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_eval_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->eval_indexed((GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_add_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:matrix_add_indexed",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = ((GiNaC::matrix const *)arg1)->add_indexed((GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_scalar_mul_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::numeric *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:matrix_scalar_mul_indexed",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->scalar_mul_indexed((GiNaC::ex const &)*arg2,(GiNaC::numeric const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_contract_with(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    exvector *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:matrix_contract_with",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((GiNaC::matrix const *)arg1)->contract_with(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_rows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:matrix_rows",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::matrix const *)arg1)->rows();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_cols(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:matrix_cols",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::matrix const *)arg1)->cols();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_add(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::matrix *arg2 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_add",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->add((GiNaC::matrix const &)*arg2);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_sub(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::matrix *arg2 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_sub",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->sub((GiNaC::matrix const &)*arg2);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_mul__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::matrix *arg2 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_mul",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->mul((GiNaC::matrix const &)*arg2);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_mul__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_mul",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->mul((GiNaC::numeric const &)*arg2);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_mul(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_matrix_mul__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__numeric, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_matrix_mul__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'matrix_mul'");
    return NULL;
}


static PyObject *_wrap_matrix_mul_scalar(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_mul_scalar",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = ((GiNaC::matrix const *)arg1)->mul_scalar((GiNaC::ex const &)*arg2);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_pow(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_pow",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = ((GiNaC::matrix const *)arg1)->pow((GiNaC::ex const &)*arg2);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix___call____SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    GiNaC::ex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:matrix___call__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        GiNaC::ex const &_result_ref = ((GiNaC::matrix const *)arg1)->operator ()(arg2,arg3);
        result = (GiNaC::ex *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__ex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix___call____SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    GiNaC::ex *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:matrix___call__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        GiNaC::ex &_result_ref = (arg1)->operator ()(arg2,arg3);
        result = (GiNaC::ex *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__ex, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix___call__(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_matrix___call____SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_matrix___call____SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'matrix___call__'");
    return NULL;
}


static PyObject *_wrap_matrix_set(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::matrix *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:matrix_set",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        GiNaC::matrix &_result_ref = (arg1)->set(arg2,arg3,(GiNaC::ex const &)*arg4);
        result = (GiNaC::matrix *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__matrix, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_transpose(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:matrix_transpose",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::matrix const *)arg1)->transpose();
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_determinant__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    unsigned int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_determinant",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->determinant(arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_determinant__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:matrix_determinant",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::matrix const *)arg1)->determinant();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_determinant(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_matrix_determinant__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_matrix_determinant__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'matrix_determinant'");
    return NULL;
}


static PyObject *_wrap_matrix_trace(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:matrix_trace",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::matrix const *)arg1)->trace();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_charpoly(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix_charpoly",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = ((GiNaC::matrix const *)arg1)->charpoly((GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_inverse(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:matrix_inverse",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    try {
        result = ((GiNaC::matrix const *)arg1)->inverse();
    }
    catch(std::runtime_error &_e) {
        {
            std::runtime_error * temp = new std::runtime_error(_e);
            if (SWIGTYPE_p_std__runtime_error->clientdata) {
                PyErr_SetObject((PyObject *) (SWIGTYPE_p_std__runtime_error->clientdata), SWIG_NewPointerObj(temp,SWIGTYPE_p_std__runtime_error,1));
            } else {
                PyErr_SetString(PyExc_RuntimeError,"std::runtime_error");
                /*
                      PyErr_SetObject(PyExc_RuntimeError, SWIG_NewPointerObj(temp,SWIGTYPE_p_std__runtime_error,1));
                    */
            }
            SWIG_fail;
        }
    }
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_solve__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::matrix *arg2 = 0 ;
    GiNaC::matrix *arg3 = 0 ;
    unsigned int arg4 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:matrix_solve",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->solve((GiNaC::matrix const &)*arg2,(GiNaC::matrix const &)*arg3,arg4);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_solve__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    GiNaC::matrix *arg2 = 0 ;
    GiNaC::matrix *arg3 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:matrix_solve",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::matrix const *)arg1)->solve((GiNaC::matrix const &)*arg2,(GiNaC::matrix const &)*arg3);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix_solve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_matrix_solve__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_matrix_solve__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'matrix_solve'");
    return NULL;
}


static PyObject *_wrap_matrix_rank(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:matrix_rank",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::matrix const *)arg1)->rank();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_matrix__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    lst *arg1 = 0 ;
    GiNaC::matrix *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_matrix",&obj0)) goto fail;
    {
        arg1=list2lst(obj0);
        if (!arg1) return NULL;
    }
    result = (GiNaC::matrix *)new_GiNaC_matrix__SWIG_2((lst const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__matrix, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_matrix(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (PyList_Check(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_matrix__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_matrix__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                {
                    _v = (PyList_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_matrix__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_matrix'");
    return NULL;
}


static PyObject *_wrap_matrix___setitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    int arg2 ;
    int arg3 ;
    GiNaC::ex *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:matrix___setitem__",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = PyInt_AsLong(PyTuple_GetItem(obj1,0));
        arg3 = PyInt_AsLong(PyTuple_GetItem(obj1,1));
    }
    {
        arg4 = type2ex(obj2);
        if (!arg4) return NULL;
    }
    GiNaC_matrix___setitem__(arg1,arg2,arg3,*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_matrix___getitem__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    int arg2 ;
    int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:matrix___getitem__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = PyInt_AsLong(PyTuple_GetItem(obj1,0));
        arg3 = PyInt_AsLong(PyTuple_GetItem(obj1,1));
    }
    result = GiNaC_matrix___getitem__(arg1,arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_matrix(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = (GiNaC::matrix *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_matrix",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * matrix_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__matrix, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_nops(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:nops",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::nops((GiNaC::matrix const &)*arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_eval__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:eval",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::eval((GiNaC::matrix const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_eval__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:eval",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::eval((GiNaC::matrix const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_eval(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_eval__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_eval__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'eval'");
    return NULL;
}


static PyObject *_wrap_evalf__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:evalf",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::evalf((GiNaC::matrix const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_evalf__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:evalf",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::evalf((GiNaC::matrix const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_evalf(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_evalf__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_evalf__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'evalf'");
    return NULL;
}


static PyObject *_wrap_rows(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rows",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (unsigned int)GiNaC::rows((GiNaC::matrix const &)*arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cols(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cols",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (unsigned int)GiNaC::cols((GiNaC::matrix const &)*arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_transpose(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:transpose",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::transpose((GiNaC::matrix const &)*arg1);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_determinant__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    unsigned int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:determinant",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::determinant((GiNaC::matrix const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_determinant__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:determinant",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::determinant((GiNaC::matrix const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_determinant(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_determinant__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__matrix, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_determinant__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'determinant'");
    return NULL;
}


static PyObject *_wrap_trace(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:trace",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::trace((GiNaC::matrix const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_charpoly(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:charpoly",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::charpoly((GiNaC::matrix const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_inverse(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    SwigValueWrapper<GiNaC::matrix > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:inverse",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::inverse((GiNaC::matrix const &)*arg1);
    
    {
        GiNaC::matrix * resultptr;
        resultptr = new GiNaC::matrix((GiNaC::matrix &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__matrix, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rank(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::matrix *arg1 = 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rank",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__matrix, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::matrix");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (unsigned int)GiNaC::rank((GiNaC::matrix const &)*arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lst_to_matrix(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    lst *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lst_to_matrix",&obj0)) goto fail;
    {
        arg1=list2lst(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::lst_to_matrix((lst const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_diag_matrix(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    lst *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:diag_matrix",&obj0)) goto fail;
    {
        arg1=list2lst(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::diag_matrix((lst const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_unit_matrix__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    unsigned int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:unit_matrix",&obj0,&obj1)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::unit_matrix(arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_unit_matrix__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:unit_matrix",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::unit_matrix(arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_unit_matrix(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_unit_matrix__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_unit_matrix__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'unit_matrix'");
    return NULL;
}


static PyObject *_wrap_symbolic_matrix__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    unsigned int arg2 ;
    std::string *arg3 = 0 ;
    std::string *arg4 = 0 ;
    GiNaC::ex result;
    int res3 = 0 ;
    int res4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:symbolic_matrix",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res4 = SWIG_AsPtr_std_string(obj3, &ptr);
        if (!res4) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj3);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
        arg4 = ptr;
    }
    result = GiNaC::symbolic_matrix(arg1,arg2,(std::string const &)*arg3,(std::string const &)*arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    if (res3 == SWIG_NEWOBJ) delete arg3;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    if (res4 == SWIG_NEWOBJ) delete arg4;
    return NULL;
}


static PyObject *_wrap_symbolic_matrix__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    unsigned int arg2 ;
    std::string *arg3 = 0 ;
    GiNaC::ex result;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:symbolic_matrix",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    result = GiNaC::symbolic_matrix(arg1,arg2,(std::string const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_symbolic_matrix(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_symbolic_matrix__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    _v = SWIG_AsPtr_std_string(argv[3], (std::string**)(0));
                    if (_v) {
                        return _wrap_symbolic_matrix__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'symbolic_matrix'");
    return NULL;
}


static PyObject *_wrap_conjugateepvector(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::epvector *arg1 = 0 ;
    GiNaC::epvector *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conjugateepvector",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTexpair_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::epvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::epvector *)GiNaC::conjugateepvector((std::vector<expair > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_std__vectorTexpair_t, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_expairseq__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::expairseq *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_expairseq",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::expairseq *)new GiNaC::expairseq((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__expairseq, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_expairseq__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector *arg1 = 0 ;
    GiNaC::expairseq *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_expairseq",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::expairseq *)new GiNaC::expairseq((exvector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__expairseq, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_expairseq(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_expairseq__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_expairseq__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_expairseq'");
    return NULL;
}


static PyObject *_wrap_expairseq_precedence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::expairseq *arg1 = (GiNaC::expairseq *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:expairseq_precedence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__expairseq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::expairseq const *)arg1)->precedence();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_expairseq(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::expairseq *arg1 = (GiNaC::expairseq *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_expairseq",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__expairseq, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * expairseq_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__expairseq, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_mul__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::mul *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_mul",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::mul *)new GiNaC::mul((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__mul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_mul__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector *arg1 = 0 ;
    GiNaC::mul *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_mul",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::mul *)new GiNaC::mul((exvector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__mul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_mul__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::epvector *arg1 = 0 ;
    GiNaC::mul *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_mul",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTexpair_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::epvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::mul *)new GiNaC::mul((std::vector<expair > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__mul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_mul__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::mul *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_mul",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = (GiNaC::mul *)new GiNaC::mul((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__mul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_mul(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_mul__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTexpair_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_mul__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_mul__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_mul__SWIG_3(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_mul'");
    return NULL;
}


static PyObject *_wrap_mul_algebraic_subs_mul(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::mul *arg1 = (GiNaC::mul *) 0 ;
    GiNaC::exmap *arg2 = 0 ;
    unsigned int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:mul_algebraic_subs_mul",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__mul, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::exmap");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::mul const *)arg1)->algebraic_subs_mul((std::map<GiNaC::ex,GiNaC::ex,GiNaC::ex_is_less > const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_mul(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::mul *arg1 = (GiNaC::mul *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_mul",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__mul, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * mul_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__mul, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_ncmul__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ncmul *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_ncmul",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::ncmul *)new GiNaC::ncmul((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__ncmul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ncmul__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ncmul *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_ncmul",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = (GiNaC::ncmul *)new GiNaC::ncmul((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__ncmul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ncmul__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ncmul *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_ncmul",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = (GiNaC::ncmul *)new GiNaC::ncmul((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__ncmul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ncmul__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::ncmul *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_ncmul",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    result = (GiNaC::ncmul *)new GiNaC::ncmul((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__ncmul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ncmul__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::ex *arg6 = 0 ;
    GiNaC::ncmul *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_ncmul",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    {
        arg6 = type2ex(obj5);
        if (!arg6) return NULL;
    }
    result = (GiNaC::ncmul *)new GiNaC::ncmul((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5,(GiNaC::ex const &)*arg6);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__ncmul, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_ncmul(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_ncmul__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_ncmul__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_ncmul__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_new_ncmul__SWIG_3(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (checktype2ex(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_new_ncmul__SWIG_4(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_ncmul'");
    return NULL;
}


static PyObject *_wrap_delete_ncmul(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ncmul *arg1 = (GiNaC::ncmul *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_ncmul",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__ncmul, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * ncmul_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__ncmul, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_power(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::power *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_power",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::power *)new GiNaC::power((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__power, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_power(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::power *arg1 = (GiNaC::power *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_power",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__power, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * power_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__power, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_add__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::add *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_add",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::add *)new GiNaC::add((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__add, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_add__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector *arg1 = 0 ;
    GiNaC::add *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_add",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::add *)new GiNaC::add((exvector const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__add, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_add__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::epvector *arg1 = 0 ;
    GiNaC::add *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_add",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_std__vectorTexpair_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::epvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::add *)new GiNaC::add((std::vector<expair > const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__add, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_add(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_add__SWIG_1(self,args);
        }
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_std__vectorTexpair_t, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            return _wrap_new_add__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_add__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_add'");
    return NULL;
}


static PyObject *_wrap_delete_add(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::add *arg1 = (GiNaC::add *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_add",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__add, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * add_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__add, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_function_options__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_function_options")) goto fail;
    result = (GiNaC::function_options *)new GiNaC::function_options();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_function_options__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    std::string *arg2 = 0 ;
    GiNaC::function_options *result;
    int res1 = 0 ;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_function_options",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    result = (GiNaC::function_options *)new GiNaC::function_options((std::string const &)*arg1,(std::string const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_new_function_options__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    GiNaC::function_options *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_function_options",&obj0)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    result = (GiNaC::function_options *)new GiNaC::function_options((std::string const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_function_options__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    unsigned int arg2 ;
    GiNaC::function_options *result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_function_options",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::function_options *)new GiNaC::function_options((std::string const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 1);
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_new_function_options(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_function_options__SWIG_0(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            return _wrap_new_function_options__SWIG_2(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_new_function_options__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_AsPtr_std_string(argv[0], (std::string**)(0));
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_new_function_options__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_function_options'");
    return NULL;
}


static PyObject *_wrap_delete_function_options(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_function_options",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_initialize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_options_initialize",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->initialize();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_dummy(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_options_dummy",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        GiNaC::function_options &_result_ref = (arg1)->dummy();
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_set_name__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    std::string *arg2 = 0 ;
    std::string *arg3 = 0 ;
    GiNaC::function_options *result;
    int res2 = 0 ;
    int res3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:function_options_set_name",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        std::string *ptr = (std::string *)0;
        res3 = SWIG_AsPtr_std_string(obj2, &ptr);
        if (!res3) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj2);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = ptr;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->set_name((std::string const &)*arg2,(std::string const &)*arg3);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    if (res3 == SWIG_NEWOBJ) delete arg3;
    return NULL;
}


static PyObject *_wrap_function_options_set_name__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    std::string *arg2 = 0 ;
    GiNaC::function_options *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_set_name",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->set_name((std::string const &)*arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_function_options_set_name(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                return _wrap_function_options_set_name__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_AsPtr_std_string(argv[1], (std::string**)(0));
            if (_v) {
                _v = SWIG_AsPtr_std_string(argv[2], (std::string**)(0));
                if (_v) {
                    return _wrap_function_options_set_name__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'function_options_set_name'");
    return NULL;
}


static PyObject *_wrap_function_options_latex_name(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    std::string *arg2 = 0 ;
    GiNaC::function_options *result;
    int res2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_latex_name",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        std::string *ptr = (std::string *)0;
        res2 = SWIG_AsPtr_std_string(obj1, &ptr);
        if (!res2) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj1);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = ptr;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->latex_name((std::string const &)*arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return resultobj;
    fail:
    if (res2 == SWIG_NEWOBJ) delete arg2;
    return NULL;
}


static PyObject *_wrap_function_options_eval_func__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    eval_funcp_1 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_eval_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        eval_funcp_1 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_eval_funcp_1, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("eval_funcp_1");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->eval_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_eval_func__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    eval_funcp_2 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_eval_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        eval_funcp_2 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_eval_funcp_2, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("eval_funcp_2");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->eval_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_eval_func__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    eval_funcp_3 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_eval_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        eval_funcp_3 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_eval_funcp_3, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("eval_funcp_3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->eval_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_eval_func__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    eval_funcp_4 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_eval_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        eval_funcp_4 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_eval_funcp_4, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("eval_funcp_4");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->eval_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_eval_func__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    eval_funcp_5 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_eval_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        eval_funcp_5 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_eval_funcp_5, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("eval_funcp_5");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->eval_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_evalf_func__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    evalf_funcp_1 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_evalf_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        evalf_funcp_1 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_evalf_funcp_1, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("evalf_funcp_1");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->evalf_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_evalf_func__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    evalf_funcp_2 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_evalf_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        evalf_funcp_2 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_evalf_funcp_2, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("evalf_funcp_2");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->evalf_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_evalf_func__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    evalf_funcp_3 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_evalf_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        evalf_funcp_3 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_evalf_funcp_3, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("evalf_funcp_3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->evalf_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_evalf_func__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    evalf_funcp_4 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_evalf_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        evalf_funcp_4 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_evalf_funcp_4, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("evalf_funcp_4");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->evalf_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_evalf_func__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    evalf_funcp_5 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_evalf_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        evalf_funcp_5 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_evalf_funcp_5, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("evalf_funcp_5");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->evalf_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_conjugate_func__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    conjugate_funcp_1 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_conjugate_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        conjugate_funcp_1 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_conjugate_funcp_1, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("conjugate_funcp_1");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->conjugate_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_conjugate_func__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    conjugate_funcp_2 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_conjugate_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        conjugate_funcp_2 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_conjugate_funcp_2, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("conjugate_funcp_2");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->conjugate_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_conjugate_func__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    conjugate_funcp_3 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_conjugate_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        conjugate_funcp_3 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_conjugate_funcp_3, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("conjugate_funcp_3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->conjugate_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_conjugate_func__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    conjugate_funcp_4 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_conjugate_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        conjugate_funcp_4 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_conjugate_funcp_4, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("conjugate_funcp_4");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->conjugate_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_conjugate_func__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    conjugate_funcp_5 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_conjugate_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        conjugate_funcp_5 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_conjugate_funcp_5, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("conjugate_funcp_5");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->conjugate_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_derivative_func__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    derivative_funcp_1 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_derivative_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        derivative_funcp_1 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_derivative_funcp_1, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("derivative_funcp_1");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->derivative_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_derivative_func__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    derivative_funcp_2 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_derivative_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        derivative_funcp_2 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_derivative_funcp_2, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("derivative_funcp_2");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->derivative_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_derivative_func__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    derivative_funcp_3 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_derivative_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        derivative_funcp_3 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_derivative_funcp_3, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("derivative_funcp_3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->derivative_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_derivative_func__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    derivative_funcp_4 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_derivative_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        derivative_funcp_4 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_derivative_funcp_4, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("derivative_funcp_4");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->derivative_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_derivative_func__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    derivative_funcp_5 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_derivative_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        derivative_funcp_5 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_derivative_funcp_5, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("derivative_funcp_5");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->derivative_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_series_func__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    series_funcp_1 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_series_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        series_funcp_1 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_series_funcp_1, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("series_funcp_1");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->series_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_series_func__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    series_funcp_2 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_series_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        series_funcp_2 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_series_funcp_2, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("series_funcp_2");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->series_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_series_func__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    series_funcp_3 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_series_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        series_funcp_3 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_series_funcp_3, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("series_funcp_3");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->series_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_series_func__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    series_funcp_4 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_series_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        series_funcp_4 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_series_funcp_4, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("series_funcp_4");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->series_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_series_func__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    series_funcp_5 arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_series_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        series_funcp_5 * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_series_funcp_5, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("series_funcp_5");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->series_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_eval_func__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    eval_funcp_exvector arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_eval_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        eval_funcp_exvector * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_eval_funcp_exvector, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("eval_funcp_exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->eval_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_eval_func(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_eval_funcp_1, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_eval_func__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_eval_funcp_2, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_eval_func__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_eval_funcp_3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_eval_func__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_eval_funcp_4, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_eval_func__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_eval_funcp_5, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_eval_func__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_eval_funcp_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_eval_func__SWIG_5(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'function_options_eval_func'");
    return NULL;
}


static PyObject *_wrap_function_options_evalf_func__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    evalf_funcp_exvector arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_evalf_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        evalf_funcp_exvector * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_evalf_funcp_exvector, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("evalf_funcp_exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->evalf_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_evalf_func(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_evalf_funcp_1, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_evalf_func__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_evalf_funcp_2, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_evalf_func__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_evalf_funcp_3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_evalf_func__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_evalf_funcp_4, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_evalf_func__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_evalf_funcp_5, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_evalf_func__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_evalf_funcp_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_evalf_func__SWIG_5(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'function_options_evalf_func'");
    return NULL;
}


static PyObject *_wrap_function_options_conjugate_func__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    conjugate_funcp_exvector arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_conjugate_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        conjugate_funcp_exvector * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_conjugate_funcp_exvector, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("conjugate_funcp_exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->conjugate_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_conjugate_func(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_conjugate_funcp_1, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_conjugate_func__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_conjugate_funcp_2, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_conjugate_func__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_conjugate_funcp_3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_conjugate_func__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_conjugate_funcp_4, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_conjugate_func__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_conjugate_funcp_5, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_conjugate_func__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_conjugate_funcp_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_conjugate_func__SWIG_5(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'function_options_conjugate_func'");
    return NULL;
}


static PyObject *_wrap_function_options_derivative_func__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    derivative_funcp_exvector arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_derivative_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        derivative_funcp_exvector * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_derivative_funcp_exvector, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("derivative_funcp_exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->derivative_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_derivative_func(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_derivative_funcp_1, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_derivative_func__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_derivative_funcp_2, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_derivative_func__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_derivative_funcp_3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_derivative_func__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_derivative_funcp_4, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_derivative_func__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_derivative_funcp_5, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_derivative_func__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_derivative_funcp_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_derivative_func__SWIG_5(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'function_options_derivative_func'");
    return NULL;
}


static PyObject *_wrap_function_options_series_func__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    series_funcp_exvector arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_series_func",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        series_funcp_exvector * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_series_funcp_exvector, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("series_funcp_exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->series_func(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_series_func(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_series_funcp_1, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_series_func__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_series_funcp_2, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_series_func__SWIG_1(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_series_funcp_3, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_series_func__SWIG_2(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_series_funcp_4, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_series_func__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_series_funcp_5, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_series_func__SWIG_4(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_series_funcp_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_function_options_series_func__SWIG_5(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'function_options_series_func'");
    return NULL;
}


static PyObject *_wrap_function_options_set_return_type__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:function_options_set_return_type",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->set_return_type(arg2,arg3);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_set_return_type__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    unsigned int arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_set_return_type",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->set_return_type(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_set_return_type(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_function_options_set_return_type__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_function_options_set_return_type__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'function_options_set_return_type'");
    return NULL;
}


static PyObject *_wrap_function_options_do_not_evalf_params(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_options_do_not_evalf_params",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        GiNaC::function_options &_result_ref = (arg1)->do_not_evalf_params();
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_remember__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    unsigned int arg4 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:function_options_remember",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->remember(arg2,arg3,arg4);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_remember__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    unsigned int arg2 ;
    unsigned int arg3 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:function_options_remember",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->remember(arg2,arg3);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_remember__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    unsigned int arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_remember",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->remember(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_remember(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_function_options_remember__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_function_options_remember__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__function_options, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_function_options_remember__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'function_options_remember'");
    return NULL;
}


static PyObject *_wrap_function_options_overloaded(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    unsigned int arg2 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_overloaded",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->overloaded(arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_set_symmetry(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::function_options *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_options_set_symmetry",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::function_options &_result_ref = (arg1)->set_symmetry((GiNaC::symmetry const &)*arg2);
        result = (GiNaC::function_options *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function_options, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_get_name(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_options_get_name",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::function_options const *)arg1)->get_name();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_options_get_nparams(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = (GiNaC::function_options *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_options_get_nparams",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::function_options const *)arg1)->get_nparams();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject * function_options_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__function_options, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_do_taylor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::do_taylor *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_do_taylor")) goto fail;
    result = (GiNaC::do_taylor *)new GiNaC::do_taylor();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__do_taylor, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_do_taylor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::do_taylor *arg1 = (GiNaC::do_taylor *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_do_taylor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__do_taylor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * do_taylor_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__do_taylor, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_function__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::function *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_function",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::function *)new GiNaC::function(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_function__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_function",&obj0,&obj1)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::function *)new GiNaC::function(arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_function__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_function",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = (GiNaC::function *)new GiNaC::function(arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_function__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_function",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = (GiNaC::function *)new GiNaC::function(arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_function__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_function",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    result = (GiNaC::function *)new GiNaC::function(arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_function__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::ex *arg6 = 0 ;
    GiNaC::function *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_function",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    {
        arg6 = type2ex(obj5);
        if (!arg6) return NULL;
    }
    result = (GiNaC::function *)new GiNaC::function(arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5,(GiNaC::ex const &)*arg6);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__function, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_function(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_function__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_function__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_function__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_function__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_new_function__SWIG_4(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (checktype2ex(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_new_function__SWIG_5(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_function'");
    return NULL;
}


static PyObject *_wrap_function_precedence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function *arg1 = (GiNaC::function *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_precedence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::function const *)arg1)->precedence();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_calchash(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function *arg1 = (GiNaC::function *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_calchash",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::function const *)arg1)->calchash();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_thiscontainer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function *arg1 = (GiNaC::function *) 0 ;
    exvector *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_thiscontainer",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::function const *)arg1)->thiscontainer((exvector const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_register_new(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function_options *arg1 = 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_register_new",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function_options, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::function_options");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (unsigned int)GiNaC::function::register_new((GiNaC::function_options const &)*arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_function_current_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::function::current_serial (unsigned int)'");
            return 1;
        }
        GiNaC::function::current_serial = temp;
    }
    return 0;
}


static PyObject *_wrap_function_current_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::function::current_serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_function_find_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    unsigned int arg2 ;
    unsigned int result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:function_find_function",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (unsigned int)GiNaC::function::find_function((std::string const &)*arg1,arg2);
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyObject *_wrap_function_get_serial(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function *arg1 = (GiNaC::function *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_get_serial",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::function const *)arg1)->get_serial();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_function_get_name(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function *arg1 = (GiNaC::function *) 0 ;
    std::string result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:function_get_name",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::function const *)arg1)->get_name();
    
    {
        resultobj = SWIG_From_std_string((std::string)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_function(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::function *arg1 = (GiNaC::function *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_function",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__function, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * function_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__function, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_conjugate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conjugate",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::conjugate((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_has(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:has",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (bool)GiNaC::has((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_find(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    lst *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:find",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=list2lst(obj2);
        if (!arg3) return NULL;
    }
    result = (bool)GiNaC::find((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_degree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:degree",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (int)GiNaC::degree((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_ldegree(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:ldegree",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (int)GiNaC::ldegree((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_coeff__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:coeff",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::coeff((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_coeff__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:coeff",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::coeff((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_coeff(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_coeff__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_coeff__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'coeff'");
    return NULL;
}


static PyObject *_wrap_numer(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numer",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::numer((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_denom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:denom",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::denom((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_numer_denom(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:numer_denom",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::numer_denom((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_normal__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:normal",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::normal((GiNaC::ex const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_normal__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:normal",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::normal((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_normal(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_normal__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            _v = SWIG_Check_int(argv[1]);
            if (_v) {
                return _wrap_normal__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'normal'");
    return NULL;
}


static PyObject *_wrap_to_rational(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:to_rational",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::to_rational((GiNaC::ex const &)*arg1,*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_to_polynomial(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:to_polynomial",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::to_polynomial((GiNaC::ex const &)*arg1,*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_collect__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:collect",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::collect((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_collect__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:collect",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::collect((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_collect(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_collect__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_collect__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'collect'");
    return NULL;
}


static PyObject *_wrap_evalm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:evalm",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::evalm((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_eval_integ(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:eval_integ",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::eval_integ((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_diff__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::symbol *arg2 = 0 ;
    unsigned int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:diff",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symbol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symbol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::diff((GiNaC::ex const &)*arg1,(GiNaC::symbol const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_diff__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::symbol *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:diff",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symbol, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symbol");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::diff((GiNaC::ex const &)*arg1,(GiNaC::symbol const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_diff(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symbol, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_diff__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symbol, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_diff__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'diff'");
    return NULL;
}


static PyObject *_wrap_series__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    int arg3 ;
    unsigned int arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:series",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = GiNaC::series((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_series__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:series",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::series((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_series(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    return _wrap_series__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_int(argv[2]);
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_series__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'series'");
    return NULL;
}


static PyObject *_wrap_match(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    lst *arg3 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:match",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=list2lst(obj2);
        if (!arg3) return NULL;
    }
    result = (bool)GiNaC::match((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,*arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_simplify_indexed__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    unsigned int arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:simplify_indexed",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::simplify_indexed((GiNaC::ex const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_simplify_indexed__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:simplify_indexed",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::simplify_indexed((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_simplify_indexed__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::scalar_products *arg2 = 0 ;
    unsigned int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:simplify_indexed",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::scalar_products");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::simplify_indexed((GiNaC::ex const &)*arg1,(GiNaC::scalar_products const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_simplify_indexed__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::scalar_products *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:simplify_indexed",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::scalar_products");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::simplify_indexed((GiNaC::ex const &)*arg1,(GiNaC::scalar_products const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_simplify_indexed(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_simplify_indexed__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__scalar_products, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_simplify_indexed__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_simplify_indexed__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__scalar_products, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_simplify_indexed__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'simplify_indexed'");
    return NULL;
}


static PyObject *_wrap_symmetrize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:symmetrize",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::symmetrize((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetrize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:symmetrize",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::symmetrize((GiNaC::ex const &)*arg1,(lst const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_antisymmetrize__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:antisymmetrize",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::antisymmetrize((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_antisymmetrize__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:antisymmetrize",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::antisymmetrize((GiNaC::ex const &)*arg1,(lst const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetrize_cyclic__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:symmetrize_cyclic",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::symmetrize_cyclic((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetrize_cyclic__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:symmetrize_cyclic",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::symmetrize_cyclic((GiNaC::ex const &)*arg1,(lst const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_op(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    size_t arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:op",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::op((GiNaC::ex const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lhs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lhs",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::lhs((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rhs(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:rhs",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::rhs((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_swap(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:swap",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    GiNaC::swap(*arg1,*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_subs__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    lst *arg3 = 0 ;
    unsigned int arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:subs",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=list2lst(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (unsigned int)(SWIG_As_unsigned_SS_int(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = GiNaC::subs((GiNaC::ex const &)*arg1,(lst const &)*arg2,(lst const &)*arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_subs__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    lst *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:subs",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=list2lst(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::subs((GiNaC::ex const &)*arg1,(lst const &)*arg2,(lst const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_subs__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:subs",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::subs((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_subs(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_subs__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyList_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_subs__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (PyList_Check(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_int(argv[3]);
                    if (_v) {
                        return _wrap_subs__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'subs'");
    return NULL;
}


static PyObject *_wrap_sqrt(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sqrt",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::sqrt((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_expand(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:expand",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::expand((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_conjugate_function_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::conjugate_function_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::conjugate_function_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_conjugate_function_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::conjugate_function_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_conjugate_function_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::conjugate_function_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_conjugate_function_SERIAL")) goto fail;
    result = (GiNaC::conjugate_function_SERIAL *)new GiNaC::conjugate_function_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__conjugate_function_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_conjugate_function_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::conjugate_function_SERIAL *arg1 = (GiNaC::conjugate_function_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_conjugate_function_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__conjugate_function_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * conjugate_function_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__conjugate_function_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_conjugate_function_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable conjugate_function_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_conjugate_function_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::conjugate_function_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_conjugate_function_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conjugate_function_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR conjugate_function<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conjugate_function_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conjugate_function_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR conjugate_function<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conjugate_function_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conjugate_function_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR conjugate_function<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_conjugate_function_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:conjugate_function_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR conjugate_function<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_abs_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::abs_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::abs_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_abs_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::abs_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_abs_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::abs_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_abs_SERIAL")) goto fail;
    result = (GiNaC::abs_SERIAL *)new GiNaC::abs_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__abs_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_abs_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::abs_SERIAL *arg1 = (GiNaC::abs_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_abs_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__abs_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * abs_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__abs_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_abs_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable abs_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_abs_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::abs_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_abs_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:abs_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR abs<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_abs_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:abs_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR abs<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_abs_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:abs_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR abs<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_abs_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:abs_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR abs<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_csgn_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::csgn_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::csgn_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_csgn_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::csgn_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_csgn_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::csgn_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_csgn_SERIAL")) goto fail;
    result = (GiNaC::csgn_SERIAL *)new GiNaC::csgn_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__csgn_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_csgn_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::csgn_SERIAL *arg1 = (GiNaC::csgn_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_csgn_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__csgn_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * csgn_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__csgn_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_csgn_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable csgn_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_csgn_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::csgn_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_csgn_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:csgn_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR csgn<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_csgn_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:csgn_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR csgn<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_csgn_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:csgn_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR csgn<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_csgn_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:csgn_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR csgn<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_eta_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::eta_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::eta_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_eta_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::eta_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_eta_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::eta_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_eta_SERIAL")) goto fail;
    result = (GiNaC::eta_SERIAL *)new GiNaC::eta_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__eta_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_eta_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::eta_SERIAL *arg1 = (GiNaC::eta_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_eta_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__eta_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * eta_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__eta_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_eta_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable eta_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_eta_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::eta_NPARAMS)); 
    }
    return pyobj;
}


static int _wrap_sin_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::sin_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::sin_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_sin_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::sin_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_sin_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::sin_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_sin_SERIAL")) goto fail;
    result = (GiNaC::sin_SERIAL *)new GiNaC::sin_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__sin_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_sin_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::sin_SERIAL *arg1 = (GiNaC::sin_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_sin_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__sin_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * sin_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__sin_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_sin_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable sin_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_sin_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::sin_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_sin_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sin_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR sin<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sin_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sin_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR sin<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sin_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sin_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR sin<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sin_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sin_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR sin<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_cos_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::cos_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::cos_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_cos_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::cos_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_cos_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::cos_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_cos_SERIAL")) goto fail;
    result = (GiNaC::cos_SERIAL *)new GiNaC::cos_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__cos_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_cos_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::cos_SERIAL *arg1 = (GiNaC::cos_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_cos_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__cos_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * cos_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__cos_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_cos_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable cos_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_cos_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::cos_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_cos_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cos_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR cos<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cos_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cos_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR cos<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cos_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cos_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR cos<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cos_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cos_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR cos<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_tan_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::tan_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::tan_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_tan_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::tan_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_tan_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tan_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_tan_SERIAL")) goto fail;
    result = (GiNaC::tan_SERIAL *)new GiNaC::tan_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__tan_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_tan_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tan_SERIAL *arg1 = (GiNaC::tan_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_tan_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tan_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * tan_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__tan_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_tan_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable tan_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_tan_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::tan_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_tan_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tan_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tan<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tan_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tan_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tan<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tan_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tan_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tan<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tan_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tan_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tan<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_exp_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::exp_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::exp_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_exp_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::exp_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_exp_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::exp_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_exp_SERIAL")) goto fail;
    result = (GiNaC::exp_SERIAL *)new GiNaC::exp_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__exp_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_exp_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::exp_SERIAL *arg1 = (GiNaC::exp_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_exp_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__exp_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * exp_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__exp_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_exp_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable exp_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_exp_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::exp_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_exp_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:exp_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR exp<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_exp_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:exp_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR exp<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_exp_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:exp_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR exp<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_exp_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:exp_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR exp<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_log_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::log_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::log_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_log_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::log_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_log_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::log_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_log_SERIAL")) goto fail;
    result = (GiNaC::log_SERIAL *)new GiNaC::log_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__log_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_log_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::log_SERIAL *arg1 = (GiNaC::log_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_log_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__log_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * log_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__log_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_log_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable log_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_log_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::log_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_log_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:log_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR log<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_log_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:log_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR log<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_log_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:log_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR log<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_log_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:log_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR log<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_asin_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::asin_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::asin_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_asin_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::asin_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_asin_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::asin_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_asin_SERIAL")) goto fail;
    result = (GiNaC::asin_SERIAL *)new GiNaC::asin_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__asin_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_asin_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::asin_SERIAL *arg1 = (GiNaC::asin_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_asin_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__asin_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * asin_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__asin_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_asin_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable asin_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_asin_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::asin_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_asin_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:asin_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR asin<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_asin_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:asin_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR asin<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_asin_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:asin_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR asin<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_asin_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:asin_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR asin<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_acos_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::acos_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::acos_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_acos_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::acos_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_acos_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::acos_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_acos_SERIAL")) goto fail;
    result = (GiNaC::acos_SERIAL *)new GiNaC::acos_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__acos_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_acos_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::acos_SERIAL *arg1 = (GiNaC::acos_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_acos_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__acos_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * acos_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__acos_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_acos_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable acos_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_acos_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::acos_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_acos_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:acos_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR acos<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_acos_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:acos_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR acos<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_acos_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:acos_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR acos<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_acos_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:acos_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR acos<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_atan_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::atan_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::atan_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_atan_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::atan_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_atan_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::atan_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_atan_SERIAL")) goto fail;
    result = (GiNaC::atan_SERIAL *)new GiNaC::atan_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__atan_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_atan_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::atan_SERIAL *arg1 = (GiNaC::atan_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_atan_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__atan_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * atan_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__atan_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_atan_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable atan_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_atan_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::atan_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_atan_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:atan_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR atan<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_atan_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:atan_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR atan<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_atan_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:atan_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR atan<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_atan_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:atan_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR atan<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_atan2_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::atan2_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::atan2_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_atan2_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::atan2_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_atan2_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::atan2_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_atan2_SERIAL")) goto fail;
    result = (GiNaC::atan2_SERIAL *)new GiNaC::atan2_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__atan2_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_atan2_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::atan2_SERIAL *arg1 = (GiNaC::atan2_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_atan2_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__atan2_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * atan2_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__atan2_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_atan2_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable atan2_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_atan2_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::atan2_NPARAMS)); 
    }
    return pyobj;
}


static int _wrap_sinh_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::sinh_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::sinh_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_sinh_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::sinh_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_sinh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::sinh_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_sinh_SERIAL")) goto fail;
    result = (GiNaC::sinh_SERIAL *)new GiNaC::sinh_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__sinh_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_sinh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::sinh_SERIAL *arg1 = (GiNaC::sinh_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_sinh_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__sinh_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * sinh_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__sinh_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_sinh_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable sinh_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_sinh_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::sinh_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_sinh_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sinh_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR sinh<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sinh_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sinh_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR sinh<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sinh_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sinh_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR sinh<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sinh_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:sinh_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR sinh<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_cosh_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::cosh_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::cosh_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_cosh_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::cosh_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_cosh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::cosh_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_cosh_SERIAL")) goto fail;
    result = (GiNaC::cosh_SERIAL *)new GiNaC::cosh_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__cosh_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_cosh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::cosh_SERIAL *arg1 = (GiNaC::cosh_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_cosh_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__cosh_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * cosh_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__cosh_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_cosh_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable cosh_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_cosh_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::cosh_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_cosh_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cosh_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR cosh<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cosh_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cosh_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR cosh<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cosh_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cosh_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR cosh<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_cosh_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:cosh_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR cosh<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_tanh_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::tanh_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::tanh_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_tanh_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::tanh_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_tanh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tanh_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_tanh_SERIAL")) goto fail;
    result = (GiNaC::tanh_SERIAL *)new GiNaC::tanh_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__tanh_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_tanh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tanh_SERIAL *arg1 = (GiNaC::tanh_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_tanh_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tanh_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * tanh_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__tanh_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_tanh_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable tanh_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_tanh_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::tanh_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_tanh_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tanh_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tanh<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tanh_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tanh_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tanh<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tanh_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tanh_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tanh<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tanh_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tanh_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tanh<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_asinh_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::asinh_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::asinh_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_asinh_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::asinh_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_asinh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::asinh_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_asinh_SERIAL")) goto fail;
    result = (GiNaC::asinh_SERIAL *)new GiNaC::asinh_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__asinh_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_asinh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::asinh_SERIAL *arg1 = (GiNaC::asinh_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_asinh_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__asinh_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * asinh_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__asinh_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_asinh_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable asinh_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_asinh_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::asinh_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_asinh_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:asinh_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR asinh<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_asinh_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:asinh_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR asinh<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_asinh_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:asinh_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR asinh<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_asinh_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:asinh_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR asinh<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_acosh_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::acosh_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::acosh_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_acosh_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::acosh_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_acosh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::acosh_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_acosh_SERIAL")) goto fail;
    result = (GiNaC::acosh_SERIAL *)new GiNaC::acosh_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__acosh_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_acosh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::acosh_SERIAL *arg1 = (GiNaC::acosh_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_acosh_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__acosh_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * acosh_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__acosh_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_acosh_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable acosh_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_acosh_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::acosh_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_acosh_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:acosh_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR acosh<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_acosh_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:acosh_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR acosh<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_acosh_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:acosh_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR acosh<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_acosh_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:acosh_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR acosh<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_atanh_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::atanh_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::atanh_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_atanh_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::atanh_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_atanh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::atanh_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_atanh_SERIAL")) goto fail;
    result = (GiNaC::atanh_SERIAL *)new GiNaC::atanh_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__atanh_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_atanh_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::atanh_SERIAL *arg1 = (GiNaC::atanh_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_atanh_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__atanh_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * atanh_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__atanh_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_atanh_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable atanh_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_atanh_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::atanh_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_atanh_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:atanh_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR atanh<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_atanh_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:atanh_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR atanh<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_atanh_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:atanh_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR atanh<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_atanh_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:atanh_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR atanh<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_Li2_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::Li2_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::Li2_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_Li2_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::Li2_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_Li2_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::Li2_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Li2_SERIAL")) goto fail;
    result = (GiNaC::Li2_SERIAL *)new GiNaC::Li2_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__Li2_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Li2_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::Li2_SERIAL *arg1 = (GiNaC::Li2_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Li2_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__Li2_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Li2_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__Li2_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_Li2_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Li2_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_Li2_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::Li2_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_Li2_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Li2_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Li2<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Li2_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Li2_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Li2<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Li2_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Li2_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Li2<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Li2_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Li2_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Li2<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_Li3_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::Li3_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::Li3_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_Li3_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::Li3_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_Li3_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::Li3_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Li3_SERIAL")) goto fail;
    result = (GiNaC::Li3_SERIAL *)new GiNaC::Li3_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__Li3_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Li3_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::Li3_SERIAL *arg1 = (GiNaC::Li3_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Li3_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__Li3_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Li3_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__Li3_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_Li3_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Li3_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_Li3_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::Li3_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_Li3_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Li3_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Li3<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Li3_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Li3_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Li3<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Li3_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Li3_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Li3<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Li3_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Li3_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Li3<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_zetaderiv_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::zetaderiv_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::zetaderiv_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_zetaderiv_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::zetaderiv_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_zetaderiv_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::zetaderiv_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_zetaderiv_SERIAL")) goto fail;
    result = (GiNaC::zetaderiv_SERIAL *)new GiNaC::zetaderiv_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__zetaderiv_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_zetaderiv_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::zetaderiv_SERIAL *arg1 = (GiNaC::zetaderiv_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_zetaderiv_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__zetaderiv_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * zetaderiv_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__zetaderiv_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_zetaderiv_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable zetaderiv_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_zetaderiv_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::zetaderiv_NPARAMS)); 
    }
    return pyobj;
}


static int _wrap_Li_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::Li_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::Li_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_Li_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::Li_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_Li_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::Li_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Li_SERIAL")) goto fail;
    result = (GiNaC::Li_SERIAL *)new GiNaC::Li_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__Li_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Li_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::Li_SERIAL *arg1 = (GiNaC::Li_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Li_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__Li_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Li_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__Li_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_Li_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Li_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_Li_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::Li_NPARAMS)); 
    }
    return pyobj;
}


static int _wrap_S_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::S_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::S_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_S_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::S_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_S_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::S_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_S_SERIAL")) goto fail;
    result = (GiNaC::S_SERIAL *)new GiNaC::S_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__S_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_S_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::S_SERIAL *arg1 = (GiNaC::S_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_S_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__S_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * S_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__S_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_S_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable S_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_S_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::S_NPARAMS)); 
    }
    return pyobj;
}


static int _wrap_H_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::H_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::H_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_H_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::H_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_H_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::H_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_H_SERIAL")) goto fail;
    result = (GiNaC::H_SERIAL *)new GiNaC::H_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__H_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_H_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::H_SERIAL *arg1 = (GiNaC::H_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_H_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__H_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * H_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__H_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_H_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable H_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_H_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::H_NPARAMS)); 
    }
    return pyobj;
}


static int _wrap_lgamma_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::lgamma_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::lgamma_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_lgamma_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::lgamma_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_lgamma_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::lgamma_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_lgamma_SERIAL")) goto fail;
    result = (GiNaC::lgamma_SERIAL *)new GiNaC::lgamma_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__lgamma_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_lgamma_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::lgamma_SERIAL *arg1 = (GiNaC::lgamma_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_lgamma_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__lgamma_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * lgamma_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__lgamma_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_lgamma_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable lgamma_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_lgamma_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::lgamma_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_lgamma_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lgamma_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR lgamma<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lgamma_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lgamma_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR lgamma<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lgamma_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lgamma_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR lgamma<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lgamma_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:lgamma_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR lgamma<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_tgamma_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::tgamma_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::tgamma_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_tgamma_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::tgamma_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_tgamma_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tgamma_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_tgamma_SERIAL")) goto fail;
    result = (GiNaC::tgamma_SERIAL *)new GiNaC::tgamma_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__tgamma_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_tgamma_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tgamma_SERIAL *arg1 = (GiNaC::tgamma_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_tgamma_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tgamma_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * tgamma_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__tgamma_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_tgamma_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable tgamma_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_tgamma_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::tgamma_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_tgamma_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tgamma_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tgamma<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tgamma_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tgamma_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tgamma<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tgamma_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tgamma_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tgamma<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tgamma_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:tgamma_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR tgamma<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_beta_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::beta_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::beta_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_beta_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::beta_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_beta_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::beta_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_beta_SERIAL")) goto fail;
    result = (GiNaC::beta_SERIAL *)new GiNaC::beta_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__beta_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_beta_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::beta_SERIAL *arg1 = (GiNaC::beta_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_beta_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__beta_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * beta_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__beta_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_beta_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable beta_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_beta_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::beta_NPARAMS)); 
    }
    return pyobj;
}


static int _wrap_factorial_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::factorial_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::factorial_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_factorial_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::factorial_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_factorial_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::factorial_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_factorial_SERIAL")) goto fail;
    result = (GiNaC::factorial_SERIAL *)new GiNaC::factorial_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__factorial_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_factorial_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::factorial_SERIAL *arg1 = (GiNaC::factorial_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_factorial_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__factorial_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * factorial_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__factorial_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_factorial_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable factorial_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_factorial_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::factorial_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_factorial_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:factorial_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR factorial<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_factorial_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:factorial_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR factorial<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_factorial_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:factorial_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR factorial<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_factorial_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:factorial_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR factorial<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static int _wrap_binomial_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::binomial_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::binomial_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_binomial_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::binomial_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_binomial_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::binomial_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_binomial_SERIAL")) goto fail;
    result = (GiNaC::binomial_SERIAL *)new GiNaC::binomial_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__binomial_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_binomial_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::binomial_SERIAL *arg1 = (GiNaC::binomial_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_binomial_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__binomial_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * binomial_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__binomial_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_binomial_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable binomial_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_binomial_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::binomial_NPARAMS)); 
    }
    return pyobj;
}


static int _wrap_Order_SERIAL_serial_set(PyObject *_val) {
    {
        unsigned int temp = (unsigned int)(SWIG_As_unsigned_SS_int(_val));
        if (PyErr_Occurred()) {
            SWIG_append_errmsg("C/C++ variable 'GiNaC::Order_SERIAL::serial (unsigned int)'");
            return 1;
        }
        GiNaC::Order_SERIAL::serial = temp;
    }
    return 0;
}


static PyObject *_wrap_Order_SERIAL_serial_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::Order_SERIAL::serial)); 
    }
    return pyobj;
}


static PyObject *_wrap_new_Order_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::Order_SERIAL *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_Order_SERIAL")) goto fail;
    result = (GiNaC::Order_SERIAL *)new GiNaC::Order_SERIAL();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__Order_SERIAL, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_Order_SERIAL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::Order_SERIAL *arg1 = (GiNaC::Order_SERIAL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_Order_SERIAL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__Order_SERIAL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * Order_SERIAL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__Order_SERIAL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static int _wrap_Order_NPARAMS_set(PyObject *) {
    PyErr_SetString(PyExc_TypeError,"Variable Order_NPARAMS is read-only.");
    return 1;
}


static PyObject *_wrap_Order_NPARAMS_get(void) {
    PyObject *pyobj = NULL;
    
    {
        pyobj = SWIG_From_unsigned_SS_int((unsigned int)(GiNaC::Order_NPARAMS)); 
    }
    return pyobj;
}


static PyObject *_wrap_Order_ex(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Order_ex",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Order<GiNaC::ex >((GiNaC::ex const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Order_basic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::basic *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Order_basic",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Order<GiNaC::basic >((GiNaC::basic const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Order_int(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    int *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    int temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Order_int",&obj0)) goto fail;
    {
        temp1 = (int)(SWIG_As_int(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Order<int >((int const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_Order_double(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    double *arg1 = 0 ;
    SwigValueWrapper<GiNaC::function > result;
    double temp1 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:Order_double",&obj0)) goto fail;
    {
        temp1 = (double)(SWIG_As_double(obj0));
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = &temp1;
    }
    result = GiNaC::SWIGTEMPLATEDISAMBIGUATOR Order<double >((double const &)*arg1);
    
    {
        GiNaC::function * resultptr;
        resultptr = new GiNaC::function((GiNaC::function const &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__function, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lsolve__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    unsigned int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:lsolve",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (unsigned int)(SWIG_As_unsigned_SS_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::lsolve((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lsolve__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lsolve",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::lsolve((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lsolve(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_lsolve__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_int(argv[2]);
                if (_v) {
                    return _wrap_lsolve__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'lsolve'");
    return NULL;
}


static PyObject *_wrap_tensor_replace_contr_index(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensor *arg1 = (GiNaC::tensor *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:tensor_replace_contr_index",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    result = (bool)((GiNaC::tensor const *)arg1)->replace_contr_index(arg2,arg3);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_tensor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensor *arg1 = (GiNaC::tensor *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_tensor",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensor, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * tensor_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__tensor, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_tensdelta_eval_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensdelta *arg1 = (GiNaC::tensdelta *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tensdelta_eval_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensdelta, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::tensdelta const *)arg1)->eval_indexed((GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tensdelta_contract_with(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensdelta *arg1 = (GiNaC::tensdelta *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    exvector *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:tensdelta_contract_with",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensdelta, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((GiNaC::tensdelta const *)arg1)->contract_with(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_tensdelta(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensdelta *arg1 = (GiNaC::tensdelta *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_tensdelta",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensdelta, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * tensdelta_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__tensdelta, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_tensmetric_eval_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensmetric *arg1 = (GiNaC::tensmetric *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tensmetric_eval_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensmetric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::tensmetric const *)arg1)->eval_indexed((GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tensmetric_contract_with(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensmetric *arg1 = (GiNaC::tensmetric *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    exvector *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:tensmetric_contract_with",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensmetric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((GiNaC::tensmetric const *)arg1)->contract_with(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_tensmetric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensmetric *arg1 = (GiNaC::tensmetric *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_tensmetric",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensmetric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * tensmetric_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__tensmetric, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_minkmetric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    GiNaC::minkmetric *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_minkmetric",&obj0)) goto fail;
    {
        arg1 = (bool)(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::minkmetric *)new GiNaC::minkmetric(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__minkmetric, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_minkmetric_eval_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::minkmetric *arg1 = (GiNaC::minkmetric *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:minkmetric_eval_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__minkmetric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::minkmetric const *)arg1)->eval_indexed((GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_minkmetric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::minkmetric *arg1 = (GiNaC::minkmetric *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_minkmetric",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__minkmetric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * minkmetric_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__minkmetric, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_spinmetric_eval_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinmetric *arg1 = (GiNaC::spinmetric *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:spinmetric_eval_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinmetric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::spinmetric const *)arg1)->eval_indexed((GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_spinmetric_contract_with(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinmetric *arg1 = (GiNaC::spinmetric *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    exvector *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:spinmetric_contract_with",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinmetric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((GiNaC::spinmetric const *)arg1)->contract_with(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_spinmetric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinmetric *arg1 = (GiNaC::spinmetric *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_spinmetric",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinmetric, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * spinmetric_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__spinmetric, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_tensepsilon(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    bool arg1 ;
    bool arg2 ;
    GiNaC::tensepsilon *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_tensepsilon",&obj0,&obj1)) goto fail;
    {
        arg1 = (bool)(SWIG_As_bool(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::tensepsilon *)new GiNaC::tensepsilon(arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__tensepsilon, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tensepsilon_eval_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensepsilon *arg1 = (GiNaC::tensepsilon *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:tensepsilon_eval_indexed",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensepsilon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::tensepsilon const *)arg1)->eval_indexed((GiNaC::basic const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_tensepsilon_contract_with(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensepsilon *arg1 = (GiNaC::tensepsilon *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    exvector *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:tensepsilon_contract_with",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensepsilon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((GiNaC::tensepsilon const *)arg1)->contract_with(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_tensepsilon(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::tensepsilon *arg1 = (GiNaC::tensepsilon *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_tensepsilon",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__tensepsilon, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * tensepsilon_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__tensepsilon, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delta_tensor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:delta_tensor",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::delta_tensor((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_metric_tensor(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:metric_tensor",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::metric_tensor((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lorentz_g__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:lorentz_g",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::lorentz_g((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lorentz_g__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lorentz_g",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::lorentz_g((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lorentz_g(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_lorentz_g__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_lorentz_g__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'lorentz_g'");
    return NULL;
}


static PyObject *_wrap_spinor_metric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:spinor_metric",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::spinor_metric((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_epsilon_tensor__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:epsilon_tensor",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::epsilon_tensor((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_epsilon_tensor__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:epsilon_tensor",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::epsilon_tensor((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_epsilon_tensor(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_epsilon_tensor__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_epsilon_tensor__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'epsilon_tensor'");
    return NULL;
}


static PyObject *_wrap_lorentz_eps__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    bool arg5 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:lorentz_eps",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = (bool)(SWIG_As_bool(obj4)); 
        if (SWIG_arg_fail(5)) SWIG_fail;
    }
    result = GiNaC::lorentz_eps((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,arg5);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lorentz_eps__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:lorentz_eps",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = GiNaC::lorentz_eps((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lorentz_eps(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_lorentz_eps__SWIG_1(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        _v = SWIG_Check_bool(argv[4]);
                        if (_v) {
                            return _wrap_lorentz_eps__SWIG_0(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'lorentz_eps'");
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_indexed",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_indexed",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_indexed",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_indexed",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_indexed",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_indexed",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_6(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:new_indexed",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_7(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::ex *arg6 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:new_indexed",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    {
        arg6 = type2ex(obj5);
        if (!arg6) return NULL;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5,(GiNaC::ex const &)*arg6);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_8(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    exvector *arg2 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_indexed",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(exvector const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_9(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    exvector *arg3 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_indexed",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::ex const &)*arg1,(GiNaC::symmetry const &)*arg2,(exvector const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_10(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    exprseq *arg2 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_indexed",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exprseq, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exprseq");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::symmetry const &)*arg1,(exprseq const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_11(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    exvector *arg2 = 0 ;
    bool arg3 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_indexed",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::symmetry const &)*arg1,(exvector const &)*arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed__SWIG_12(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    exvector *arg2 = 0 ;
    GiNaC::indexed *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_indexed",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::indexed *)new GiNaC::indexed((GiNaC::symmetry const &)*arg1,(exvector const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__indexed, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_indexed(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[7];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 6); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_indexed__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exprseq, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_indexed__SWIG_10(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_indexed__SWIG_12(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_new_indexed__SWIG_8(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_indexed__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_indexed__SWIG_11(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_new_indexed__SWIG_9(self,args);
                }
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_indexed__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_indexed__SWIG_5(self,args);
                    }
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_new_indexed__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_new_indexed__SWIG_6(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_new_indexed__SWIG_4(self,args);
                        }
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (checktype2ex(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_new_indexed__SWIG_7(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_indexed'");
    return NULL;
}


static PyObject *_wrap_indexed_get_free_indices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::indexed *arg1 = (GiNaC::indexed *) 0 ;
    exvector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:indexed_get_free_indices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::indexed const *)arg1)->get_free_indices();
    
    {
        resultobj = exvector2list(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_indexed_all_index_values_are(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::indexed *arg1 = (GiNaC::indexed *) 0 ;
    unsigned int arg2 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:indexed_all_index_values_are",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::indexed const *)arg1)->all_index_values_are(arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_indexed_get_indices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::indexed *arg1 = (GiNaC::indexed *) 0 ;
    exvector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:indexed_get_indices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::indexed const *)arg1)->get_indices();
    
    {
        resultobj = exvector2list(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_indexed_get_dummy_indices__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::indexed *arg1 = (GiNaC::indexed *) 0 ;
    exvector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:indexed_get_dummy_indices",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::indexed const *)arg1)->get_dummy_indices();
    
    {
        resultobj = exvector2list(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_indexed_get_dummy_indices__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::indexed *arg1 = (GiNaC::indexed *) 0 ;
    GiNaC::indexed *arg2 = 0 ;
    exvector result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:indexed_get_dummy_indices",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::indexed");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::indexed const *)arg1)->get_dummy_indices((GiNaC::indexed const &)*arg2);
    
    {
        resultobj = exvector2list(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_indexed_get_dummy_indices(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__indexed, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_indexed_get_dummy_indices__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__indexed, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__indexed, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_indexed_get_dummy_indices__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'indexed_get_dummy_indices'");
    return NULL;
}


static PyObject *_wrap_indexed_has_dummy_index_for(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::indexed *arg1 = (GiNaC::indexed *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:indexed_has_dummy_index_for",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (bool)((GiNaC::indexed const *)arg1)->has_dummy_index_for((GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_indexed_get_symmetry(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::indexed *arg1 = (GiNaC::indexed *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:indexed_get_symmetry",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::indexed const *)arg1)->get_symmetry();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_indexed(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::indexed *arg1 = (GiNaC::indexed *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_indexed",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__indexed, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * indexed_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__indexed, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_spmapkey__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spmapkey *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_spmapkey")) goto fail;
    result = (GiNaC::spmapkey *)new GiNaC::spmapkey();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__spmapkey, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_spmapkey__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::spmapkey *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_spmapkey",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = (GiNaC::spmapkey *)new GiNaC::spmapkey((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__spmapkey, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_spmapkey__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::spmapkey *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_spmapkey",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::spmapkey *)new GiNaC::spmapkey((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__spmapkey, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_spmapkey(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_new_spmapkey__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_spmapkey__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_spmapkey__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_spmapkey'");
    return NULL;
}


static PyObject *_wrap_spmapkey___eq__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spmapkey *arg1 = (GiNaC::spmapkey *) 0 ;
    GiNaC::spmapkey *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:spmapkey___eq__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spmapkey, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__spmapkey, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::spmapkey");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::spmapkey const *)arg1)->operator ==((GiNaC::spmapkey const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_spmapkey___lt__(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spmapkey *arg1 = (GiNaC::spmapkey *) 0 ;
    GiNaC::spmapkey *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:spmapkey___lt__",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spmapkey, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__spmapkey, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::spmapkey");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::spmapkey const *)arg1)->operator <((GiNaC::spmapkey const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_spmapkey_debugprint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spmapkey *arg1 = (GiNaC::spmapkey *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:spmapkey_debugprint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spmapkey, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((GiNaC::spmapkey const *)arg1)->debugprint();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_spmapkey(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spmapkey *arg1 = (GiNaC::spmapkey *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_spmapkey",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spmapkey, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * spmapkey_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__spmapkey, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_scalar_products_add__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scalar_products_add",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    (arg1)->add((GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scalar_products_add__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOO:scalar_products_add",&obj0,&obj1,&obj2,&obj3,&obj4)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    (arg1)->add((GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scalar_products_add(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[6];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 5); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__scalar_products, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_scalar_products_add__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    if (argc == 5) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__scalar_products, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            return _wrap_scalar_products_add__SWIG_1(self,args);
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'scalar_products_add'");
    return NULL;
}


static PyObject *_wrap_scalar_products_add_vectors__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:scalar_products_add_vectors",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    (arg1)->add_vectors((lst const &)*arg2,(GiNaC::ex const &)*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scalar_products_add_vectors__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    lst *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:scalar_products_add_vectors",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    (arg1)->add_vectors((lst const &)*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scalar_products_add_vectors(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__scalar_products, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_scalar_products_add_vectors__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__scalar_products, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_scalar_products_add_vectors__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'scalar_products_add_vectors'");
    return NULL;
}


static PyObject *_wrap_scalar_products_clear(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scalar_products_clear",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    (arg1)->clear();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scalar_products_is_defined(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scalar_products_is_defined",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = (bool)((GiNaC::scalar_products const *)arg1)->is_defined((GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scalar_products_evaluate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:scalar_products_evaluate",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    result = ((GiNaC::scalar_products const *)arg1)->evaluate((GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_scalar_products_debugprint(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:scalar_products_debugprint",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    ((GiNaC::scalar_products const *)arg1)->debugprint();
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_scalar_products(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_scalar_products")) goto fail;
    result = (GiNaC::scalar_products *)new GiNaC::scalar_products();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__scalar_products, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_scalar_products(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::scalar_products *arg1 = (GiNaC::scalar_products *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_scalar_products",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__scalar_products, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * scalar_products_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__scalar_products, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_get_all_dummy_indices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    exvector result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:get_all_dummy_indices",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::get_all_dummy_indices((GiNaC::ex const &)*arg1);
    
    {
        resultobj = exvector2list(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_rename_dummy_indices_uniquely(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:rename_dummy_indices_uniquely",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::rename_dummy_indices_uniquely((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_expand_dummy_sum__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    bool arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:expand_dummy_sum",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::expand_dummy_sum((GiNaC::ex const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_expand_dummy_sum__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:expand_dummy_sum",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::expand_dummy_sum((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_expand_dummy_sum(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_expand_dummy_sum__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_expand_dummy_sum__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'expand_dummy_sum'");
    return NULL;
}


static PyObject *_wrap_new_idx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::idx *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_idx",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::idx *)new GiNaC::idx((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__idx, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_is_dummy_pair_same_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:idx_is_dummy_pair_same_type",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::idx const *)arg1)->is_dummy_pair_same_type((GiNaC::basic const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_get_value(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:idx_get_value",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::idx const *)arg1)->get_value();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_is_numeric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:idx_is_numeric",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::idx const *)arg1)->is_numeric();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_is_symbolic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:idx_is_symbolic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::idx const *)arg1)->is_symbolic();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_get_dim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:idx_get_dim",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::idx const *)arg1)->get_dim();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_is_dim_numeric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:idx_is_dim_numeric",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::idx const *)arg1)->is_dim_numeric();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_is_dim_symbolic(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:idx_is_dim_symbolic",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::idx const *)arg1)->is_dim_symbolic();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_replace_dim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:idx_replace_dim",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = ((GiNaC::idx const *)arg1)->replace_dim((GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_idx_minimal_dim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    GiNaC::idx *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:idx_minimal_dim",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::idx");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::idx const *)arg1)->minimal_dim((GiNaC::idx const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_idx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = (GiNaC::idx *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_idx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * idx_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__idx, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_varidx__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool arg3 ;
    GiNaC::varidx *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_varidx",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (GiNaC::varidx *)new GiNaC::varidx((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__varidx, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_varidx__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::varidx *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_varidx",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::varidx *)new GiNaC::varidx((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__varidx, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_varidx(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_varidx__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_varidx__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_varidx'");
    return NULL;
}


static PyObject *_wrap_varidx_is_dummy_pair_same_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::varidx *arg1 = (GiNaC::varidx *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:varidx_is_dummy_pair_same_type",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__varidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::varidx const *)arg1)->is_dummy_pair_same_type((GiNaC::basic const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_varidx_is_covariant(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::varidx *arg1 = (GiNaC::varidx *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:varidx_is_covariant",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__varidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::varidx const *)arg1)->is_covariant();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_varidx_is_contravariant(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::varidx *arg1 = (GiNaC::varidx *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:varidx_is_contravariant",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__varidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::varidx const *)arg1)->is_contravariant();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_varidx_toggle_variance(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::varidx *arg1 = (GiNaC::varidx *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:varidx_toggle_variance",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__varidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::varidx const *)arg1)->toggle_variance();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_varidx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::varidx *arg1 = (GiNaC::varidx *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_varidx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__varidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * varidx_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__varidx, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_spinidx__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool arg3 ;
    bool arg4 ;
    GiNaC::spinidx *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_spinidx",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        arg4 = (bool)(SWIG_As_bool(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (GiNaC::spinidx *)new GiNaC::spinidx((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__spinidx, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_spinidx__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool arg3 ;
    GiNaC::spinidx *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_spinidx",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (GiNaC::spinidx *)new GiNaC::spinidx((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__spinidx, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_spinidx__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::spinidx *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_spinidx",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (GiNaC::spinidx *)new GiNaC::spinidx((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__spinidx, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_spinidx__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::spinidx *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_spinidx",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = (GiNaC::spinidx *)new GiNaC::spinidx((GiNaC::ex const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__spinidx, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_spinidx(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_spinidx__SWIG_3(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_new_spinidx__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_new_spinidx__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    _v = SWIG_Check_bool(argv[3]);
                    if (_v) {
                        return _wrap_new_spinidx__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_spinidx'");
    return NULL;
}


static PyObject *_wrap_spinidx_is_dummy_pair_same_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinidx *arg1 = (GiNaC::spinidx *) 0 ;
    GiNaC::basic *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:spinidx_is_dummy_pair_same_type",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__basic, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::basic");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::spinidx const *)arg1)->is_dummy_pair_same_type((GiNaC::basic const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_spinidx_is_dotted(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinidx *arg1 = (GiNaC::spinidx *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:spinidx_is_dotted",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::spinidx const *)arg1)->is_dotted();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_spinidx_is_undotted(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinidx *arg1 = (GiNaC::spinidx *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:spinidx_is_undotted",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::spinidx const *)arg1)->is_undotted();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_spinidx_toggle_dot(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinidx *arg1 = (GiNaC::spinidx *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:spinidx_toggle_dot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::spinidx const *)arg1)->toggle_dot();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_spinidx_toggle_variance_dot(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinidx *arg1 = (GiNaC::spinidx *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:spinidx_toggle_variance_dot",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::spinidx const *)arg1)->toggle_variance_dot();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_spinidx(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::spinidx *arg1 = (GiNaC::spinidx *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_spinidx",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__spinidx, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * spinidx_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__spinidx, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_is_dummy_pair__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::idx *arg1 = 0 ;
    GiNaC::idx *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:is_dummy_pair",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::idx");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__idx, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::idx");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)GiNaC::is_dummy_pair((GiNaC::idx const &)*arg1,(GiNaC::idx const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_dummy_pair__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:is_dummy_pair",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (bool)GiNaC::is_dummy_pair((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_dummy_pair(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__idx, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__idx, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_is_dummy_pair__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_is_dummy_pair__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'is_dummy_pair'");
    return NULL;
}


static PyObject *_wrap_find_free_and_dummy__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector::const_iterator arg1 ;
    exvector::const_iterator arg2 ;
    exvector *arg3 = 0 ;
    exvector *arg4 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:find_free_and_dummy",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        exvector::const_iterator * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_exvector__const_iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::const_iterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        exvector::const_iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__const_iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::const_iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    GiNaC::find_free_and_dummy(arg1,arg2,*arg3,*arg4);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_find_free_and_dummy__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector *arg1 = 0 ;
    exvector *arg2 = 0 ;
    exvector *arg3 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:find_free_and_dummy",&obj0,&obj1,&obj2)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    GiNaC::find_free_and_dummy((exvector const &)*arg1,*arg2,*arg3);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_find_free_and_dummy(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_find_free_and_dummy__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            void *ptr = 0;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_exvector__const_iterator, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = (ptr != 0);
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector__const_iterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    {
                        void *ptr = 0;
                        if (SWIG_ConvertPtr(argv[3], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                            _v = 0;
                            PyErr_Clear();
                        } else {
                            _v = (ptr != 0);
                        }
                    }
                    if (_v) {
                        return _wrap_find_free_and_dummy__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'find_free_and_dummy'");
    return NULL;
}


static PyObject *_wrap_find_dummy_indices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector *arg1 = 0 ;
    exvector *arg2 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:find_dummy_indices",&obj0,&obj1)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    GiNaC::find_dummy_indices((exvector const &)*arg1,*arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_count_dummy_indices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector *arg1 = 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:count_dummy_indices",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::count_dummy_indices((exvector const &)*arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_count_free_indices(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector *arg1 = 0 ;
    size_t result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:count_free_indices",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::count_free_indices((exvector const &)*arg1);
    
    {
        resultobj = SWIG_From_unsigned_SS_long((unsigned long)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_minimal_dim(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:minimal_dim",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::minimal_dim((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_symmetry__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::symmetry *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_symmetry",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::symmetry *)new GiNaC::symmetry(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_symmetry__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry::symmetry_type arg1 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    GiNaC::symmetry *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_symmetry",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = (GiNaC::symmetry::symmetry_type)(SWIG_As_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        SWIG_Python_ConvertPtr(obj2, (void **)&arg3, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (arg3 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = (GiNaC::symmetry *)new GiNaC::symmetry(arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_symmetry(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_new_symmetry__SWIG_0(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        _v = SWIG_Check_int(argv[0]);
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_new_symmetry__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_symmetry'");
    return NULL;
}


static PyObject *_wrap_symmetry_get_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = (GiNaC::symmetry *) 0 ;
    GiNaC::symmetry::symmetry_type result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:symmetry_get_type",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (GiNaC::symmetry::symmetry_type)((GiNaC::symmetry const *)arg1)->get_type();
    
    resultobj = SWIG_From_int((result));
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetry_set_type(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = (GiNaC::symmetry *) 0 ;
    GiNaC::symmetry::symmetry_type arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:symmetry_set_type",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (GiNaC::symmetry::symmetry_type)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->set_type(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetry_add__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = (GiNaC::symmetry *) 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:symmetry_add",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        GiNaC::symmetry &_result_ref = (arg1)->add((GiNaC::symmetry const &)*arg2);
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetry_add__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = (GiNaC::symmetry *) 0 ;
    unsigned int *arg2 = 0 ;
    GiNaC::symmetry *result;
    unsigned int temp2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:symmetry_add",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        temp2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1));
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = &temp2;
    }
    {
        GiNaC::symmetry &_result_ref = (arg1)->add((unsigned int const &)*arg2);
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetry_add(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_symmetry_add__SWIG_0(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__symmetry, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_int(argv[1]);
            if (_v) {
                return _wrap_symmetry_add__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'symmetry_add'");
    return NULL;
}


static PyObject *_wrap_symmetry_validate(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = (GiNaC::symmetry *) 0 ;
    unsigned int arg2 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:symmetry_validate",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (unsigned int)(SWIG_As_unsigned_SS_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    (arg1)->validate(arg2);
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetry_has_symmetry(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = (GiNaC::symmetry *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:symmetry_has_symmetry",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::symmetry const *)arg1)->has_symmetry();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_symmetry(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = (GiNaC::symmetry *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_symmetry",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * symmetry_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__symmetry, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_sy_none__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SwigValueWrapper<GiNaC::symmetry > result;
    
    if(!PyArg_ParseTuple(args,(char *)":sy_none")) goto fail;
    result = GiNaC::sy_none();
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_none__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sy_none",&obj0,&obj1)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::sy_none((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_none__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:sy_none",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=type2symmetry(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::sy_none((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_none__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    GiNaC::symmetry *arg4 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:sy_none",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=type2symmetry(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4=type2symmetry(obj3);
        if (!arg4) return NULL;
    }
    result = GiNaC::sy_none((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3,(GiNaC::symmetry const &)*arg4);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_none(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_sy_none__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_sy_none__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2symmetry(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_sy_none__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2symmetry(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2symmetry(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_sy_none__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'sy_none'");
    return NULL;
}


static PyObject *_wrap_sy_symm__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SwigValueWrapper<GiNaC::symmetry > result;
    
    if(!PyArg_ParseTuple(args,(char *)":sy_symm")) goto fail;
    result = GiNaC::sy_symm();
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_symm__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sy_symm",&obj0,&obj1)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::sy_symm((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_symm__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:sy_symm",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=type2symmetry(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::sy_symm((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_symm__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    GiNaC::symmetry *arg4 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:sy_symm",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=type2symmetry(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4=type2symmetry(obj3);
        if (!arg4) return NULL;
    }
    result = GiNaC::sy_symm((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3,(GiNaC::symmetry const &)*arg4);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_symm(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_sy_symm__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_sy_symm__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2symmetry(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_sy_symm__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2symmetry(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2symmetry(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_sy_symm__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'sy_symm'");
    return NULL;
}


static PyObject *_wrap_sy_anti__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SwigValueWrapper<GiNaC::symmetry > result;
    
    if(!PyArg_ParseTuple(args,(char *)":sy_anti")) goto fail;
    result = GiNaC::sy_anti();
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_anti__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sy_anti",&obj0,&obj1)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::sy_anti((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_anti__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:sy_anti",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=type2symmetry(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::sy_anti((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_anti__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    GiNaC::symmetry *arg4 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:sy_anti",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=type2symmetry(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4=type2symmetry(obj3);
        if (!arg4) return NULL;
    }
    result = GiNaC::sy_anti((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3,(GiNaC::symmetry const &)*arg4);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_anti(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_sy_anti__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_sy_anti__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2symmetry(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_sy_anti__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2symmetry(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2symmetry(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_sy_anti__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'sy_anti'");
    return NULL;
}


static PyObject *_wrap_sy_cycl__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    SwigValueWrapper<GiNaC::symmetry > result;
    
    if(!PyArg_ParseTuple(args,(char *)":sy_cycl")) goto fail;
    result = GiNaC::sy_cycl();
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_cycl__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:sy_cycl",&obj0,&obj1)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::sy_cycl((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_cycl__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:sy_cycl",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=type2symmetry(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::sy_cycl((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_cycl__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *arg1 = 0 ;
    GiNaC::symmetry *arg2 = 0 ;
    GiNaC::symmetry *arg3 = 0 ;
    GiNaC::symmetry *arg4 = 0 ;
    SwigValueWrapper<GiNaC::symmetry > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:sy_cycl",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1=type2symmetry(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=type2symmetry(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3=type2symmetry(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4=type2symmetry(obj3);
        if (!arg4) return NULL;
    }
    result = GiNaC::sy_cycl((GiNaC::symmetry const &)*arg1,(GiNaC::symmetry const &)*arg2,(GiNaC::symmetry const &)*arg3,(GiNaC::symmetry const &)*arg4);
    
    {
        GiNaC::symmetry * resultptr;
        resultptr = new GiNaC::symmetry((GiNaC::symmetry &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__symmetry, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_sy_cycl(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_sy_cycl__SWIG_0(self,args);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_sy_cycl__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2symmetry(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_sy_cycl__SWIG_2(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2symmetry(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2symmetry(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2symmetry(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2symmetry(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        return _wrap_sy_cycl__SWIG_3(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'sy_cycl'");
    return NULL;
}


static PyObject *_wrap_not_symmetric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":not_symmetric")) goto fail;
    {
        GiNaC::symmetry const &_result_ref = GiNaC::not_symmetric();
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetric2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":symmetric2")) goto fail;
    {
        GiNaC::symmetry const &_result_ref = GiNaC::symmetric2();
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetric3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":symmetric3")) goto fail;
    {
        GiNaC::symmetry const &_result_ref = GiNaC::symmetric3();
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetric4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":symmetric4")) goto fail;
    {
        GiNaC::symmetry const &_result_ref = GiNaC::symmetric4();
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_antisymmetric2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":antisymmetric2")) goto fail;
    {
        GiNaC::symmetry const &_result_ref = GiNaC::antisymmetric2();
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_antisymmetric3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":antisymmetric3")) goto fail;
    {
        GiNaC::symmetry const &_result_ref = GiNaC::antisymmetric3();
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_antisymmetric4(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::symmetry *result;
    
    if(!PyArg_ParseTuple(args,(char *)":antisymmetric4")) goto fail;
    {
        GiNaC::symmetry const &_result_ref = GiNaC::antisymmetric4();
        result = (GiNaC::symmetry *) &_result_ref;
    }
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__symmetry, 0);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_canonicalize(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    exvector::iterator arg1 ;
    GiNaC::symmetry *arg2 = 0 ;
    int result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:canonicalize",&obj0,&obj1)) goto fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj0, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__symmetry, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::symmetry");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (int)GiNaC::canonicalize(arg1,(GiNaC::symmetry const &)*arg2);
    
    {
        resultobj = SWIG_From_int((int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetrize__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    exvector::const_iterator arg2 ;
    exvector::const_iterator arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:symmetrize",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        exvector::const_iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__const_iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::const_iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::const_iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__const_iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::const_iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    result = GiNaC::symmetrize((GiNaC::ex const &)*arg1,arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetrize__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    exvector *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:symmetrize",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::symmetrize((GiNaC::ex const &)*arg1,(exvector const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetrize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_symmetrize__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_symmetrize__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_symmetrize__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector__const_iterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_exvector__const_iterator, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_symmetrize__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'symmetrize'");
    return NULL;
}


static PyObject *_wrap_antisymmetrize__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    exvector::const_iterator arg2 ;
    exvector::const_iterator arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:antisymmetrize",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        exvector::const_iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__const_iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::const_iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::const_iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__const_iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::const_iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    result = GiNaC::antisymmetrize((GiNaC::ex const &)*arg1,arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_antisymmetrize__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    exvector *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:antisymmetrize",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::antisymmetrize((GiNaC::ex const &)*arg1,(exvector const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_antisymmetrize(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_antisymmetrize__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_antisymmetrize__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_antisymmetrize__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector__const_iterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_exvector__const_iterator, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_antisymmetrize__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'antisymmetrize'");
    return NULL;
}


static PyObject *_wrap_symmetrize_cyclic__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    exvector::const_iterator arg2 ;
    exvector::const_iterator arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:symmetrize_cyclic",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        exvector::const_iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__const_iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::const_iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::const_iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__const_iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::const_iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    result = GiNaC::symmetrize_cyclic((GiNaC::ex const &)*arg1,arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetrize_cyclic__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    exvector *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:symmetrize_cyclic",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::symmetrize_cyclic((GiNaC::ex const &)*arg1,(exvector const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_symmetrize_cyclic(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_symmetrize_cyclic__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                return _wrap_symmetrize_cyclic__SWIG_3(self,args);
            }
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_symmetrize_cyclic__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                void *ptr = 0;
                if (SWIG_ConvertPtr(argv[1], &ptr, SWIGTYPE_p_exvector__const_iterator, 0) == -1) {
                    _v = 0;
                    PyErr_Clear();
                } else {
                    _v = (ptr != 0);
                }
            }
            if (_v) {
                {
                    void *ptr = 0;
                    if (SWIG_ConvertPtr(argv[2], &ptr, SWIGTYPE_p_exvector__const_iterator, 0) == -1) {
                        _v = 0;
                        PyErr_Clear();
                    } else {
                        _v = (ptr != 0);
                    }
                }
                if (_v) {
                    return _wrap_symmetrize_cyclic__SWIG_2(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'symmetrize_cyclic'");
    return NULL;
}


static PyObject *_wrap_new_clifford__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    unsigned char arg2 ;
    GiNaC::clifford *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_clifford",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = (unsigned char)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::clifford *)new GiNaC::clifford((GiNaC::ex const &)*arg1,arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__clifford, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_clifford__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::clifford *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_clifford",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = (GiNaC::clifford *)new GiNaC::clifford((GiNaC::ex const &)*arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__clifford, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_clifford__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    unsigned char arg4 ;
    GiNaC::clifford *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:new_clifford",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (unsigned char)(SWIG_As_unsigned_SS_char(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (GiNaC::clifford *)new GiNaC::clifford((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,arg4);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__clifford, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_clifford__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::clifford *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:new_clifford",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = (GiNaC::clifford *)new GiNaC::clifford((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__clifford, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_clifford(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_new_clifford__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_char(argv[1]);
            if (_v) {
                return _wrap_new_clifford__SWIG_0(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_new_clifford__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_char(argv[3]);
                    if (_v) {
                        return _wrap_new_clifford__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'new_clifford'");
    return NULL;
}


static PyObject *_wrap_clifford_precedence(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::clifford *arg1 = (GiNaC::clifford *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clifford_precedence",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__clifford, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::clifford const *)arg1)->precedence();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_get_representation_label(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::clifford *arg1 = (GiNaC::clifford *) 0 ;
    unsigned char result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clifford_get_representation_label",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__clifford, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned char)((GiNaC::clifford const *)arg1)->get_representation_label();
    
    {
        resultobj = SWIG_From_unsigned_SS_char((unsigned char)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_get_metric__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::clifford *arg1 = (GiNaC::clifford *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clifford_get_metric",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__clifford, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::clifford const *)arg1)->get_metric();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_get_metric__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::clifford *arg1 = (GiNaC::clifford *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:clifford_get_metric",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__clifford, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = ((GiNaC::clifford const *)arg1)->get_metric((GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_get_metric(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__clifford, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_clifford_get_metric__SWIG_0(self,args);
        }
    }
    if (argc == 3) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__clifford, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_clifford_get_metric__SWIG_1(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'clifford_get_metric'");
    return NULL;
}


static PyObject *_wrap_clifford_same_metric(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::clifford *arg1 = (GiNaC::clifford *) 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:clifford_same_metric",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__clifford, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = (bool)((GiNaC::clifford const *)arg1)->same_metric((GiNaC::ex const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_clifford(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::clifford *arg1 = (GiNaC::clifford *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_clifford",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__clifford, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * clifford_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__clifford, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_diracone(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::diracone *arg1 = (GiNaC::diracone *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_diracone",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__diracone, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * diracone_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__diracone, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_cliffordunit_contract_with(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::cliffordunit *arg1 = (GiNaC::cliffordunit *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    exvector *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:cliffordunit_contract_with",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__cliffordunit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((GiNaC::cliffordunit const *)arg1)->contract_with(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_cliffordunit(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::cliffordunit *arg1 = (GiNaC::cliffordunit *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_cliffordunit",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__cliffordunit, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * cliffordunit_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__cliffordunit, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_diracgamma_contract_with(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::diracgamma *arg1 = (GiNaC::diracgamma *) 0 ;
    exvector::iterator arg2 ;
    exvector::iterator arg3 ;
    exvector *arg4 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:diracgamma_contract_with",&obj0,&obj1,&obj2,&obj3)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__diracgamma, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj1, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
        arg2 = *argp;
    }
    {
        exvector::iterator * argp;
        SWIG_Python_ConvertPtr(obj2, (void **)&argp, SWIGTYPE_p_exvector__iterator, SWIG_POINTER_EXCEPTION);
        if (SWIG_arg_fail(3)) SWIG_fail;
        if (argp == NULL) {
            SWIG_null_ref("exvector::iterator");
        }
        if (SWIG_arg_fail(3)) SWIG_fail;
        arg3 = *argp;
    }
    {
        SWIG_Python_ConvertPtr(obj3, (void **)&arg4, SWIGTYPE_p_exvector, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(4)) SWIG_fail;
        if (arg4 == NULL) {
            SWIG_null_ref("exvector");
        }
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = (bool)((GiNaC::diracgamma const *)arg1)->contract_with(arg2,arg3,*arg4);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_diracgamma(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::diracgamma *arg1 = (GiNaC::diracgamma *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_diracgamma",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__diracgamma, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * diracgamma_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__diracgamma, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_diracgamma5(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::diracgamma5 *arg1 = (GiNaC::diracgamma5 *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_diracgamma5",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__diracgamma5, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * diracgamma5_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__diracgamma5, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_diracgammaL(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::diracgammaL *arg1 = (GiNaC::diracgammaL *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_diracgammaL",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__diracgammaL, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * diracgammaL_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__diracgammaL, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_delete_diracgammaR(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::diracgammaR *arg1 = (GiNaC::diracgammaR *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_diracgammaR",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__diracgammaR, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * diracgammaR_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__diracgammaR, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_dirac_ONE__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned char arg1 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dirac_ONE",&obj0)) goto fail;
    {
        arg1 = (unsigned char)(SWIG_As_unsigned_SS_char(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::dirac_ONE(arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_ONE__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex result;
    
    if(!PyArg_ParseTuple(args,(char *)":dirac_ONE")) goto fail;
    result = GiNaC::dirac_ONE();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_ONE(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_dirac_ONE__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_char(argv[0]);
        if (_v) {
            return _wrap_dirac_ONE__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dirac_ONE'");
    return NULL;
}


static PyObject *_wrap_clifford_unit__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    unsigned char arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:clifford_unit",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (unsigned char)(SWIG_As_unsigned_SS_char(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::clifford_unit((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_unit__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:clifford_unit",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::clifford_unit((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_unit(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_clifford_unit__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_char(argv[2]);
                if (_v) {
                    return _wrap_clifford_unit__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'clifford_unit'");
    return NULL;
}


static PyObject *_wrap_dirac_gamma__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    unsigned char arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:dirac_gamma",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = (unsigned char)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::dirac_gamma((GiNaC::ex const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_gamma__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dirac_gamma",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::dirac_gamma((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_gamma(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_dirac_gamma__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_char(argv[1]);
            if (_v) {
                return _wrap_dirac_gamma__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dirac_gamma'");
    return NULL;
}


static PyObject *_wrap_dirac_gamma5__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned char arg1 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dirac_gamma5",&obj0)) goto fail;
    {
        arg1 = (unsigned char)(SWIG_As_unsigned_SS_char(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::dirac_gamma5(arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_gamma5__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex result;
    
    if(!PyArg_ParseTuple(args,(char *)":dirac_gamma5")) goto fail;
    result = GiNaC::dirac_gamma5();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_gamma5(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_dirac_gamma5__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_char(argv[0]);
        if (_v) {
            return _wrap_dirac_gamma5__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dirac_gamma5'");
    return NULL;
}


static PyObject *_wrap_dirac_gammaL__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned char arg1 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dirac_gammaL",&obj0)) goto fail;
    {
        arg1 = (unsigned char)(SWIG_As_unsigned_SS_char(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::dirac_gammaL(arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_gammaL__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex result;
    
    if(!PyArg_ParseTuple(args,(char *)":dirac_gammaL")) goto fail;
    result = GiNaC::dirac_gammaL();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_gammaL(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_dirac_gammaL__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_char(argv[0]);
        if (_v) {
            return _wrap_dirac_gammaL__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dirac_gammaL'");
    return NULL;
}


static PyObject *_wrap_dirac_gammaR__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned char arg1 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:dirac_gammaR",&obj0)) goto fail;
    {
        arg1 = (unsigned char)(SWIG_As_unsigned_SS_char(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::dirac_gammaR(arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_gammaR__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex result;
    
    if(!PyArg_ParseTuple(args,(char *)":dirac_gammaR")) goto fail;
    result = GiNaC::dirac_gammaR();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_gammaR(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_dirac_gammaR__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_char(argv[0]);
        if (_v) {
            return _wrap_dirac_gammaR__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dirac_gammaR'");
    return NULL;
}


static PyObject *_wrap_dirac_slash__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    unsigned char arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:dirac_slash",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (unsigned char)(SWIG_As_unsigned_SS_char(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::dirac_slash((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_slash__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:dirac_slash",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::dirac_slash((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_slash(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_dirac_slash__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_unsigned_SS_char(argv[2]);
                if (_v) {
                    return _wrap_dirac_slash__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dirac_slash'");
    return NULL;
}


static PyObject *_wrap_dirac_trace__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:dirac_trace",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::dirac_trace((GiNaC::ex const &)*arg1,(lst const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_trace__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:dirac_trace",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::dirac_trace((GiNaC::ex const &)*arg1,(lst const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_dirac_trace(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_dirac_trace__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (PyList_Check(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_dirac_trace__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'dirac_trace'");
    return NULL;
}


static PyObject *_wrap_canonicalize_clifford(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:canonicalize_clifford",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::canonicalize_clifford((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_prime(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clifford_prime",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::clifford_prime((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_bar(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clifford_bar",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::clifford_bar((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_star(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clifford_star",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::clifford_star((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_remove_dirac_ONE__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:remove_dirac_ONE",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::remove_dirac_ONE((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_remove_dirac_ONE__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    unsigned char arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:remove_dirac_ONE",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = (unsigned char)(SWIG_As_unsigned_SS_char(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = GiNaC::remove_dirac_ONE((GiNaC::ex const &)*arg1,arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_remove_dirac_ONE(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            return _wrap_remove_dirac_ONE__SWIG_0(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            _v = SWIG_Check_unsigned_SS_char(argv[1]);
            if (_v) {
                return _wrap_remove_dirac_ONE__SWIG_1(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'remove_dirac_ONE'");
    return NULL;
}


static PyObject *_wrap_clifford_norm(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clifford_norm",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::clifford_norm((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_inverse(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:clifford_inverse",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::clifford_inverse((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lst_to_clifford__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    unsigned char arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:lst_to_clifford",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (unsigned char)(SWIG_As_unsigned_SS_char(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = GiNaC::lst_to_clifford((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lst_to_clifford__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:lst_to_clifford",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::lst_to_clifford((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lst_to_clifford__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:lst_to_clifford",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::lst_to_clifford((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_lst_to_clifford(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[5];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 4); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_lst_to_clifford__SWIG_2(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_lst_to_clifford__SWIG_1(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_char(argv[3]);
                    if (_v) {
                        return _wrap_lst_to_clifford__SWIG_0(self,args);
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'lst_to_clifford'");
    return NULL;
}


static PyObject *_wrap_clifford_to_lst__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    bool arg3 ;
    lst result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:clifford_to_lst",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = (bool)(SWIG_As_bool(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = GiNaC::clifford_to_lst((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,arg3);
    
    {
        lst * resultptr;
        resultptr = new lst((lst &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_lst, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_to_lst__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    lst result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:clifford_to_lst",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::clifford_to_lst((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2);
    
    {
        lst * resultptr;
        resultptr = new lst((lst &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_lst, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_to_lst(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[4];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 3); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 2) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                return _wrap_clifford_to_lst__SWIG_1(self,args);
            }
        }
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                _v = SWIG_Check_bool(argv[2]);
                if (_v) {
                    return _wrap_clifford_to_lst__SWIG_0(self,args);
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'clifford_to_lst'");
    return NULL;
}


static PyObject *_wrap_clifford_moebius_map__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::ex *arg6 = 0 ;
    unsigned char arg7 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    PyObject * obj6 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOOO:clifford_moebius_map",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5,&obj6)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    {
        arg6 = type2ex(obj5);
        if (!arg6) return NULL;
    }
    {
        arg7 = (unsigned char)(SWIG_As_unsigned_SS_char(obj6)); 
        if (SWIG_arg_fail(7)) SWIG_fail;
    }
    result = GiNaC::clifford_moebius_map((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5,(GiNaC::ex const &)*arg6,arg7);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_moebius_map__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex *arg4 = 0 ;
    GiNaC::ex *arg5 = 0 ;
    GiNaC::ex *arg6 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    PyObject * obj4 = 0 ;
    PyObject * obj5 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOOOO:clifford_moebius_map",&obj0,&obj1,&obj2,&obj3,&obj4,&obj5)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = type2ex(obj3);
        if (!arg4) return NULL;
    }
    {
        arg5 = type2ex(obj4);
        if (!arg5) return NULL;
    }
    {
        arg6 = type2ex(obj5);
        if (!arg6) return NULL;
    }
    result = GiNaC::clifford_moebius_map((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,(GiNaC::ex const &)*arg4,(GiNaC::ex const &)*arg5,(GiNaC::ex const &)*arg6);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_moebius_map__SWIG_2(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    unsigned char arg4 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    PyObject * obj3 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOOO:clifford_moebius_map",&obj0,&obj1,&obj2,&obj3)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    {
        arg4 = (unsigned char)(SWIG_As_unsigned_SS_char(obj3)); 
        if (SWIG_arg_fail(4)) SWIG_fail;
    }
    result = GiNaC::clifford_moebius_map((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3,arg4);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_moebius_map__SWIG_3(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex *arg2 = 0 ;
    GiNaC::ex *arg3 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:clifford_moebius_map",&obj0,&obj1,&obj2)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        arg2 = type2ex(obj1);
        if (!arg2) return NULL;
    }
    {
        arg3 = type2ex(obj2);
        if (!arg3) return NULL;
    }
    result = GiNaC::clifford_moebius_map((GiNaC::ex const &)*arg1,(GiNaC::ex const &)*arg2,(GiNaC::ex const &)*arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_clifford_moebius_map(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[8];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 7); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 3) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    return _wrap_clifford_moebius_map__SWIG_3(self,args);
                }
            }
        }
    }
    if (argc == 4) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    _v = SWIG_Check_unsigned_SS_char(argv[3]);
                    if (_v) {
                        return _wrap_clifford_moebius_map__SWIG_2(self,args);
                    }
                }
            }
        }
    }
    if (argc == 6) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (checktype2ex(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                return _wrap_clifford_moebius_map__SWIG_1(self,args);
                            }
                        }
                    }
                }
            }
        }
    }
    if (argc == 7) {
        int _v;
        {
            _v = (checktype2ex(argv[0])) ? 1 : 0;
        }
        if (_v) {
            {
                _v = (checktype2ex(argv[1])) ? 1 : 0;
            }
            if (_v) {
                {
                    _v = (checktype2ex(argv[2])) ? 1 : 0;
                }
                if (_v) {
                    {
                        _v = (checktype2ex(argv[3])) ? 1 : 0;
                    }
                    if (_v) {
                        {
                            _v = (checktype2ex(argv[4])) ? 1 : 0;
                        }
                        if (_v) {
                            {
                                _v = (checktype2ex(argv[5])) ? 1 : 0;
                            }
                            if (_v) {
                                _v = SWIG_Check_unsigned_SS_char(argv[6]);
                                if (_v) {
                                    return _wrap_clifford_moebius_map__SWIG_0(self,args);
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'clifford_moebius_map'");
    return NULL;
}


static PyObject *_wrap_new_wildcard(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::wildcard *result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:new_wildcard",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (GiNaC::wildcard *)new GiNaC::wildcard(arg1);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__wildcard, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wildcard_get_label(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::wildcard *arg1 = (GiNaC::wildcard *) 0 ;
    unsigned int result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:wildcard_get_label",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__wildcard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (unsigned int)((GiNaC::wildcard const *)arg1)->get_label();
    
    {
        resultobj = SWIG_From_unsigned_SS_int((unsigned int)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_wildcard(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::wildcard *arg1 = (GiNaC::wildcard *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_wildcard",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__wildcard, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * wildcard_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__wildcard, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_wild__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    unsigned int arg1 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:wild",&obj0)) goto fail;
    {
        arg1 = (unsigned int)(SWIG_As_unsigned_SS_int(obj0)); 
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = GiNaC::wild(arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wild__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex result;
    
    if(!PyArg_ParseTuple(args,(char *)":wild")) goto fail;
    result = GiNaC::wild();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_wild(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[2];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 1); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 0) {
        return _wrap_wild__SWIG_1(self,args);
    }
    if (argc == 1) {
        int _v;
        _v = SWIG_Check_unsigned_SS_int(argv[0]);
        if (_v) {
            return _wrap_wild__SWIG_0(self,args);
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'wild'");
    return NULL;
}


static PyObject *_wrap_haswild(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:haswild",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = (bool)GiNaC::haswild((GiNaC::ex const &)*arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_new_expand_options(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::expand_options *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_expand_options")) goto fail;
    result = (GiNaC::expand_options *)new GiNaC::expand_options();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__expand_options, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_expand_options(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::expand_options *arg1 = (GiNaC::expand_options *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_expand_options",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__expand_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * expand_options_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__expand_options, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_subs_options(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::subs_options *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_subs_options")) goto fail;
    result = (GiNaC::subs_options *)new GiNaC::subs_options();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__subs_options, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_subs_options(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::subs_options *arg1 = (GiNaC::subs_options *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_subs_options",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__subs_options, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * subs_options_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__subs_options, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_determinant_algo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::determinant_algo *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_determinant_algo")) goto fail;
    result = (GiNaC::determinant_algo *)new GiNaC::determinant_algo();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__determinant_algo, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_determinant_algo(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::determinant_algo *arg1 = (GiNaC::determinant_algo *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_determinant_algo",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__determinant_algo, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * determinant_algo_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__determinant_algo, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_info_flags(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::info_flags *result;
    
    if(!PyArg_ParseTuple(args,(char *)":new_info_flags")) goto fail;
    result = (GiNaC::info_flags *)new GiNaC::info_flags();
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__info_flags, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_info_flags(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::info_flags *arg1 = (GiNaC::info_flags *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_info_flags",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__info_flags, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * info_flags_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__info_flags, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_new_pseries(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::epvector *arg2 = 0 ;
    GiNaC::pseries *result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:new_pseries",&obj0,&obj1)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_std__vectorTexpair_t, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::epvector");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (GiNaC::pseries *)new GiNaC::pseries((GiNaC::ex const &)*arg1,(std::vector<expair > const &)*arg2);
    
    resultobj = SWIG_NewPointerObj((void*)(result), SWIGTYPE_p_GiNaC__pseries, 1);
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_get_var(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pseries_get_var",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::pseries const *)arg1)->get_var();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_get_point(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pseries_get_point",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::pseries const *)arg1)->get_point();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_convert_to_poly__SWIG_0(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    bool arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pseries_convert_to_poly",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (bool)(SWIG_As_bool(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::pseries const *)arg1)->convert_to_poly(arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_convert_to_poly__SWIG_1(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pseries_convert_to_poly",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = ((GiNaC::pseries const *)arg1)->convert_to_poly();
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_convert_to_poly(PyObject *self, PyObject *args) {
    int argc;
    PyObject *argv[3];
    int ii;
    
    argc = PyObject_Length(args);
    for (ii = 0; (ii < argc) && (ii < 2); ii++) {
        argv[ii] = PyTuple_GetItem(args,ii);
    }
    if (argc == 1) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__pseries, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            return _wrap_pseries_convert_to_poly__SWIG_1(self,args);
        }
    }
    if (argc == 2) {
        int _v;
        {
            void *ptr;
            if (SWIG_ConvertPtr(argv[0], &ptr, SWIGTYPE_p_GiNaC__pseries, 0) == -1) {
                _v = 0;
                PyErr_Clear();
            } else {
                _v = 1;
            }
        }
        if (_v) {
            _v = SWIG_Check_bool(argv[1]);
            if (_v) {
                return _wrap_pseries_convert_to_poly__SWIG_0(self,args);
            }
        }
    }
    
    PyErr_SetString(PyExc_NotImplementedError,"No matching function for overloaded 'pseries_convert_to_poly'");
    return NULL;
}


static PyObject *_wrap_pseries_is_compatible_to(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    GiNaC::pseries *arg2 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pseries_is_compatible_to",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::pseries");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = (bool)((GiNaC::pseries const *)arg1)->is_compatible_to((GiNaC::pseries const &)*arg2);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_is_zero(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pseries_is_zero",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::pseries const *)arg1)->is_zero();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_is_terminating(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:pseries_is_terminating",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    result = (bool)((GiNaC::pseries const *)arg1)->is_terminating();
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_coeffop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    size_t arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pseries_coeffop",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::pseries const *)arg1)->coeffop(arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_exponop(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    size_t arg2 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pseries_exponop",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (size_t)(SWIG_As_unsigned_SS_long(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::pseries const *)arg1)->exponop(arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_add_series(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    GiNaC::pseries *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pseries_add_series",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::pseries");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::pseries const *)arg1)->add_series((GiNaC::pseries const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_mul_const(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pseries_mul_const",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::pseries const *)arg1)->mul_const((GiNaC::numeric const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_mul_series(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    GiNaC::pseries *arg2 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pseries_mul_series",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::pseries");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::pseries const *)arg1)->mul_series((GiNaC::pseries const &)*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_power_const(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    GiNaC::numeric *arg2 = 0 ;
    int arg3 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    PyObject * obj2 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OOO:pseries_power_const",&obj0,&obj1,&obj2)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        SWIG_Python_ConvertPtr(obj1, (void **)&arg2, SWIGTYPE_p_GiNaC__numeric, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(2)) SWIG_fail;
        if (arg2 == NULL) {
            SWIG_null_ref("GiNaC::numeric");
        }
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    {
        arg3 = (int)(SWIG_As_int(obj2)); 
        if (SWIG_arg_fail(3)) SWIG_fail;
    }
    result = ((GiNaC::pseries const *)arg1)->power_const((GiNaC::numeric const &)*arg2,arg3);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_pseries_shift_exponents(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    int arg2 ;
    SwigValueWrapper<GiNaC::pseries > result;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:pseries_shift_exponents",&obj0,&obj1)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    {
        arg2 = (int)(SWIG_As_int(obj1)); 
        if (SWIG_arg_fail(2)) SWIG_fail;
    }
    result = ((GiNaC::pseries const *)arg1)->shift_exponents(arg2);
    
    {
        GiNaC::pseries * resultptr;
        resultptr = new GiNaC::pseries((GiNaC::pseries &)(result));
        resultobj = SWIG_NewPointerObj((void *)(resultptr), SWIGTYPE_p_GiNaC__pseries, 1);
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_delete_pseries(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = (GiNaC::pseries *) 0 ;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:delete_pseries",&obj0)) goto fail;
    SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
    if (SWIG_arg_fail(1)) SWIG_fail;
    delete arg1;
    
    Py_INCREF(Py_None); resultobj = Py_None;
    return resultobj;
    fail:
    return NULL;
}


static PyObject * pseries_swigregister(PyObject *, PyObject *args) {
    PyObject *obj;
    if (!PyArg_ParseTuple(args,(char*)"O", &obj)) return NULL;
    SWIG_TypeClientData(SWIGTYPE_p_GiNaC__pseries, obj);
    Py_INCREF(obj);
    return Py_BuildValue((char *)"");
}
static PyObject *_wrap_series_to_poly(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::ex *arg1 = 0 ;
    GiNaC::ex result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:series_to_poly",&obj0)) goto fail;
    {
        arg1 = type2ex(obj0);
        if (!arg1) return NULL;
    }
    result = GiNaC::series_to_poly((GiNaC::ex const &)*arg1);
    
    {
        resultobj = ex2type(&(result));
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_is_terminating(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    GiNaC::pseries *arg1 = 0 ;
    bool result;
    PyObject * obj0 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"O:is_terminating",&obj0)) goto fail;
    {
        SWIG_Python_ConvertPtr(obj0, (void **)&arg1, SWIGTYPE_p_GiNaC__pseries, SWIG_POINTER_EXCEPTION | 0);
        if (SWIG_arg_fail(1)) SWIG_fail;
        if (arg1 == NULL) {
            SWIG_null_ref("GiNaC::pseries");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
    }
    result = (bool)GiNaC::is_terminating((GiNaC::pseries const &)*arg1);
    
    {
        resultobj = SWIG_From_bool((bool)(result)); 
    }
    return resultobj;
    fail:
    return NULL;
}


static PyObject *_wrap_parse_string(PyObject *, PyObject *args) {
    PyObject *resultobj = NULL;
    std::string *arg1 = 0 ;
    lst *arg2 = 0 ;
    GiNaC::ex result;
    int res1 = 0 ;
    PyObject * obj0 = 0 ;
    PyObject * obj1 = 0 ;
    
    if(!PyArg_ParseTuple(args,(char *)"OO:parse_string",&obj0,&obj1)) goto fail;
    {
        std::string *ptr = (std::string *)0;
        res1 = SWIG_AsPtr_std_string(obj0, &ptr);
        if (!res1) {
            if (!PyErr_Occurred())
            SWIG_type_error("std::string", obj0);
        } else if (!ptr) {
            SWIG_null_ref("std::string");
        }
        if (SWIG_arg_fail(1)) SWIG_fail;
        arg1 = ptr;
    }
    {
        arg2=list2lst(obj1);
        if (!arg2) return NULL;
    }
    result = GiNaC::parse_string((std::string const &)*arg1,*arg2);
    
    {
        resultobj = ex2type(&(result));
    }
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return resultobj;
    fail:
    if (res1 == SWIG_NEWOBJ) delete arg1;
    return NULL;
}


static PyMethodDef SwigMethods[] = {
	 { (char *)"new_refcounted", _wrap_new_refcounted, METH_VARARGS, NULL},
	 { (char *)"refcounted_add_reference", _wrap_refcounted_add_reference, METH_VARARGS, NULL},
	 { (char *)"refcounted_remove_reference", _wrap_refcounted_remove_reference, METH_VARARGS, NULL},
	 { (char *)"refcounted_get_refcount", _wrap_refcounted_get_refcount, METH_VARARGS, NULL},
	 { (char *)"refcounted_set_refcount", _wrap_refcounted_set_refcount, METH_VARARGS, NULL},
	 { (char *)"delete_refcounted", _wrap_delete_refcounted, METH_VARARGS, NULL},
	 { (char *)"refcounted_swigregister", refcounted_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_registered_class_options", _wrap_new_registered_class_options, METH_VARARGS, NULL},
	 { (char *)"registered_class_options_get_name", _wrap_registered_class_options_get_name, METH_VARARGS, NULL},
	 { (char *)"registered_class_options_get_parent_name", _wrap_registered_class_options_get_parent_name, METH_VARARGS, NULL},
	 { (char *)"registered_class_options_get_id", _wrap_registered_class_options_get_id, METH_VARARGS, NULL},
	 { (char *)"registered_class_options_get_unarch_func", _wrap_registered_class_options_get_unarch_func, METH_VARARGS, NULL},
	 { (char *)"registered_class_options_get_print_dispatch_table", _wrap_registered_class_options_get_print_dispatch_table, METH_VARARGS, NULL},
	 { (char *)"registered_class_options_set_print_func", _wrap_registered_class_options_set_print_func, METH_VARARGS, NULL},
	 { (char *)"delete_registered_class_options", _wrap_delete_registered_class_options, METH_VARARGS, NULL},
	 { (char *)"registered_class_options_swigregister", registered_class_options_swigregister, METH_VARARGS, NULL},
	 { (char *)"find_tinfo_key", _wrap_find_tinfo_key, METH_VARARGS, NULL},
	 { (char *)"find_unarch_func", _wrap_find_unarch_func, METH_VARARGS, NULL},
	 { (char *)"delete_basic", _wrap_delete_basic, METH_VARARGS, NULL},
	 { (char *)"new_basic", _wrap_new_basic, METH_VARARGS, NULL},
	 { (char *)"basic_duplicate", _wrap_basic_duplicate, METH_VARARGS, NULL},
	 { (char *)"basic_eval", _wrap_basic_eval, METH_VARARGS, NULL},
	 { (char *)"basic_evalf", _wrap_basic_evalf, METH_VARARGS, NULL},
	 { (char *)"basic_evalm", _wrap_basic_evalm, METH_VARARGS, NULL},
	 { (char *)"basic_eval_indexed", _wrap_basic_eval_indexed, METH_VARARGS, NULL},
	 { (char *)"basic_dbgprint", _wrap_basic_dbgprint, METH_VARARGS, NULL},
	 { (char *)"basic_dbgprinttree", _wrap_basic_dbgprinttree, METH_VARARGS, NULL},
	 { (char *)"basic_precedence", _wrap_basic_precedence, METH_VARARGS, NULL},
	 { (char *)"basic_info", _wrap_basic_info, METH_VARARGS, NULL},
	 { (char *)"basic_nops", _wrap_basic_nops, METH_VARARGS, NULL},
	 { (char *)"basic_op", _wrap_basic_op, METH_VARARGS, NULL},
	 { (char *)"basic_let_op", _wrap_basic_let_op, METH_VARARGS, NULL},
	 { (char *)"basic_has", _wrap_basic_has, METH_VARARGS, NULL},
	 { (char *)"basic_match", _wrap_basic_match, METH_VARARGS, NULL},
	 { (char *)"basic_map", _wrap_basic_map, METH_VARARGS, NULL},
	 { (char *)"basic_accept", _wrap_basic_accept, METH_VARARGS, NULL},
	 { (char *)"basic_degree", _wrap_basic_degree, METH_VARARGS, NULL},
	 { (char *)"basic_ldegree", _wrap_basic_ldegree, METH_VARARGS, NULL},
	 { (char *)"basic_coeff", _wrap_basic_coeff, METH_VARARGS, NULL},
	 { (char *)"basic_expand", _wrap_basic_expand, METH_VARARGS, NULL},
	 { (char *)"basic_collect", _wrap_basic_collect, METH_VARARGS, NULL},
	 { (char *)"basic_series", _wrap_basic_series, METH_VARARGS, NULL},
	 { (char *)"basic_to_rational", _wrap_basic_to_rational, METH_VARARGS, NULL},
	 { (char *)"basic_to_polynomial", _wrap_basic_to_polynomial, METH_VARARGS, NULL},
	 { (char *)"basic_integer_content", _wrap_basic_integer_content, METH_VARARGS, NULL},
	 { (char *)"basic_smod", _wrap_basic_smod, METH_VARARGS, NULL},
	 { (char *)"basic_max_coefficient", _wrap_basic_max_coefficient, METH_VARARGS, NULL},
	 { (char *)"basic_get_free_indices", _wrap_basic_get_free_indices, METH_VARARGS, NULL},
	 { (char *)"basic_add_indexed", _wrap_basic_add_indexed, METH_VARARGS, NULL},
	 { (char *)"basic_scalar_mul_indexed", _wrap_basic_scalar_mul_indexed, METH_VARARGS, NULL},
	 { (char *)"basic_contract_with", _wrap_basic_contract_with, METH_VARARGS, NULL},
	 { (char *)"basic_return_type", _wrap_basic_return_type, METH_VARARGS, NULL},
	 { (char *)"basic_return_type_tinfo", _wrap_basic_return_type_tinfo, METH_VARARGS, NULL},
	 { (char *)"basic_conjugate", _wrap_basic_conjugate, METH_VARARGS, NULL},
	 { (char *)"basic_print_dispatch", _wrap_basic_print_dispatch, METH_VARARGS, NULL},
	 { (char *)"basic_subs_one_level", _wrap_basic_subs_one_level, METH_VARARGS, NULL},
	 { (char *)"basic_diff", _wrap_basic_diff, METH_VARARGS, NULL},
	 { (char *)"basic_compare", _wrap_basic_compare, METH_VARARGS, NULL},
	 { (char *)"basic_is_equal", _wrap_basic_is_equal, METH_VARARGS, NULL},
	 { (char *)"basic_hold", _wrap_basic_hold, METH_VARARGS, NULL},
	 { (char *)"basic_gethash", _wrap_basic_gethash, METH_VARARGS, NULL},
	 { (char *)"basic_tinfo", _wrap_basic_tinfo, METH_VARARGS, NULL},
	 { (char *)"basic_setflag", _wrap_basic_setflag, METH_VARARGS, NULL},
	 { (char *)"basic_clearflag", _wrap_basic_clearflag, METH_VARARGS, NULL},
	 { (char *)"basic_printpython", _wrap_basic_printpython, METH_VARARGS, NULL},
	 { (char *)"basic_printlatex", _wrap_basic_printlatex, METH_VARARGS, NULL},
	 { (char *)"basic_printc", _wrap_basic_printc, METH_VARARGS, NULL},
	 { (char *)"basic___nonzero__", _wrap_basic___nonzero__, METH_VARARGS, NULL},
	 { (char *)"basic___add__", _wrap_basic___add__, METH_VARARGS, NULL},
	 { (char *)"basic___radd__", _wrap_basic___radd__, METH_VARARGS, NULL},
	 { (char *)"basic___sub__", _wrap_basic___sub__, METH_VARARGS, NULL},
	 { (char *)"basic___rsub__", _wrap_basic___rsub__, METH_VARARGS, NULL},
	 { (char *)"basic___mul__", _wrap_basic___mul__, METH_VARARGS, NULL},
	 { (char *)"basic___rmul__", _wrap_basic___rmul__, METH_VARARGS, NULL},
	 { (char *)"basic___div__", _wrap_basic___div__, METH_VARARGS, NULL},
	 { (char *)"basic___rdiv__", _wrap_basic___rdiv__, METH_VARARGS, NULL},
	 { (char *)"basic___pow__", _wrap_basic___pow__, METH_VARARGS, NULL},
	 { (char *)"basic___rpow__", _wrap_basic___rpow__, METH_VARARGS, NULL},
	 { (char *)"basic___pos__", _wrap_basic___pos__, METH_VARARGS, NULL},
	 { (char *)"basic___neg__", _wrap_basic___neg__, METH_VARARGS, NULL},
	 { (char *)"basic___lt__", _wrap_basic___lt__, METH_VARARGS, NULL},
	 { (char *)"basic___le__", _wrap_basic___le__, METH_VARARGS, NULL},
	 { (char *)"basic___eq__", _wrap_basic___eq__, METH_VARARGS, NULL},
	 { (char *)"basic___ne__", _wrap_basic___ne__, METH_VARARGS, NULL},
	 { (char *)"basic___gt__", _wrap_basic___gt__, METH_VARARGS, NULL},
	 { (char *)"basic___ge__", _wrap_basic___ge__, METH_VARARGS, NULL},
	 { (char *)"basic_subs", _wrap_basic_subs, METH_VARARGS, NULL},
	 { (char *)"basic_normal", _wrap_basic_normal, METH_VARARGS, NULL},
	 { (char *)"basic_denom", _wrap_basic_denom, METH_VARARGS, NULL},
	 { (char *)"basic_is_zero", _wrap_basic_is_zero, METH_VARARGS, NULL},
	 { (char *)"basic_content", _wrap_basic_content, METH_VARARGS, NULL},
	 { (char *)"basic_primpart", _wrap_basic_primpart, METH_VARARGS, NULL},
	 { (char *)"basic_unit", _wrap_basic_unit, METH_VARARGS, NULL},
	 { (char *)"basic_simplify_indexed", _wrap_basic_simplify_indexed, METH_VARARGS, NULL},
	 { (char *)"basic_swigregister", basic_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_symbol", _wrap_new_symbol, METH_VARARGS, NULL},
	 { (char *)"delete_symbol", _wrap_delete_symbol, METH_VARARGS, NULL},
	 { (char *)"symbol_swigregister", symbol_swigregister, METH_VARARGS, NULL},
	 { (char *)"numeric_add", _wrap_numeric_add, METH_VARARGS, NULL},
	 { (char *)"numeric_sub", _wrap_numeric_sub, METH_VARARGS, NULL},
	 { (char *)"numeric_mul", _wrap_numeric_mul, METH_VARARGS, NULL},
	 { (char *)"numeric_div", _wrap_numeric_div, METH_VARARGS, NULL},
	 { (char *)"numeric_power", _wrap_numeric_power, METH_VARARGS, NULL},
	 { (char *)"numeric_add_dyn", _wrap_numeric_add_dyn, METH_VARARGS, NULL},
	 { (char *)"numeric_sub_dyn", _wrap_numeric_sub_dyn, METH_VARARGS, NULL},
	 { (char *)"numeric_mul_dyn", _wrap_numeric_mul_dyn, METH_VARARGS, NULL},
	 { (char *)"numeric_div_dyn", _wrap_numeric_div_dyn, METH_VARARGS, NULL},
	 { (char *)"numeric_power_dyn", _wrap_numeric_power_dyn, METH_VARARGS, NULL},
	 { (char *)"numeric_inverse", _wrap_numeric_inverse, METH_VARARGS, NULL},
	 { (char *)"numeric_csgn", _wrap_numeric_csgn, METH_VARARGS, NULL},
	 { (char *)"numeric_compare", _wrap_numeric_compare, METH_VARARGS, NULL},
	 { (char *)"numeric_is_equal", _wrap_numeric_is_equal, METH_VARARGS, NULL},
	 { (char *)"numeric_is_zero", _wrap_numeric_is_zero, METH_VARARGS, NULL},
	 { (char *)"numeric_is_positive", _wrap_numeric_is_positive, METH_VARARGS, NULL},
	 { (char *)"numeric_is_negative", _wrap_numeric_is_negative, METH_VARARGS, NULL},
	 { (char *)"numeric_is_integer", _wrap_numeric_is_integer, METH_VARARGS, NULL},
	 { (char *)"numeric_is_pos_integer", _wrap_numeric_is_pos_integer, METH_VARARGS, NULL},
	 { (char *)"numeric_is_nonneg_integer", _wrap_numeric_is_nonneg_integer, METH_VARARGS, NULL},
	 { (char *)"numeric_is_even", _wrap_numeric_is_even, METH_VARARGS, NULL},
	 { (char *)"numeric_is_odd", _wrap_numeric_is_odd, METH_VARARGS, NULL},
	 { (char *)"numeric_is_prime", _wrap_numeric_is_prime, METH_VARARGS, NULL},
	 { (char *)"numeric_is_rational", _wrap_numeric_is_rational, METH_VARARGS, NULL},
	 { (char *)"numeric_is_real", _wrap_numeric_is_real, METH_VARARGS, NULL},
	 { (char *)"numeric_is_cinteger", _wrap_numeric_is_cinteger, METH_VARARGS, NULL},
	 { (char *)"numeric_is_crational", _wrap_numeric_is_crational, METH_VARARGS, NULL},
	 { (char *)"numeric_to_int", _wrap_numeric_to_int, METH_VARARGS, NULL},
	 { (char *)"numeric_to_long", _wrap_numeric_to_long, METH_VARARGS, NULL},
	 { (char *)"numeric_to_double", _wrap_numeric_to_double, METH_VARARGS, NULL},
	 { (char *)"numeric_to_cl_N", _wrap_numeric_to_cl_N, METH_VARARGS, NULL},
	 { (char *)"numeric_real", _wrap_numeric_real, METH_VARARGS, NULL},
	 { (char *)"numeric_imag", _wrap_numeric_imag, METH_VARARGS, NULL},
	 { (char *)"numeric_numer", _wrap_numeric_numer, METH_VARARGS, NULL},
	 { (char *)"numeric_denom", _wrap_numeric_denom, METH_VARARGS, NULL},
	 { (char *)"numeric_int_length", _wrap_numeric_int_length, METH_VARARGS, NULL},
	 { (char *)"new_numeric", _wrap_new_numeric, METH_VARARGS, NULL},
	 { (char *)"numeric___float__", _wrap_numeric___float__, METH_VARARGS, NULL},
	 { (char *)"numeric___int__", _wrap_numeric___int__, METH_VARARGS, NULL},
	 { (char *)"delete_numeric", _wrap_delete_numeric, METH_VARARGS, NULL},
	 { (char *)"numeric_swigregister", numeric_swigregister, METH_VARARGS, NULL},
	 { (char *)"PiEvalf", _wrap_PiEvalf, METH_VARARGS, NULL},
	 { (char *)"EulerEvalf", _wrap_EulerEvalf, METH_VARARGS, NULL},
	 { (char *)"CatalanEvalf", _wrap_CatalanEvalf, METH_VARARGS, NULL},
	 { (char *)"new_relational", _wrap_new_relational, METH_VARARGS, NULL},
	 { (char *)"relational_lhs", _wrap_relational_lhs, METH_VARARGS, NULL},
	 { (char *)"relational_rhs", _wrap_relational_rhs, METH_VARARGS, NULL},
	 { (char *)"delete_relational", _wrap_delete_relational, METH_VARARGS, NULL},
	 { (char *)"relational_swigregister", relational_swigregister, METH_VARARGS, NULL},
	 { (char *)"quo", _wrap_quo, METH_VARARGS, NULL},
	 { (char *)"rem", _wrap_rem, METH_VARARGS, NULL},
	 { (char *)"decomp_rational", _wrap_decomp_rational, METH_VARARGS, NULL},
	 { (char *)"prem", _wrap_prem, METH_VARARGS, NULL},
	 { (char *)"sprem", _wrap_sprem, METH_VARARGS, NULL},
	 { (char *)"divide", _wrap_divide, METH_VARARGS, NULL},
	 { (char *)"gcd", _wrap_gcd, METH_VARARGS, NULL},
	 { (char *)"lcm", _wrap_lcm, METH_VARARGS, NULL},
	 { (char *)"sqrfree", _wrap_sqrfree, METH_VARARGS, NULL},
	 { (char *)"sqrfree_parfrac", _wrap_sqrfree_parfrac, METH_VARARGS, NULL},
	 { (char *)"collect_common_factors", _wrap_collect_common_factors, METH_VARARGS, NULL},
	 { (char *)"resultant", _wrap_resultant, METH_VARARGS, NULL},
	 { (char *)"new_constant", _wrap_new_constant, METH_VARARGS, NULL},
	 { (char *)"delete_constant", _wrap_delete_constant, METH_VARARGS, NULL},
	 { (char *)"constant_swigregister", constant_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_integral", _wrap_new_integral, METH_VARARGS, NULL},
	 { (char *)"integral_get_free_indices", _wrap_integral_get_free_indices, METH_VARARGS, NULL},
	 { (char *)"integral_return_type", _wrap_integral_return_type, METH_VARARGS, NULL},
	 { (char *)"integral_return_type_tinfo", _wrap_integral_return_type_tinfo, METH_VARARGS, NULL},
	 { (char *)"integral_eval_integ", _wrap_integral_eval_integ, METH_VARARGS, NULL},
	 { (char *)"delete_integral", _wrap_delete_integral, METH_VARARGS, NULL},
	 { (char *)"integral_swigregister", integral_swigregister, METH_VARARGS, NULL},
	 { (char *)"adaptivesimpson", _wrap_adaptivesimpson, METH_VARARGS, NULL},
	 { (char *)"matrix_eval_indexed", _wrap_matrix_eval_indexed, METH_VARARGS, NULL},
	 { (char *)"matrix_add_indexed", _wrap_matrix_add_indexed, METH_VARARGS, NULL},
	 { (char *)"matrix_scalar_mul_indexed", _wrap_matrix_scalar_mul_indexed, METH_VARARGS, NULL},
	 { (char *)"matrix_contract_with", _wrap_matrix_contract_with, METH_VARARGS, NULL},
	 { (char *)"matrix_rows", _wrap_matrix_rows, METH_VARARGS, NULL},
	 { (char *)"matrix_cols", _wrap_matrix_cols, METH_VARARGS, NULL},
	 { (char *)"matrix_add", _wrap_matrix_add, METH_VARARGS, NULL},
	 { (char *)"matrix_sub", _wrap_matrix_sub, METH_VARARGS, NULL},
	 { (char *)"matrix_mul", _wrap_matrix_mul, METH_VARARGS, NULL},
	 { (char *)"matrix_mul_scalar", _wrap_matrix_mul_scalar, METH_VARARGS, NULL},
	 { (char *)"matrix_pow", _wrap_matrix_pow, METH_VARARGS, NULL},
	 { (char *)"matrix___call__", _wrap_matrix___call__, METH_VARARGS, NULL},
	 { (char *)"matrix_set", _wrap_matrix_set, METH_VARARGS, NULL},
	 { (char *)"matrix_transpose", _wrap_matrix_transpose, METH_VARARGS, NULL},
	 { (char *)"matrix_determinant", _wrap_matrix_determinant, METH_VARARGS, NULL},
	 { (char *)"matrix_trace", _wrap_matrix_trace, METH_VARARGS, NULL},
	 { (char *)"matrix_charpoly", _wrap_matrix_charpoly, METH_VARARGS, NULL},
	 { (char *)"matrix_inverse", _wrap_matrix_inverse, METH_VARARGS, NULL},
	 { (char *)"matrix_solve", _wrap_matrix_solve, METH_VARARGS, NULL},
	 { (char *)"matrix_rank", _wrap_matrix_rank, METH_VARARGS, NULL},
	 { (char *)"new_matrix", _wrap_new_matrix, METH_VARARGS, NULL},
	 { (char *)"matrix___setitem__", _wrap_matrix___setitem__, METH_VARARGS, NULL},
	 { (char *)"matrix___getitem__", _wrap_matrix___getitem__, METH_VARARGS, NULL},
	 { (char *)"delete_matrix", _wrap_delete_matrix, METH_VARARGS, NULL},
	 { (char *)"matrix_swigregister", matrix_swigregister, METH_VARARGS, NULL},
	 { (char *)"nops", _wrap_nops, METH_VARARGS, NULL},
	 { (char *)"eval", _wrap_eval, METH_VARARGS, NULL},
	 { (char *)"evalf", _wrap_evalf, METH_VARARGS, NULL},
	 { (char *)"rows", _wrap_rows, METH_VARARGS, NULL},
	 { (char *)"cols", _wrap_cols, METH_VARARGS, NULL},
	 { (char *)"transpose", _wrap_transpose, METH_VARARGS, NULL},
	 { (char *)"determinant", _wrap_determinant, METH_VARARGS, NULL},
	 { (char *)"trace", _wrap_trace, METH_VARARGS, NULL},
	 { (char *)"charpoly", _wrap_charpoly, METH_VARARGS, NULL},
	 { (char *)"inverse", _wrap_inverse, METH_VARARGS, NULL},
	 { (char *)"rank", _wrap_rank, METH_VARARGS, NULL},
	 { (char *)"lst_to_matrix", _wrap_lst_to_matrix, METH_VARARGS, NULL},
	 { (char *)"diag_matrix", _wrap_diag_matrix, METH_VARARGS, NULL},
	 { (char *)"unit_matrix", _wrap_unit_matrix, METH_VARARGS, NULL},
	 { (char *)"symbolic_matrix", _wrap_symbolic_matrix, METH_VARARGS, NULL},
	 { (char *)"conjugateepvector", _wrap_conjugateepvector, METH_VARARGS, NULL},
	 { (char *)"new_expairseq", _wrap_new_expairseq, METH_VARARGS, NULL},
	 { (char *)"expairseq_precedence", _wrap_expairseq_precedence, METH_VARARGS, NULL},
	 { (char *)"delete_expairseq", _wrap_delete_expairseq, METH_VARARGS, NULL},
	 { (char *)"expairseq_swigregister", expairseq_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_mul", _wrap_new_mul, METH_VARARGS, NULL},
	 { (char *)"mul_algebraic_subs_mul", _wrap_mul_algebraic_subs_mul, METH_VARARGS, NULL},
	 { (char *)"delete_mul", _wrap_delete_mul, METH_VARARGS, NULL},
	 { (char *)"mul_swigregister", mul_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_ncmul", _wrap_new_ncmul, METH_VARARGS, NULL},
	 { (char *)"delete_ncmul", _wrap_delete_ncmul, METH_VARARGS, NULL},
	 { (char *)"ncmul_swigregister", ncmul_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_power", _wrap_new_power, METH_VARARGS, NULL},
	 { (char *)"delete_power", _wrap_delete_power, METH_VARARGS, NULL},
	 { (char *)"power_swigregister", power_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_add", _wrap_new_add, METH_VARARGS, NULL},
	 { (char *)"delete_add", _wrap_delete_add, METH_VARARGS, NULL},
	 { (char *)"add_swigregister", add_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_function_options", _wrap_new_function_options, METH_VARARGS, NULL},
	 { (char *)"delete_function_options", _wrap_delete_function_options, METH_VARARGS, NULL},
	 { (char *)"function_options_initialize", _wrap_function_options_initialize, METH_VARARGS, NULL},
	 { (char *)"function_options_dummy", _wrap_function_options_dummy, METH_VARARGS, NULL},
	 { (char *)"function_options_set_name", _wrap_function_options_set_name, METH_VARARGS, NULL},
	 { (char *)"function_options_latex_name", _wrap_function_options_latex_name, METH_VARARGS, NULL},
	 { (char *)"function_options_eval_func", _wrap_function_options_eval_func, METH_VARARGS, NULL},
	 { (char *)"function_options_evalf_func", _wrap_function_options_evalf_func, METH_VARARGS, NULL},
	 { (char *)"function_options_conjugate_func", _wrap_function_options_conjugate_func, METH_VARARGS, NULL},
	 { (char *)"function_options_derivative_func", _wrap_function_options_derivative_func, METH_VARARGS, NULL},
	 { (char *)"function_options_series_func", _wrap_function_options_series_func, METH_VARARGS, NULL},
	 { (char *)"function_options_set_return_type", _wrap_function_options_set_return_type, METH_VARARGS, NULL},
	 { (char *)"function_options_do_not_evalf_params", _wrap_function_options_do_not_evalf_params, METH_VARARGS, NULL},
	 { (char *)"function_options_remember", _wrap_function_options_remember, METH_VARARGS, NULL},
	 { (char *)"function_options_overloaded", _wrap_function_options_overloaded, METH_VARARGS, NULL},
	 { (char *)"function_options_set_symmetry", _wrap_function_options_set_symmetry, METH_VARARGS, NULL},
	 { (char *)"function_options_get_name", _wrap_function_options_get_name, METH_VARARGS, NULL},
	 { (char *)"function_options_get_nparams", _wrap_function_options_get_nparams, METH_VARARGS, NULL},
	 { (char *)"function_options_swigregister", function_options_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_do_taylor", _wrap_new_do_taylor, METH_VARARGS, NULL},
	 { (char *)"delete_do_taylor", _wrap_delete_do_taylor, METH_VARARGS, NULL},
	 { (char *)"do_taylor_swigregister", do_taylor_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_function", _wrap_new_function, METH_VARARGS, NULL},
	 { (char *)"function_precedence", _wrap_function_precedence, METH_VARARGS, NULL},
	 { (char *)"function_calchash", _wrap_function_calchash, METH_VARARGS, NULL},
	 { (char *)"function_thiscontainer", _wrap_function_thiscontainer, METH_VARARGS, NULL},
	 { (char *)"function_register_new", _wrap_function_register_new, METH_VARARGS, NULL},
	 { (char *)"function_find_function", _wrap_function_find_function, METH_VARARGS, NULL},
	 { (char *)"function_get_serial", _wrap_function_get_serial, METH_VARARGS, NULL},
	 { (char *)"function_get_name", _wrap_function_get_name, METH_VARARGS, NULL},
	 { (char *)"delete_function", _wrap_delete_function, METH_VARARGS, NULL},
	 { (char *)"function_swigregister", function_swigregister, METH_VARARGS, NULL},
	 { (char *)"conjugate", _wrap_conjugate, METH_VARARGS, NULL},
	 { (char *)"has", _wrap_has, METH_VARARGS, NULL},
	 { (char *)"find", _wrap_find, METH_VARARGS, NULL},
	 { (char *)"degree", _wrap_degree, METH_VARARGS, NULL},
	 { (char *)"ldegree", _wrap_ldegree, METH_VARARGS, NULL},
	 { (char *)"coeff", _wrap_coeff, METH_VARARGS, NULL},
	 { (char *)"numer", _wrap_numer, METH_VARARGS, NULL},
	 { (char *)"denom", _wrap_denom, METH_VARARGS, NULL},
	 { (char *)"numer_denom", _wrap_numer_denom, METH_VARARGS, NULL},
	 { (char *)"normal", _wrap_normal, METH_VARARGS, NULL},
	 { (char *)"to_rational", _wrap_to_rational, METH_VARARGS, NULL},
	 { (char *)"to_polynomial", _wrap_to_polynomial, METH_VARARGS, NULL},
	 { (char *)"collect", _wrap_collect, METH_VARARGS, NULL},
	 { (char *)"evalm", _wrap_evalm, METH_VARARGS, NULL},
	 { (char *)"eval_integ", _wrap_eval_integ, METH_VARARGS, NULL},
	 { (char *)"diff", _wrap_diff, METH_VARARGS, NULL},
	 { (char *)"series", _wrap_series, METH_VARARGS, NULL},
	 { (char *)"match", _wrap_match, METH_VARARGS, NULL},
	 { (char *)"simplify_indexed", _wrap_simplify_indexed, METH_VARARGS, NULL},
	 { (char *)"op", _wrap_op, METH_VARARGS, NULL},
	 { (char *)"lhs", _wrap_lhs, METH_VARARGS, NULL},
	 { (char *)"rhs", _wrap_rhs, METH_VARARGS, NULL},
	 { (char *)"swap", _wrap_swap, METH_VARARGS, NULL},
	 { (char *)"subs", _wrap_subs, METH_VARARGS, NULL},
	 { (char *)"sqrt", _wrap_sqrt, METH_VARARGS, NULL},
	 { (char *)"expand", _wrap_expand, METH_VARARGS, NULL},
	 { (char *)"new_conjugate_function_SERIAL", _wrap_new_conjugate_function_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_conjugate_function_SERIAL", _wrap_delete_conjugate_function_SERIAL, METH_VARARGS, NULL},
	 { (char *)"conjugate_function_SERIAL_swigregister", conjugate_function_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"conjugate_function_ex", _wrap_conjugate_function_ex, METH_VARARGS, NULL},
	 { (char *)"conjugate_function_basic", _wrap_conjugate_function_basic, METH_VARARGS, NULL},
	 { (char *)"conjugate_function_int", _wrap_conjugate_function_int, METH_VARARGS, NULL},
	 { (char *)"conjugate_function_double", _wrap_conjugate_function_double, METH_VARARGS, NULL},
	 { (char *)"new_abs_SERIAL", _wrap_new_abs_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_abs_SERIAL", _wrap_delete_abs_SERIAL, METH_VARARGS, NULL},
	 { (char *)"abs_SERIAL_swigregister", abs_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"abs_ex", _wrap_abs_ex, METH_VARARGS, NULL},
	 { (char *)"abs_basic", _wrap_abs_basic, METH_VARARGS, NULL},
	 { (char *)"abs_int", _wrap_abs_int, METH_VARARGS, NULL},
	 { (char *)"abs_double", _wrap_abs_double, METH_VARARGS, NULL},
	 { (char *)"new_csgn_SERIAL", _wrap_new_csgn_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_csgn_SERIAL", _wrap_delete_csgn_SERIAL, METH_VARARGS, NULL},
	 { (char *)"csgn_SERIAL_swigregister", csgn_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"csgn_ex", _wrap_csgn_ex, METH_VARARGS, NULL},
	 { (char *)"csgn_basic", _wrap_csgn_basic, METH_VARARGS, NULL},
	 { (char *)"csgn_int", _wrap_csgn_int, METH_VARARGS, NULL},
	 { (char *)"csgn_double", _wrap_csgn_double, METH_VARARGS, NULL},
	 { (char *)"new_eta_SERIAL", _wrap_new_eta_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_eta_SERIAL", _wrap_delete_eta_SERIAL, METH_VARARGS, NULL},
	 { (char *)"eta_SERIAL_swigregister", eta_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sin_SERIAL", _wrap_new_sin_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_sin_SERIAL", _wrap_delete_sin_SERIAL, METH_VARARGS, NULL},
	 { (char *)"sin_SERIAL_swigregister", sin_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"sin_ex", _wrap_sin_ex, METH_VARARGS, NULL},
	 { (char *)"sin_basic", _wrap_sin_basic, METH_VARARGS, NULL},
	 { (char *)"sin_int", _wrap_sin_int, METH_VARARGS, NULL},
	 { (char *)"sin_double", _wrap_sin_double, METH_VARARGS, NULL},
	 { (char *)"new_cos_SERIAL", _wrap_new_cos_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_cos_SERIAL", _wrap_delete_cos_SERIAL, METH_VARARGS, NULL},
	 { (char *)"cos_SERIAL_swigregister", cos_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"cos_ex", _wrap_cos_ex, METH_VARARGS, NULL},
	 { (char *)"cos_basic", _wrap_cos_basic, METH_VARARGS, NULL},
	 { (char *)"cos_int", _wrap_cos_int, METH_VARARGS, NULL},
	 { (char *)"cos_double", _wrap_cos_double, METH_VARARGS, NULL},
	 { (char *)"new_tan_SERIAL", _wrap_new_tan_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_tan_SERIAL", _wrap_delete_tan_SERIAL, METH_VARARGS, NULL},
	 { (char *)"tan_SERIAL_swigregister", tan_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"tan_ex", _wrap_tan_ex, METH_VARARGS, NULL},
	 { (char *)"tan_basic", _wrap_tan_basic, METH_VARARGS, NULL},
	 { (char *)"tan_int", _wrap_tan_int, METH_VARARGS, NULL},
	 { (char *)"tan_double", _wrap_tan_double, METH_VARARGS, NULL},
	 { (char *)"new_exp_SERIAL", _wrap_new_exp_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_exp_SERIAL", _wrap_delete_exp_SERIAL, METH_VARARGS, NULL},
	 { (char *)"exp_SERIAL_swigregister", exp_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"exp_ex", _wrap_exp_ex, METH_VARARGS, NULL},
	 { (char *)"exp_basic", _wrap_exp_basic, METH_VARARGS, NULL},
	 { (char *)"exp_int", _wrap_exp_int, METH_VARARGS, NULL},
	 { (char *)"exp_double", _wrap_exp_double, METH_VARARGS, NULL},
	 { (char *)"new_log_SERIAL", _wrap_new_log_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_log_SERIAL", _wrap_delete_log_SERIAL, METH_VARARGS, NULL},
	 { (char *)"log_SERIAL_swigregister", log_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"log_ex", _wrap_log_ex, METH_VARARGS, NULL},
	 { (char *)"log_basic", _wrap_log_basic, METH_VARARGS, NULL},
	 { (char *)"log_int", _wrap_log_int, METH_VARARGS, NULL},
	 { (char *)"log_double", _wrap_log_double, METH_VARARGS, NULL},
	 { (char *)"new_asin_SERIAL", _wrap_new_asin_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_asin_SERIAL", _wrap_delete_asin_SERIAL, METH_VARARGS, NULL},
	 { (char *)"asin_SERIAL_swigregister", asin_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"asin_ex", _wrap_asin_ex, METH_VARARGS, NULL},
	 { (char *)"asin_basic", _wrap_asin_basic, METH_VARARGS, NULL},
	 { (char *)"asin_int", _wrap_asin_int, METH_VARARGS, NULL},
	 { (char *)"asin_double", _wrap_asin_double, METH_VARARGS, NULL},
	 { (char *)"new_acos_SERIAL", _wrap_new_acos_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_acos_SERIAL", _wrap_delete_acos_SERIAL, METH_VARARGS, NULL},
	 { (char *)"acos_SERIAL_swigregister", acos_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"acos_ex", _wrap_acos_ex, METH_VARARGS, NULL},
	 { (char *)"acos_basic", _wrap_acos_basic, METH_VARARGS, NULL},
	 { (char *)"acos_int", _wrap_acos_int, METH_VARARGS, NULL},
	 { (char *)"acos_double", _wrap_acos_double, METH_VARARGS, NULL},
	 { (char *)"new_atan_SERIAL", _wrap_new_atan_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_atan_SERIAL", _wrap_delete_atan_SERIAL, METH_VARARGS, NULL},
	 { (char *)"atan_SERIAL_swigregister", atan_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"atan_ex", _wrap_atan_ex, METH_VARARGS, NULL},
	 { (char *)"atan_basic", _wrap_atan_basic, METH_VARARGS, NULL},
	 { (char *)"atan_int", _wrap_atan_int, METH_VARARGS, NULL},
	 { (char *)"atan_double", _wrap_atan_double, METH_VARARGS, NULL},
	 { (char *)"new_atan2_SERIAL", _wrap_new_atan2_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_atan2_SERIAL", _wrap_delete_atan2_SERIAL, METH_VARARGS, NULL},
	 { (char *)"atan2_SERIAL_swigregister", atan2_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_sinh_SERIAL", _wrap_new_sinh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_sinh_SERIAL", _wrap_delete_sinh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"sinh_SERIAL_swigregister", sinh_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"sinh_ex", _wrap_sinh_ex, METH_VARARGS, NULL},
	 { (char *)"sinh_basic", _wrap_sinh_basic, METH_VARARGS, NULL},
	 { (char *)"sinh_int", _wrap_sinh_int, METH_VARARGS, NULL},
	 { (char *)"sinh_double", _wrap_sinh_double, METH_VARARGS, NULL},
	 { (char *)"new_cosh_SERIAL", _wrap_new_cosh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_cosh_SERIAL", _wrap_delete_cosh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"cosh_SERIAL_swigregister", cosh_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"cosh_ex", _wrap_cosh_ex, METH_VARARGS, NULL},
	 { (char *)"cosh_basic", _wrap_cosh_basic, METH_VARARGS, NULL},
	 { (char *)"cosh_int", _wrap_cosh_int, METH_VARARGS, NULL},
	 { (char *)"cosh_double", _wrap_cosh_double, METH_VARARGS, NULL},
	 { (char *)"new_tanh_SERIAL", _wrap_new_tanh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_tanh_SERIAL", _wrap_delete_tanh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"tanh_SERIAL_swigregister", tanh_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"tanh_ex", _wrap_tanh_ex, METH_VARARGS, NULL},
	 { (char *)"tanh_basic", _wrap_tanh_basic, METH_VARARGS, NULL},
	 { (char *)"tanh_int", _wrap_tanh_int, METH_VARARGS, NULL},
	 { (char *)"tanh_double", _wrap_tanh_double, METH_VARARGS, NULL},
	 { (char *)"new_asinh_SERIAL", _wrap_new_asinh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_asinh_SERIAL", _wrap_delete_asinh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"asinh_SERIAL_swigregister", asinh_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"asinh_ex", _wrap_asinh_ex, METH_VARARGS, NULL},
	 { (char *)"asinh_basic", _wrap_asinh_basic, METH_VARARGS, NULL},
	 { (char *)"asinh_int", _wrap_asinh_int, METH_VARARGS, NULL},
	 { (char *)"asinh_double", _wrap_asinh_double, METH_VARARGS, NULL},
	 { (char *)"new_acosh_SERIAL", _wrap_new_acosh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_acosh_SERIAL", _wrap_delete_acosh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"acosh_SERIAL_swigregister", acosh_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"acosh_ex", _wrap_acosh_ex, METH_VARARGS, NULL},
	 { (char *)"acosh_basic", _wrap_acosh_basic, METH_VARARGS, NULL},
	 { (char *)"acosh_int", _wrap_acosh_int, METH_VARARGS, NULL},
	 { (char *)"acosh_double", _wrap_acosh_double, METH_VARARGS, NULL},
	 { (char *)"new_atanh_SERIAL", _wrap_new_atanh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_atanh_SERIAL", _wrap_delete_atanh_SERIAL, METH_VARARGS, NULL},
	 { (char *)"atanh_SERIAL_swigregister", atanh_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"atanh_ex", _wrap_atanh_ex, METH_VARARGS, NULL},
	 { (char *)"atanh_basic", _wrap_atanh_basic, METH_VARARGS, NULL},
	 { (char *)"atanh_int", _wrap_atanh_int, METH_VARARGS, NULL},
	 { (char *)"atanh_double", _wrap_atanh_double, METH_VARARGS, NULL},
	 { (char *)"new_Li2_SERIAL", _wrap_new_Li2_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_Li2_SERIAL", _wrap_delete_Li2_SERIAL, METH_VARARGS, NULL},
	 { (char *)"Li2_SERIAL_swigregister", Li2_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"Li2_ex", _wrap_Li2_ex, METH_VARARGS, NULL},
	 { (char *)"Li2_basic", _wrap_Li2_basic, METH_VARARGS, NULL},
	 { (char *)"Li2_int", _wrap_Li2_int, METH_VARARGS, NULL},
	 { (char *)"Li2_double", _wrap_Li2_double, METH_VARARGS, NULL},
	 { (char *)"new_Li3_SERIAL", _wrap_new_Li3_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_Li3_SERIAL", _wrap_delete_Li3_SERIAL, METH_VARARGS, NULL},
	 { (char *)"Li3_SERIAL_swigregister", Li3_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"Li3_ex", _wrap_Li3_ex, METH_VARARGS, NULL},
	 { (char *)"Li3_basic", _wrap_Li3_basic, METH_VARARGS, NULL},
	 { (char *)"Li3_int", _wrap_Li3_int, METH_VARARGS, NULL},
	 { (char *)"Li3_double", _wrap_Li3_double, METH_VARARGS, NULL},
	 { (char *)"new_zetaderiv_SERIAL", _wrap_new_zetaderiv_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_zetaderiv_SERIAL", _wrap_delete_zetaderiv_SERIAL, METH_VARARGS, NULL},
	 { (char *)"zetaderiv_SERIAL_swigregister", zetaderiv_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Li_SERIAL", _wrap_new_Li_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_Li_SERIAL", _wrap_delete_Li_SERIAL, METH_VARARGS, NULL},
	 { (char *)"Li_SERIAL_swigregister", Li_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_S_SERIAL", _wrap_new_S_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_S_SERIAL", _wrap_delete_S_SERIAL, METH_VARARGS, NULL},
	 { (char *)"S_SERIAL_swigregister", S_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_H_SERIAL", _wrap_new_H_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_H_SERIAL", _wrap_delete_H_SERIAL, METH_VARARGS, NULL},
	 { (char *)"H_SERIAL_swigregister", H_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_lgamma_SERIAL", _wrap_new_lgamma_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_lgamma_SERIAL", _wrap_delete_lgamma_SERIAL, METH_VARARGS, NULL},
	 { (char *)"lgamma_SERIAL_swigregister", lgamma_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"lgamma_ex", _wrap_lgamma_ex, METH_VARARGS, NULL},
	 { (char *)"lgamma_basic", _wrap_lgamma_basic, METH_VARARGS, NULL},
	 { (char *)"lgamma_int", _wrap_lgamma_int, METH_VARARGS, NULL},
	 { (char *)"lgamma_double", _wrap_lgamma_double, METH_VARARGS, NULL},
	 { (char *)"new_tgamma_SERIAL", _wrap_new_tgamma_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_tgamma_SERIAL", _wrap_delete_tgamma_SERIAL, METH_VARARGS, NULL},
	 { (char *)"tgamma_SERIAL_swigregister", tgamma_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"tgamma_ex", _wrap_tgamma_ex, METH_VARARGS, NULL},
	 { (char *)"tgamma_basic", _wrap_tgamma_basic, METH_VARARGS, NULL},
	 { (char *)"tgamma_int", _wrap_tgamma_int, METH_VARARGS, NULL},
	 { (char *)"tgamma_double", _wrap_tgamma_double, METH_VARARGS, NULL},
	 { (char *)"new_beta_SERIAL", _wrap_new_beta_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_beta_SERIAL", _wrap_delete_beta_SERIAL, METH_VARARGS, NULL},
	 { (char *)"beta_SERIAL_swigregister", beta_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_factorial_SERIAL", _wrap_new_factorial_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_factorial_SERIAL", _wrap_delete_factorial_SERIAL, METH_VARARGS, NULL},
	 { (char *)"factorial_SERIAL_swigregister", factorial_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"factorial_ex", _wrap_factorial_ex, METH_VARARGS, NULL},
	 { (char *)"factorial_basic", _wrap_factorial_basic, METH_VARARGS, NULL},
	 { (char *)"factorial_int", _wrap_factorial_int, METH_VARARGS, NULL},
	 { (char *)"factorial_double", _wrap_factorial_double, METH_VARARGS, NULL},
	 { (char *)"new_binomial_SERIAL", _wrap_new_binomial_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_binomial_SERIAL", _wrap_delete_binomial_SERIAL, METH_VARARGS, NULL},
	 { (char *)"binomial_SERIAL_swigregister", binomial_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_Order_SERIAL", _wrap_new_Order_SERIAL, METH_VARARGS, NULL},
	 { (char *)"delete_Order_SERIAL", _wrap_delete_Order_SERIAL, METH_VARARGS, NULL},
	 { (char *)"Order_SERIAL_swigregister", Order_SERIAL_swigregister, METH_VARARGS, NULL},
	 { (char *)"Order_ex", _wrap_Order_ex, METH_VARARGS, NULL},
	 { (char *)"Order_basic", _wrap_Order_basic, METH_VARARGS, NULL},
	 { (char *)"Order_int", _wrap_Order_int, METH_VARARGS, NULL},
	 { (char *)"Order_double", _wrap_Order_double, METH_VARARGS, NULL},
	 { (char *)"lsolve", _wrap_lsolve, METH_VARARGS, NULL},
	 { (char *)"tensor_replace_contr_index", _wrap_tensor_replace_contr_index, METH_VARARGS, NULL},
	 { (char *)"delete_tensor", _wrap_delete_tensor, METH_VARARGS, NULL},
	 { (char *)"tensor_swigregister", tensor_swigregister, METH_VARARGS, NULL},
	 { (char *)"tensdelta_eval_indexed", _wrap_tensdelta_eval_indexed, METH_VARARGS, NULL},
	 { (char *)"tensdelta_contract_with", _wrap_tensdelta_contract_with, METH_VARARGS, NULL},
	 { (char *)"delete_tensdelta", _wrap_delete_tensdelta, METH_VARARGS, NULL},
	 { (char *)"tensdelta_swigregister", tensdelta_swigregister, METH_VARARGS, NULL},
	 { (char *)"tensmetric_eval_indexed", _wrap_tensmetric_eval_indexed, METH_VARARGS, NULL},
	 { (char *)"tensmetric_contract_with", _wrap_tensmetric_contract_with, METH_VARARGS, NULL},
	 { (char *)"delete_tensmetric", _wrap_delete_tensmetric, METH_VARARGS, NULL},
	 { (char *)"tensmetric_swigregister", tensmetric_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_minkmetric", _wrap_new_minkmetric, METH_VARARGS, NULL},
	 { (char *)"minkmetric_eval_indexed", _wrap_minkmetric_eval_indexed, METH_VARARGS, NULL},
	 { (char *)"delete_minkmetric", _wrap_delete_minkmetric, METH_VARARGS, NULL},
	 { (char *)"minkmetric_swigregister", minkmetric_swigregister, METH_VARARGS, NULL},
	 { (char *)"spinmetric_eval_indexed", _wrap_spinmetric_eval_indexed, METH_VARARGS, NULL},
	 { (char *)"spinmetric_contract_with", _wrap_spinmetric_contract_with, METH_VARARGS, NULL},
	 { (char *)"delete_spinmetric", _wrap_delete_spinmetric, METH_VARARGS, NULL},
	 { (char *)"spinmetric_swigregister", spinmetric_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_tensepsilon", _wrap_new_tensepsilon, METH_VARARGS, NULL},
	 { (char *)"tensepsilon_eval_indexed", _wrap_tensepsilon_eval_indexed, METH_VARARGS, NULL},
	 { (char *)"tensepsilon_contract_with", _wrap_tensepsilon_contract_with, METH_VARARGS, NULL},
	 { (char *)"delete_tensepsilon", _wrap_delete_tensepsilon, METH_VARARGS, NULL},
	 { (char *)"tensepsilon_swigregister", tensepsilon_swigregister, METH_VARARGS, NULL},
	 { (char *)"delta_tensor", _wrap_delta_tensor, METH_VARARGS, NULL},
	 { (char *)"metric_tensor", _wrap_metric_tensor, METH_VARARGS, NULL},
	 { (char *)"lorentz_g", _wrap_lorentz_g, METH_VARARGS, NULL},
	 { (char *)"spinor_metric", _wrap_spinor_metric, METH_VARARGS, NULL},
	 { (char *)"epsilon_tensor", _wrap_epsilon_tensor, METH_VARARGS, NULL},
	 { (char *)"lorentz_eps", _wrap_lorentz_eps, METH_VARARGS, NULL},
	 { (char *)"new_indexed", _wrap_new_indexed, METH_VARARGS, NULL},
	 { (char *)"indexed_get_free_indices", _wrap_indexed_get_free_indices, METH_VARARGS, NULL},
	 { (char *)"indexed_all_index_values_are", _wrap_indexed_all_index_values_are, METH_VARARGS, NULL},
	 { (char *)"indexed_get_indices", _wrap_indexed_get_indices, METH_VARARGS, NULL},
	 { (char *)"indexed_get_dummy_indices", _wrap_indexed_get_dummy_indices, METH_VARARGS, NULL},
	 { (char *)"indexed_has_dummy_index_for", _wrap_indexed_has_dummy_index_for, METH_VARARGS, NULL},
	 { (char *)"indexed_get_symmetry", _wrap_indexed_get_symmetry, METH_VARARGS, NULL},
	 { (char *)"delete_indexed", _wrap_delete_indexed, METH_VARARGS, NULL},
	 { (char *)"indexed_swigregister", indexed_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_spmapkey", _wrap_new_spmapkey, METH_VARARGS, NULL},
	 { (char *)"spmapkey___eq__", _wrap_spmapkey___eq__, METH_VARARGS, NULL},
	 { (char *)"spmapkey___lt__", _wrap_spmapkey___lt__, METH_VARARGS, NULL},
	 { (char *)"spmapkey_debugprint", _wrap_spmapkey_debugprint, METH_VARARGS, NULL},
	 { (char *)"delete_spmapkey", _wrap_delete_spmapkey, METH_VARARGS, NULL},
	 { (char *)"spmapkey_swigregister", spmapkey_swigregister, METH_VARARGS, NULL},
	 { (char *)"scalar_products_add", _wrap_scalar_products_add, METH_VARARGS, NULL},
	 { (char *)"scalar_products_add_vectors", _wrap_scalar_products_add_vectors, METH_VARARGS, NULL},
	 { (char *)"scalar_products_clear", _wrap_scalar_products_clear, METH_VARARGS, NULL},
	 { (char *)"scalar_products_is_defined", _wrap_scalar_products_is_defined, METH_VARARGS, NULL},
	 { (char *)"scalar_products_evaluate", _wrap_scalar_products_evaluate, METH_VARARGS, NULL},
	 { (char *)"scalar_products_debugprint", _wrap_scalar_products_debugprint, METH_VARARGS, NULL},
	 { (char *)"new_scalar_products", _wrap_new_scalar_products, METH_VARARGS, NULL},
	 { (char *)"delete_scalar_products", _wrap_delete_scalar_products, METH_VARARGS, NULL},
	 { (char *)"scalar_products_swigregister", scalar_products_swigregister, METH_VARARGS, NULL},
	 { (char *)"get_all_dummy_indices", _wrap_get_all_dummy_indices, METH_VARARGS, NULL},
	 { (char *)"rename_dummy_indices_uniquely", _wrap_rename_dummy_indices_uniquely, METH_VARARGS, NULL},
	 { (char *)"expand_dummy_sum", _wrap_expand_dummy_sum, METH_VARARGS, NULL},
	 { (char *)"new_idx", _wrap_new_idx, METH_VARARGS, NULL},
	 { (char *)"idx_is_dummy_pair_same_type", _wrap_idx_is_dummy_pair_same_type, METH_VARARGS, NULL},
	 { (char *)"idx_get_value", _wrap_idx_get_value, METH_VARARGS, NULL},
	 { (char *)"idx_is_numeric", _wrap_idx_is_numeric, METH_VARARGS, NULL},
	 { (char *)"idx_is_symbolic", _wrap_idx_is_symbolic, METH_VARARGS, NULL},
	 { (char *)"idx_get_dim", _wrap_idx_get_dim, METH_VARARGS, NULL},
	 { (char *)"idx_is_dim_numeric", _wrap_idx_is_dim_numeric, METH_VARARGS, NULL},
	 { (char *)"idx_is_dim_symbolic", _wrap_idx_is_dim_symbolic, METH_VARARGS, NULL},
	 { (char *)"idx_replace_dim", _wrap_idx_replace_dim, METH_VARARGS, NULL},
	 { (char *)"idx_minimal_dim", _wrap_idx_minimal_dim, METH_VARARGS, NULL},
	 { (char *)"delete_idx", _wrap_delete_idx, METH_VARARGS, NULL},
	 { (char *)"idx_swigregister", idx_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_varidx", _wrap_new_varidx, METH_VARARGS, NULL},
	 { (char *)"varidx_is_dummy_pair_same_type", _wrap_varidx_is_dummy_pair_same_type, METH_VARARGS, NULL},
	 { (char *)"varidx_is_covariant", _wrap_varidx_is_covariant, METH_VARARGS, NULL},
	 { (char *)"varidx_is_contravariant", _wrap_varidx_is_contravariant, METH_VARARGS, NULL},
	 { (char *)"varidx_toggle_variance", _wrap_varidx_toggle_variance, METH_VARARGS, NULL},
	 { (char *)"delete_varidx", _wrap_delete_varidx, METH_VARARGS, NULL},
	 { (char *)"varidx_swigregister", varidx_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_spinidx", _wrap_new_spinidx, METH_VARARGS, NULL},
	 { (char *)"spinidx_is_dummy_pair_same_type", _wrap_spinidx_is_dummy_pair_same_type, METH_VARARGS, NULL},
	 { (char *)"spinidx_is_dotted", _wrap_spinidx_is_dotted, METH_VARARGS, NULL},
	 { (char *)"spinidx_is_undotted", _wrap_spinidx_is_undotted, METH_VARARGS, NULL},
	 { (char *)"spinidx_toggle_dot", _wrap_spinidx_toggle_dot, METH_VARARGS, NULL},
	 { (char *)"spinidx_toggle_variance_dot", _wrap_spinidx_toggle_variance_dot, METH_VARARGS, NULL},
	 { (char *)"delete_spinidx", _wrap_delete_spinidx, METH_VARARGS, NULL},
	 { (char *)"spinidx_swigregister", spinidx_swigregister, METH_VARARGS, NULL},
	 { (char *)"is_dummy_pair", _wrap_is_dummy_pair, METH_VARARGS, NULL},
	 { (char *)"find_free_and_dummy", _wrap_find_free_and_dummy, METH_VARARGS, NULL},
	 { (char *)"find_dummy_indices", _wrap_find_dummy_indices, METH_VARARGS, NULL},
	 { (char *)"count_dummy_indices", _wrap_count_dummy_indices, METH_VARARGS, NULL},
	 { (char *)"count_free_indices", _wrap_count_free_indices, METH_VARARGS, NULL},
	 { (char *)"minimal_dim", _wrap_minimal_dim, METH_VARARGS, NULL},
	 { (char *)"new_symmetry", _wrap_new_symmetry, METH_VARARGS, NULL},
	 { (char *)"symmetry_get_type", _wrap_symmetry_get_type, METH_VARARGS, NULL},
	 { (char *)"symmetry_set_type", _wrap_symmetry_set_type, METH_VARARGS, NULL},
	 { (char *)"symmetry_add", _wrap_symmetry_add, METH_VARARGS, NULL},
	 { (char *)"symmetry_validate", _wrap_symmetry_validate, METH_VARARGS, NULL},
	 { (char *)"symmetry_has_symmetry", _wrap_symmetry_has_symmetry, METH_VARARGS, NULL},
	 { (char *)"delete_symmetry", _wrap_delete_symmetry, METH_VARARGS, NULL},
	 { (char *)"symmetry_swigregister", symmetry_swigregister, METH_VARARGS, NULL},
	 { (char *)"sy_none", _wrap_sy_none, METH_VARARGS, NULL},
	 { (char *)"sy_symm", _wrap_sy_symm, METH_VARARGS, NULL},
	 { (char *)"sy_anti", _wrap_sy_anti, METH_VARARGS, NULL},
	 { (char *)"sy_cycl", _wrap_sy_cycl, METH_VARARGS, NULL},
	 { (char *)"not_symmetric", _wrap_not_symmetric, METH_VARARGS, NULL},
	 { (char *)"symmetric2", _wrap_symmetric2, METH_VARARGS, NULL},
	 { (char *)"symmetric3", _wrap_symmetric3, METH_VARARGS, NULL},
	 { (char *)"symmetric4", _wrap_symmetric4, METH_VARARGS, NULL},
	 { (char *)"antisymmetric2", _wrap_antisymmetric2, METH_VARARGS, NULL},
	 { (char *)"antisymmetric3", _wrap_antisymmetric3, METH_VARARGS, NULL},
	 { (char *)"antisymmetric4", _wrap_antisymmetric4, METH_VARARGS, NULL},
	 { (char *)"canonicalize", _wrap_canonicalize, METH_VARARGS, NULL},
	 { (char *)"symmetrize", _wrap_symmetrize, METH_VARARGS, NULL},
	 { (char *)"antisymmetrize", _wrap_antisymmetrize, METH_VARARGS, NULL},
	 { (char *)"symmetrize_cyclic", _wrap_symmetrize_cyclic, METH_VARARGS, NULL},
	 { (char *)"new_clifford", _wrap_new_clifford, METH_VARARGS, NULL},
	 { (char *)"clifford_precedence", _wrap_clifford_precedence, METH_VARARGS, NULL},
	 { (char *)"clifford_get_representation_label", _wrap_clifford_get_representation_label, METH_VARARGS, NULL},
	 { (char *)"clifford_get_metric", _wrap_clifford_get_metric, METH_VARARGS, NULL},
	 { (char *)"clifford_same_metric", _wrap_clifford_same_metric, METH_VARARGS, NULL},
	 { (char *)"delete_clifford", _wrap_delete_clifford, METH_VARARGS, NULL},
	 { (char *)"clifford_swigregister", clifford_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_diracone", _wrap_delete_diracone, METH_VARARGS, NULL},
	 { (char *)"diracone_swigregister", diracone_swigregister, METH_VARARGS, NULL},
	 { (char *)"cliffordunit_contract_with", _wrap_cliffordunit_contract_with, METH_VARARGS, NULL},
	 { (char *)"delete_cliffordunit", _wrap_delete_cliffordunit, METH_VARARGS, NULL},
	 { (char *)"cliffordunit_swigregister", cliffordunit_swigregister, METH_VARARGS, NULL},
	 { (char *)"diracgamma_contract_with", _wrap_diracgamma_contract_with, METH_VARARGS, NULL},
	 { (char *)"delete_diracgamma", _wrap_delete_diracgamma, METH_VARARGS, NULL},
	 { (char *)"diracgamma_swigregister", diracgamma_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_diracgamma5", _wrap_delete_diracgamma5, METH_VARARGS, NULL},
	 { (char *)"diracgamma5_swigregister", diracgamma5_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_diracgammaL", _wrap_delete_diracgammaL, METH_VARARGS, NULL},
	 { (char *)"diracgammaL_swigregister", diracgammaL_swigregister, METH_VARARGS, NULL},
	 { (char *)"delete_diracgammaR", _wrap_delete_diracgammaR, METH_VARARGS, NULL},
	 { (char *)"diracgammaR_swigregister", diracgammaR_swigregister, METH_VARARGS, NULL},
	 { (char *)"dirac_ONE", _wrap_dirac_ONE, METH_VARARGS, NULL},
	 { (char *)"clifford_unit", _wrap_clifford_unit, METH_VARARGS, NULL},
	 { (char *)"dirac_gamma", _wrap_dirac_gamma, METH_VARARGS, NULL},
	 { (char *)"dirac_gamma5", _wrap_dirac_gamma5, METH_VARARGS, NULL},
	 { (char *)"dirac_gammaL", _wrap_dirac_gammaL, METH_VARARGS, NULL},
	 { (char *)"dirac_gammaR", _wrap_dirac_gammaR, METH_VARARGS, NULL},
	 { (char *)"dirac_slash", _wrap_dirac_slash, METH_VARARGS, NULL},
	 { (char *)"dirac_trace", _wrap_dirac_trace, METH_VARARGS, NULL},
	 { (char *)"canonicalize_clifford", _wrap_canonicalize_clifford, METH_VARARGS, NULL},
	 { (char *)"clifford_prime", _wrap_clifford_prime, METH_VARARGS, NULL},
	 { (char *)"clifford_bar", _wrap_clifford_bar, METH_VARARGS, NULL},
	 { (char *)"clifford_star", _wrap_clifford_star, METH_VARARGS, NULL},
	 { (char *)"remove_dirac_ONE", _wrap_remove_dirac_ONE, METH_VARARGS, NULL},
	 { (char *)"clifford_norm", _wrap_clifford_norm, METH_VARARGS, NULL},
	 { (char *)"clifford_inverse", _wrap_clifford_inverse, METH_VARARGS, NULL},
	 { (char *)"lst_to_clifford", _wrap_lst_to_clifford, METH_VARARGS, NULL},
	 { (char *)"clifford_to_lst", _wrap_clifford_to_lst, METH_VARARGS, NULL},
	 { (char *)"clifford_moebius_map", _wrap_clifford_moebius_map, METH_VARARGS, NULL},
	 { (char *)"new_wildcard", _wrap_new_wildcard, METH_VARARGS, NULL},
	 { (char *)"wildcard_get_label", _wrap_wildcard_get_label, METH_VARARGS, NULL},
	 { (char *)"delete_wildcard", _wrap_delete_wildcard, METH_VARARGS, NULL},
	 { (char *)"wildcard_swigregister", wildcard_swigregister, METH_VARARGS, NULL},
	 { (char *)"wild", _wrap_wild, METH_VARARGS, NULL},
	 { (char *)"haswild", _wrap_haswild, METH_VARARGS, NULL},
	 { (char *)"new_expand_options", _wrap_new_expand_options, METH_VARARGS, NULL},
	 { (char *)"delete_expand_options", _wrap_delete_expand_options, METH_VARARGS, NULL},
	 { (char *)"expand_options_swigregister", expand_options_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_subs_options", _wrap_new_subs_options, METH_VARARGS, NULL},
	 { (char *)"delete_subs_options", _wrap_delete_subs_options, METH_VARARGS, NULL},
	 { (char *)"subs_options_swigregister", subs_options_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_determinant_algo", _wrap_new_determinant_algo, METH_VARARGS, NULL},
	 { (char *)"delete_determinant_algo", _wrap_delete_determinant_algo, METH_VARARGS, NULL},
	 { (char *)"determinant_algo_swigregister", determinant_algo_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_info_flags", _wrap_new_info_flags, METH_VARARGS, NULL},
	 { (char *)"delete_info_flags", _wrap_delete_info_flags, METH_VARARGS, NULL},
	 { (char *)"info_flags_swigregister", info_flags_swigregister, METH_VARARGS, NULL},
	 { (char *)"new_pseries", _wrap_new_pseries, METH_VARARGS, NULL},
	 { (char *)"pseries_get_var", _wrap_pseries_get_var, METH_VARARGS, NULL},
	 { (char *)"pseries_get_point", _wrap_pseries_get_point, METH_VARARGS, NULL},
	 { (char *)"pseries_convert_to_poly", _wrap_pseries_convert_to_poly, METH_VARARGS, NULL},
	 { (char *)"pseries_is_compatible_to", _wrap_pseries_is_compatible_to, METH_VARARGS, NULL},
	 { (char *)"pseries_is_zero", _wrap_pseries_is_zero, METH_VARARGS, NULL},
	 { (char *)"pseries_is_terminating", _wrap_pseries_is_terminating, METH_VARARGS, NULL},
	 { (char *)"pseries_coeffop", _wrap_pseries_coeffop, METH_VARARGS, NULL},
	 { (char *)"pseries_exponop", _wrap_pseries_exponop, METH_VARARGS, NULL},
	 { (char *)"pseries_add_series", _wrap_pseries_add_series, METH_VARARGS, NULL},
	 { (char *)"pseries_mul_const", _wrap_pseries_mul_const, METH_VARARGS, NULL},
	 { (char *)"pseries_mul_series", _wrap_pseries_mul_series, METH_VARARGS, NULL},
	 { (char *)"pseries_power_const", _wrap_pseries_power_const, METH_VARARGS, NULL},
	 { (char *)"pseries_shift_exponents", _wrap_pseries_shift_exponents, METH_VARARGS, NULL},
	 { (char *)"delete_pseries", _wrap_delete_pseries, METH_VARARGS, NULL},
	 { (char *)"pseries_swigregister", pseries_swigregister, METH_VARARGS, NULL},
	 { (char *)"series_to_poly", _wrap_series_to_poly, METH_VARARGS, NULL},
	 { (char *)"is_terminating", _wrap_is_terminating, METH_VARARGS, NULL},
	 { (char *)"parse_string", _wrap_parse_string, METH_VARARGS, NULL},
	 { NULL, NULL, 0, NULL }
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_GiNaC__constantTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::constant *) x));
}
static void *_p_GiNaC__ncmulTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::ncmul *) x));
}
static void *_p_GiNaC__varidxTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::idx *) ((GiNaC::varidx *) x));
}
static void *_p_GiNaC__pseriesTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::pseries *) x));
}
static void *_p_GiNaC__tensdeltaTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *) ((GiNaC::tensdelta *) x));
}
static void *_p_GiNaC__spinmetricTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *)(GiNaC::tensmetric *) ((GiNaC::spinmetric *) x));
}
static void *_p_GiNaC__tensorTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::tensor *) x));
}
static void *_p_GiNaC__diracgammaTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *)(GiNaC::cliffordunit *) ((GiNaC::diracgamma *) x));
}
static void *_p_GiNaC__diracgamma5To_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *) ((GiNaC::diracgamma5 *) x));
}
static void *_p_GiNaC__wildcardTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::wildcard *) x));
}
static void *_p_GiNaC__tensmetricTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *) ((GiNaC::tensmetric *) x));
}
static void *_p_GiNaC__minkmetricTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *)(GiNaC::tensmetric *) ((GiNaC::minkmetric *) x));
}
static void *_p_GiNaC__addTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::expairseq *) ((GiNaC::add *) x));
}
static void *_p_GiNaC__functionTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::function *) x));
}
static void *_p_GiNaC__idxTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::idx *) x));
}
static void *_p_GiNaC__cliffordTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::indexed *) ((GiNaC::clifford *) x));
}
static void *_p_GiNaC__integralTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::integral *) x));
}
static void *_p_GiNaC__indexedTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::indexed *) x));
}
static void *_p_GiNaC__matrixTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::matrix *) x));
}
static void *_p_GiNaC__tensepsilonTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *) ((GiNaC::tensepsilon *) x));
}
static void *_p_GiNaC__cliffordunitTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *) ((GiNaC::cliffordunit *) x));
}
static void *_p_GiNaC__diracgammaLTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *) ((GiNaC::diracgammaL *) x));
}
static void *_p_GiNaC__numericTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::numeric *) x));
}
static void *_p_GiNaC__symmetryTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::symmetry *) x));
}
static void *_p_GiNaC__mulTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::expairseq *) ((GiNaC::mul *) x));
}
static void *_p_GiNaC__relationalTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::relational *) x));
}
static void *_p_GiNaC__powerTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::power *) x));
}
static void *_p_GiNaC__expairseqTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::expairseq *) x));
}
static void *_p_GiNaC__diracgammaRTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *) ((GiNaC::diracgammaR *) x));
}
static void *_p_GiNaC__basicTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *)  ((GiNaC::basic *) x));
}
static void *_p_GiNaC__symbolTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *) ((GiNaC::symbol *) x));
}
static void *_p_GiNaC__spinidxTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::idx *)(GiNaC::varidx *) ((GiNaC::spinidx *) x));
}
static void *_p_GiNaC__diraconeTo_p_GiNaC__refcounted(void *x) {
    return (void *)((GiNaC::refcounted *) (GiNaC::basic *)(GiNaC::tensor *) ((GiNaC::diracone *) x));
}
static void *_p_GiNaC__constantTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::constant *) x));
}
static void *_p_GiNaC__ncmulTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::ncmul *) x));
}
static void *_p_GiNaC__varidxTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::idx *) ((GiNaC::varidx *) x));
}
static void *_p_GiNaC__pseriesTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::pseries *) x));
}
static void *_p_GiNaC__tensdeltaTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *) ((GiNaC::tensdelta *) x));
}
static void *_p_GiNaC__spinmetricTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *)(GiNaC::tensmetric *) ((GiNaC::spinmetric *) x));
}
static void *_p_GiNaC__tensorTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::tensor *) x));
}
static void *_p_GiNaC__diracgammaTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *)(GiNaC::cliffordunit *) ((GiNaC::diracgamma *) x));
}
static void *_p_GiNaC__diracgamma5To_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *) ((GiNaC::diracgamma5 *) x));
}
static void *_p_GiNaC__wildcardTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::wildcard *) x));
}
static void *_p_GiNaC__tensmetricTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *) ((GiNaC::tensmetric *) x));
}
static void *_p_GiNaC__minkmetricTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *)(GiNaC::tensmetric *) ((GiNaC::minkmetric *) x));
}
static void *_p_GiNaC__addTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::expairseq *) ((GiNaC::add *) x));
}
static void *_p_GiNaC__functionTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::function *) x));
}
static void *_p_GiNaC__idxTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::idx *) x));
}
static void *_p_GiNaC__cliffordTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::indexed *) ((GiNaC::clifford *) x));
}
static void *_p_GiNaC__integralTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::integral *) x));
}
static void *_p_GiNaC__indexedTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::indexed *) x));
}
static void *_p_GiNaC__matrixTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::matrix *) x));
}
static void *_p_GiNaC__tensepsilonTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *) ((GiNaC::tensepsilon *) x));
}
static void *_p_GiNaC__cliffordunitTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *) ((GiNaC::cliffordunit *) x));
}
static void *_p_GiNaC__diracgammaLTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *) ((GiNaC::diracgammaL *) x));
}
static void *_p_GiNaC__numericTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::numeric *) x));
}
static void *_p_GiNaC__symmetryTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::symmetry *) x));
}
static void *_p_GiNaC__mulTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::expairseq *) ((GiNaC::mul *) x));
}
static void *_p_GiNaC__relationalTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::relational *) x));
}
static void *_p_GiNaC__powerTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::power *) x));
}
static void *_p_GiNaC__expairseqTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::expairseq *) x));
}
static void *_p_GiNaC__diracgammaRTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *) ((GiNaC::diracgammaR *) x));
}
static void *_p_GiNaC__symbolTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *)  ((GiNaC::symbol *) x));
}
static void *_p_GiNaC__spinidxTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::idx *)(GiNaC::varidx *) ((GiNaC::spinidx *) x));
}
static void *_p_GiNaC__diraconeTo_p_GiNaC__basic(void *x) {
    return (void *)((GiNaC::basic *) (GiNaC::tensor *) ((GiNaC::diracone *) x));
}
static void *_p_GiNaC__cliffordTo_p_GiNaC__indexed(void *x) {
    return (void *)((GiNaC::indexed *)  ((GiNaC::clifford *) x));
}
static void *_p_GiNaC__minkmetricTo_p_GiNaC__tensmetric(void *x) {
    return (void *)((GiNaC::tensmetric *)  ((GiNaC::minkmetric *) x));
}
static void *_p_GiNaC__spinmetricTo_p_GiNaC__tensmetric(void *x) {
    return (void *)((GiNaC::tensmetric *)  ((GiNaC::spinmetric *) x));
}
static void *_p_GiNaC__spinidxTo_p_GiNaC__varidx(void *x) {
    return (void *)((GiNaC::varidx *)  ((GiNaC::spinidx *) x));
}
static void *_p_GiNaC__cliffordunitTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *)  ((GiNaC::cliffordunit *) x));
}
static void *_p_GiNaC__tensdeltaTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *)  ((GiNaC::tensdelta *) x));
}
static void *_p_GiNaC__diracgamma5To_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *)  ((GiNaC::diracgamma5 *) x));
}
static void *_p_GiNaC__tensepsilonTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *)  ((GiNaC::tensepsilon *) x));
}
static void *_p_GiNaC__diracgammaRTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *)  ((GiNaC::diracgammaR *) x));
}
static void *_p_GiNaC__diracgammaLTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *)  ((GiNaC::diracgammaL *) x));
}
static void *_p_GiNaC__tensmetricTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *)  ((GiNaC::tensmetric *) x));
}
static void *_p_GiNaC__minkmetricTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *) (GiNaC::tensmetric *) ((GiNaC::minkmetric *) x));
}
static void *_p_GiNaC__diraconeTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *)  ((GiNaC::diracone *) x));
}
static void *_p_GiNaC__spinmetricTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *) (GiNaC::tensmetric *) ((GiNaC::spinmetric *) x));
}
static void *_p_GiNaC__diracgammaTo_p_GiNaC__tensor(void *x) {
    return (void *)((GiNaC::tensor *) (GiNaC::cliffordunit *) ((GiNaC::diracgamma *) x));
}
static void *_p_GiNaC__diracgammaTo_p_GiNaC__cliffordunit(void *x) {
    return (void *)((GiNaC::cliffordunit *)  ((GiNaC::diracgamma *) x));
}
static void *_p_GiNaC__addTo_p_GiNaC__expairseq(void *x) {
    return (void *)((GiNaC::expairseq *)  ((GiNaC::add *) x));
}
static void *_p_GiNaC__mulTo_p_GiNaC__expairseq(void *x) {
    return (void *)((GiNaC::expairseq *)  ((GiNaC::mul *) x));
}
static void *_p_GiNaC__varidxTo_p_GiNaC__idx(void *x) {
    return (void *)((GiNaC::idx *)  ((GiNaC::varidx *) x));
}
static void *_p_GiNaC__spinidxTo_p_GiNaC__idx(void *x) {
    return (void *)((GiNaC::idx *) (GiNaC::varidx *) ((GiNaC::spinidx *) x));
}
static swig_type_info _swigt__p_GiNaC__H_SERIAL = {"_p_GiNaC__H_SERIAL", "GiNaC::H_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__Li2_SERIAL = {"_p_GiNaC__Li2_SERIAL", "GiNaC::Li2_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__Li3_SERIAL = {"_p_GiNaC__Li3_SERIAL", "GiNaC::Li3_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__Li_SERIAL = {"_p_GiNaC__Li_SERIAL", "GiNaC::Li_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__Order_SERIAL = {"_p_GiNaC__Order_SERIAL", "GiNaC::Order_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__S_SERIAL = {"_p_GiNaC__S_SERIAL", "GiNaC::S_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__abs_SERIAL = {"_p_GiNaC__abs_SERIAL", "GiNaC::abs_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__acos_SERIAL = {"_p_GiNaC__acos_SERIAL", "GiNaC::acos_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__acosh_SERIAL = {"_p_GiNaC__acosh_SERIAL", "GiNaC::acosh_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__add = {"_p_GiNaC__add", "GiNaC::add *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__asin_SERIAL = {"_p_GiNaC__asin_SERIAL", "GiNaC::asin_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__asinh_SERIAL = {"_p_GiNaC__asinh_SERIAL", "GiNaC::asinh_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__atan2_SERIAL = {"_p_GiNaC__atan2_SERIAL", "GiNaC::atan2_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__atan_SERIAL = {"_p_GiNaC__atan_SERIAL", "GiNaC::atan_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__atanh_SERIAL = {"_p_GiNaC__atanh_SERIAL", "GiNaC::atanh_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__basic = {"_p_GiNaC__basic", "GiNaC::basic *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__beta_SERIAL = {"_p_GiNaC__beta_SERIAL", "GiNaC::beta_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__binomial_SERIAL = {"_p_GiNaC__binomial_SERIAL", "GiNaC::binomial_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__clifford = {"_p_GiNaC__clifford", "GiNaC::clifford *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__cliffordunit = {"_p_GiNaC__cliffordunit", "GiNaC::cliffordunit *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__conjugate_function_SERIAL = {"_p_GiNaC__conjugate_function_SERIAL", "GiNaC::conjugate_function_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__constant = {"_p_GiNaC__constant", "GiNaC::constant *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__cos_SERIAL = {"_p_GiNaC__cos_SERIAL", "GiNaC::cos_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__cosh_SERIAL = {"_p_GiNaC__cosh_SERIAL", "GiNaC::cosh_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__csgn_SERIAL = {"_p_GiNaC__csgn_SERIAL", "GiNaC::csgn_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__determinant_algo = {"_p_GiNaC__determinant_algo", "GiNaC::determinant_algo *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__diracgamma = {"_p_GiNaC__diracgamma", "GiNaC::diracgamma *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__diracgamma5 = {"_p_GiNaC__diracgamma5", "GiNaC::diracgamma5 *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__diracgammaL = {"_p_GiNaC__diracgammaL", "GiNaC::diracgammaL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__diracgammaR = {"_p_GiNaC__diracgammaR", "GiNaC::diracgammaR *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__diracone = {"_p_GiNaC__diracone", "GiNaC::diracone *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__do_taylor = {"_p_GiNaC__do_taylor", "GiNaC::do_taylor *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__epvector__iterator = {"_p_GiNaC__epvector__iterator", "GiNaC::epvector::iterator *|GiNaC::epp *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__eta_SERIAL = {"_p_GiNaC__eta_SERIAL", "GiNaC::eta_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__ex = {"_p_GiNaC__ex", "GiNaC::ex *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__exp_SERIAL = {"_p_GiNaC__exp_SERIAL", "GiNaC::exp_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__expairseq = {"_p_GiNaC__expairseq", "GiNaC::expairseq *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__expand_options = {"_p_GiNaC__expand_options", "GiNaC::expand_options *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__factorial_SERIAL = {"_p_GiNaC__factorial_SERIAL", "GiNaC::factorial_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__function = {"_p_GiNaC__function", "GiNaC::function *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__function_options = {"_p_GiNaC__function_options", "GiNaC::function_options *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__idx = {"_p_GiNaC__idx", "GiNaC::idx *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__indexed = {"_p_GiNaC__indexed", "GiNaC::indexed *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__info_flags = {"_p_GiNaC__info_flags", "GiNaC::info_flags *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__integral = {"_p_GiNaC__integral", "GiNaC::integral *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__lgamma_SERIAL = {"_p_GiNaC__lgamma_SERIAL", "GiNaC::lgamma_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__log_SERIAL = {"_p_GiNaC__log_SERIAL", "GiNaC::log_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__map_function = {"_p_GiNaC__map_function", "GiNaC::map_function *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__matrix = {"_p_GiNaC__matrix", "GiNaC::matrix *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__minkmetric = {"_p_GiNaC__minkmetric", "GiNaC::minkmetric *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__mul = {"_p_GiNaC__mul", "GiNaC::mul *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__ncmul = {"_p_GiNaC__ncmul", "GiNaC::ncmul *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__numeric = {"_p_GiNaC__numeric", "GiNaC::numeric *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__power = {"_p_GiNaC__power", "GiNaC::power *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__print_context = {"_p_GiNaC__print_context", "GiNaC::print_context *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__pseries = {"_p_GiNaC__pseries", "GiNaC::pseries *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__refcounted = {"_p_GiNaC__refcounted", "GiNaC::refcounted *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__registered_class_options = {"_p_GiNaC__registered_class_options", "GiNaC::registered_class_options *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__relational = {"_p_GiNaC__relational", "GiNaC::relational *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__scalar_products = {"_p_GiNaC__scalar_products", "GiNaC::scalar_products *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__sin_SERIAL = {"_p_GiNaC__sin_SERIAL", "GiNaC::sin_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__sinh_SERIAL = {"_p_GiNaC__sinh_SERIAL", "GiNaC::sinh_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__spinidx = {"_p_GiNaC__spinidx", "GiNaC::spinidx *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__spinmetric = {"_p_GiNaC__spinmetric", "GiNaC::spinmetric *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__spmapkey = {"_p_GiNaC__spmapkey", "GiNaC::spmapkey *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__subs_options = {"_p_GiNaC__subs_options", "GiNaC::subs_options *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__symbol = {"_p_GiNaC__symbol", "GiNaC::symbol *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__symmetry = {"_p_GiNaC__symmetry", "GiNaC::symmetry *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__tan_SERIAL = {"_p_GiNaC__tan_SERIAL", "GiNaC::tan_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__tanh_SERIAL = {"_p_GiNaC__tanh_SERIAL", "GiNaC::tanh_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__tensdelta = {"_p_GiNaC__tensdelta", "GiNaC::tensdelta *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__tensepsilon = {"_p_GiNaC__tensepsilon", "GiNaC::tensepsilon *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__tensmetric = {"_p_GiNaC__tensmetric", "GiNaC::tensmetric *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__tensor = {"_p_GiNaC__tensor", "GiNaC::tensor *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__tgamma_SERIAL = {"_p_GiNaC__tgamma_SERIAL", "GiNaC::tgamma_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__varidx = {"_p_GiNaC__varidx", "GiNaC::varidx *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__visitor = {"_p_GiNaC__visitor", "GiNaC::visitor *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__wildcard = {"_p_GiNaC__wildcard", "GiNaC::wildcard *", 0, 0, 0};
static swig_type_info _swigt__p_GiNaC__zetaderiv_SERIAL = {"_p_GiNaC__zetaderiv_SERIAL", "GiNaC::zetaderiv_SERIAL *", 0, 0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *", 0, 0, 0};
static swig_type_info _swigt__p_class_infoTGiNaC__registered_class_options_t = {"_p_class_infoTGiNaC__registered_class_options_t", "class_info<GiNaC::registered_class_options > *|GiNaC::registered_class_info *", 0, 0, 0};
static swig_type_info _swigt__p_cln__cl_N = {"_p_cln__cl_N", "cln::cl_N *", 0, 0, 0};
static swig_type_info _swigt__p_conjugate_funcp_1 = {"_p_conjugate_funcp_1", "conjugate_funcp_1 *", 0, 0, 0};
static swig_type_info _swigt__p_conjugate_funcp_2 = {"_p_conjugate_funcp_2", "conjugate_funcp_2 *", 0, 0, 0};
static swig_type_info _swigt__p_conjugate_funcp_3 = {"_p_conjugate_funcp_3", "conjugate_funcp_3 *", 0, 0, 0};
static swig_type_info _swigt__p_conjugate_funcp_4 = {"_p_conjugate_funcp_4", "conjugate_funcp_4 *", 0, 0, 0};
static swig_type_info _swigt__p_conjugate_funcp_5 = {"_p_conjugate_funcp_5", "conjugate_funcp_5 *", 0, 0, 0};
static swig_type_info _swigt__p_conjugate_funcp_exvector = {"_p_conjugate_funcp_exvector", "conjugate_funcp_exvector *", 0, 0, 0};
static swig_type_info _swigt__p_derivative_funcp_1 = {"_p_derivative_funcp_1", "derivative_funcp_1 *", 0, 0, 0};
static swig_type_info _swigt__p_derivative_funcp_2 = {"_p_derivative_funcp_2", "derivative_funcp_2 *", 0, 0, 0};
static swig_type_info _swigt__p_derivative_funcp_3 = {"_p_derivative_funcp_3", "derivative_funcp_3 *", 0, 0, 0};
static swig_type_info _swigt__p_derivative_funcp_4 = {"_p_derivative_funcp_4", "derivative_funcp_4 *", 0, 0, 0};
static swig_type_info _swigt__p_derivative_funcp_5 = {"_p_derivative_funcp_5", "derivative_funcp_5 *", 0, 0, 0};
static swig_type_info _swigt__p_derivative_funcp_exvector = {"_p_derivative_funcp_exvector", "derivative_funcp_exvector *", 0, 0, 0};
static swig_type_info _swigt__p_eval_funcp_1 = {"_p_eval_funcp_1", "eval_funcp_1 *", 0, 0, 0};
static swig_type_info _swigt__p_eval_funcp_2 = {"_p_eval_funcp_2", "eval_funcp_2 *", 0, 0, 0};
static swig_type_info _swigt__p_eval_funcp_3 = {"_p_eval_funcp_3", "eval_funcp_3 *", 0, 0, 0};
static swig_type_info _swigt__p_eval_funcp_4 = {"_p_eval_funcp_4", "eval_funcp_4 *", 0, 0, 0};
static swig_type_info _swigt__p_eval_funcp_5 = {"_p_eval_funcp_5", "eval_funcp_5 *", 0, 0, 0};
static swig_type_info _swigt__p_eval_funcp_exvector = {"_p_eval_funcp_exvector", "eval_funcp_exvector *", 0, 0, 0};
static swig_type_info _swigt__p_evalf_funcp_1 = {"_p_evalf_funcp_1", "evalf_funcp_1 *", 0, 0, 0};
static swig_type_info _swigt__p_evalf_funcp_2 = {"_p_evalf_funcp_2", "evalf_funcp_2 *", 0, 0, 0};
static swig_type_info _swigt__p_evalf_funcp_3 = {"_p_evalf_funcp_3", "evalf_funcp_3 *", 0, 0, 0};
static swig_type_info _swigt__p_evalf_funcp_4 = {"_p_evalf_funcp_4", "evalf_funcp_4 *", 0, 0, 0};
static swig_type_info _swigt__p_evalf_funcp_5 = {"_p_evalf_funcp_5", "evalf_funcp_5 *", 0, 0, 0};
static swig_type_info _swigt__p_evalf_funcp_exvector = {"_p_evalf_funcp_exvector", "evalf_funcp_exvector *", 0, 0, 0};
static swig_type_info _swigt__p_evalffunctype = {"_p_evalffunctype", "evalffunctype *", 0, 0, 0};
static swig_type_info _swigt__p_exprseq = {"_p_exprseq", "exprseq *", 0, 0, 0};
static swig_type_info _swigt__p_exvector = {"_p_exvector", "exvector *", 0, 0, 0};
static swig_type_info _swigt__p_exvector__const_iterator = {"_p_exvector__const_iterator", "exvector::const_iterator *", 0, 0, 0};
static swig_type_info _swigt__p_exvector__iterator = {"_p_exvector__iterator", "exvector::iterator *", 0, 0, 0};
static swig_type_info _swigt__p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex = {"_p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex", "GiNaC::ex (*)(GiNaC::archive_node const &,lst &)|GiNaC::unarch_func", 0, 0, 0};
static swig_type_info _swigt__p_lst = {"_p_lst", "lst *", 0, 0, 0};
static swig_type_info _swigt__p_print_functor = {"_p_print_functor", "print_functor *", 0, 0, 0};
static swig_type_info _swigt__p_series_funcp_1 = {"_p_series_funcp_1", "series_funcp_1 *", 0, 0, 0};
static swig_type_info _swigt__p_series_funcp_2 = {"_p_series_funcp_2", "series_funcp_2 *", 0, 0, 0};
static swig_type_info _swigt__p_series_funcp_3 = {"_p_series_funcp_3", "series_funcp_3 *", 0, 0, 0};
static swig_type_info _swigt__p_series_funcp_4 = {"_p_series_funcp_4", "series_funcp_4 *", 0, 0, 0};
static swig_type_info _swigt__p_series_funcp_5 = {"_p_series_funcp_5", "series_funcp_5 *", 0, 0, 0};
static swig_type_info _swigt__p_series_funcp_exvector = {"_p_series_funcp_exvector", "series_funcp_exvector *", 0, 0, 0};
static swig_type_info _swigt__p_std__listTGiNaC__epvector__iterator_t = {"_p_std__listTGiNaC__epvector__iterator_t", "std::list<GiNaC::epvector::iterator > *|GiNaC::epplist *", 0, 0, 0};
static swig_type_info _swigt__p_std__logic_error = {"_p_std__logic_error", "std::logic_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t = {"_p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t", "std::map<GiNaC::ex,GiNaC::ex,GiNaC::ex_is_less > *|GiNaC::exmap *", 0, 0, 0};
static swig_type_info _swigt__p_std__mapTGiNaC__spmapkey_GiNaC__ex_t = {"_p_std__mapTGiNaC__spmapkey_GiNaC__ex_t", "std::map<GiNaC::spmapkey,GiNaC::ex > *|GiNaC::spmap *", 0, 0, 0};
static swig_type_info _swigt__p_std__runtime_error = {"_p_std__runtime_error", "std::runtime_error *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTexpair_t = {"_p_std__vectorTexpair_t", "std::vector<expair > *|GiNaC::epvector *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTprint_functor_t = {"_p_std__vectorTprint_functor_t", "std::vector<print_functor > *", 0, 0, 0};
static swig_type_info _swigt__p_std__vectorTstd__listTGiNaC__epvector__iterator_t_t = {"_p_std__vectorTstd__listTGiNaC__epvector__iterator_t_t", "std::vector<std::list<GiNaC::epvector::iterator > > *|GiNaC::epplistvector *", 0, 0, 0};
static swig_type_info _swigt__p_symmetry_type = {"_p_symmetry_type", "symmetry_type *", 0, 0, 0};
static swig_type_info _swigt__ptrdiff_t = {"_ptrdiff_t", "ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__size_t = {"_size_t", "size_t", 0, 0, 0};
static swig_type_info _swigt__std__ptrdiff_t = {"_std__ptrdiff_t", "std::ptrdiff_t", 0, 0, 0};
static swig_type_info _swigt__std__size_t = {"_std__size_t", "std::size_t", 0, 0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_GiNaC__H_SERIAL,
  &_swigt__p_GiNaC__Li2_SERIAL,
  &_swigt__p_GiNaC__Li3_SERIAL,
  &_swigt__p_GiNaC__Li_SERIAL,
  &_swigt__p_GiNaC__Order_SERIAL,
  &_swigt__p_GiNaC__S_SERIAL,
  &_swigt__p_GiNaC__abs_SERIAL,
  &_swigt__p_GiNaC__acos_SERIAL,
  &_swigt__p_GiNaC__acosh_SERIAL,
  &_swigt__p_GiNaC__add,
  &_swigt__p_GiNaC__asin_SERIAL,
  &_swigt__p_GiNaC__asinh_SERIAL,
  &_swigt__p_GiNaC__atan2_SERIAL,
  &_swigt__p_GiNaC__atan_SERIAL,
  &_swigt__p_GiNaC__atanh_SERIAL,
  &_swigt__p_GiNaC__basic,
  &_swigt__p_GiNaC__beta_SERIAL,
  &_swigt__p_GiNaC__binomial_SERIAL,
  &_swigt__p_GiNaC__clifford,
  &_swigt__p_GiNaC__cliffordunit,
  &_swigt__p_GiNaC__conjugate_function_SERIAL,
  &_swigt__p_GiNaC__constant,
  &_swigt__p_GiNaC__cos_SERIAL,
  &_swigt__p_GiNaC__cosh_SERIAL,
  &_swigt__p_GiNaC__csgn_SERIAL,
  &_swigt__p_GiNaC__determinant_algo,
  &_swigt__p_GiNaC__diracgamma,
  &_swigt__p_GiNaC__diracgamma5,
  &_swigt__p_GiNaC__diracgammaL,
  &_swigt__p_GiNaC__diracgammaR,
  &_swigt__p_GiNaC__diracone,
  &_swigt__p_GiNaC__do_taylor,
  &_swigt__p_GiNaC__epvector__iterator,
  &_swigt__p_GiNaC__eta_SERIAL,
  &_swigt__p_GiNaC__ex,
  &_swigt__p_GiNaC__exp_SERIAL,
  &_swigt__p_GiNaC__expairseq,
  &_swigt__p_GiNaC__expand_options,
  &_swigt__p_GiNaC__factorial_SERIAL,
  &_swigt__p_GiNaC__function,
  &_swigt__p_GiNaC__function_options,
  &_swigt__p_GiNaC__idx,
  &_swigt__p_GiNaC__indexed,
  &_swigt__p_GiNaC__info_flags,
  &_swigt__p_GiNaC__integral,
  &_swigt__p_GiNaC__lgamma_SERIAL,
  &_swigt__p_GiNaC__log_SERIAL,
  &_swigt__p_GiNaC__map_function,
  &_swigt__p_GiNaC__matrix,
  &_swigt__p_GiNaC__minkmetric,
  &_swigt__p_GiNaC__mul,
  &_swigt__p_GiNaC__ncmul,
  &_swigt__p_GiNaC__numeric,
  &_swigt__p_GiNaC__power,
  &_swigt__p_GiNaC__print_context,
  &_swigt__p_GiNaC__pseries,
  &_swigt__p_GiNaC__refcounted,
  &_swigt__p_GiNaC__registered_class_options,
  &_swigt__p_GiNaC__relational,
  &_swigt__p_GiNaC__scalar_products,
  &_swigt__p_GiNaC__sin_SERIAL,
  &_swigt__p_GiNaC__sinh_SERIAL,
  &_swigt__p_GiNaC__spinidx,
  &_swigt__p_GiNaC__spinmetric,
  &_swigt__p_GiNaC__spmapkey,
  &_swigt__p_GiNaC__subs_options,
  &_swigt__p_GiNaC__symbol,
  &_swigt__p_GiNaC__symmetry,
  &_swigt__p_GiNaC__tan_SERIAL,
  &_swigt__p_GiNaC__tanh_SERIAL,
  &_swigt__p_GiNaC__tensdelta,
  &_swigt__p_GiNaC__tensepsilon,
  &_swigt__p_GiNaC__tensmetric,
  &_swigt__p_GiNaC__tensor,
  &_swigt__p_GiNaC__tgamma_SERIAL,
  &_swigt__p_GiNaC__varidx,
  &_swigt__p_GiNaC__visitor,
  &_swigt__p_GiNaC__wildcard,
  &_swigt__p_GiNaC__zetaderiv_SERIAL,
  &_swigt__p_char,
  &_swigt__p_class_infoTGiNaC__registered_class_options_t,
  &_swigt__p_cln__cl_N,
  &_swigt__p_conjugate_funcp_1,
  &_swigt__p_conjugate_funcp_2,
  &_swigt__p_conjugate_funcp_3,
  &_swigt__p_conjugate_funcp_4,
  &_swigt__p_conjugate_funcp_5,
  &_swigt__p_conjugate_funcp_exvector,
  &_swigt__p_derivative_funcp_1,
  &_swigt__p_derivative_funcp_2,
  &_swigt__p_derivative_funcp_3,
  &_swigt__p_derivative_funcp_4,
  &_swigt__p_derivative_funcp_5,
  &_swigt__p_derivative_funcp_exvector,
  &_swigt__p_eval_funcp_1,
  &_swigt__p_eval_funcp_2,
  &_swigt__p_eval_funcp_3,
  &_swigt__p_eval_funcp_4,
  &_swigt__p_eval_funcp_5,
  &_swigt__p_eval_funcp_exvector,
  &_swigt__p_evalf_funcp_1,
  &_swigt__p_evalf_funcp_2,
  &_swigt__p_evalf_funcp_3,
  &_swigt__p_evalf_funcp_4,
  &_swigt__p_evalf_funcp_5,
  &_swigt__p_evalf_funcp_exvector,
  &_swigt__p_evalffunctype,
  &_swigt__p_exprseq,
  &_swigt__p_exvector,
  &_swigt__p_exvector__const_iterator,
  &_swigt__p_exvector__iterator,
  &_swigt__p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex,
  &_swigt__p_lst,
  &_swigt__p_print_functor,
  &_swigt__p_series_funcp_1,
  &_swigt__p_series_funcp_2,
  &_swigt__p_series_funcp_3,
  &_swigt__p_series_funcp_4,
  &_swigt__p_series_funcp_5,
  &_swigt__p_series_funcp_exvector,
  &_swigt__p_std__listTGiNaC__epvector__iterator_t,
  &_swigt__p_std__logic_error,
  &_swigt__p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t,
  &_swigt__p_std__mapTGiNaC__spmapkey_GiNaC__ex_t,
  &_swigt__p_std__runtime_error,
  &_swigt__p_std__vectorTexpair_t,
  &_swigt__p_std__vectorTprint_functor_t,
  &_swigt__p_std__vectorTstd__listTGiNaC__epvector__iterator_t_t,
  &_swigt__p_symmetry_type,
  &_swigt__ptrdiff_t,
  &_swigt__size_t,
  &_swigt__std__ptrdiff_t,
  &_swigt__std__size_t,
};

static swig_cast_info _swigc__p_GiNaC__H_SERIAL[] = {  {&_swigt__p_GiNaC__H_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__Li2_SERIAL[] = {  {&_swigt__p_GiNaC__Li2_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__Li3_SERIAL[] = {  {&_swigt__p_GiNaC__Li3_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__Li_SERIAL[] = {  {&_swigt__p_GiNaC__Li_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__Order_SERIAL[] = {  {&_swigt__p_GiNaC__Order_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__S_SERIAL[] = {  {&_swigt__p_GiNaC__S_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__abs_SERIAL[] = {  {&_swigt__p_GiNaC__abs_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__acos_SERIAL[] = {  {&_swigt__p_GiNaC__acos_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__acosh_SERIAL[] = {  {&_swigt__p_GiNaC__acosh_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__add[] = {  {&_swigt__p_GiNaC__add, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__asin_SERIAL[] = {  {&_swigt__p_GiNaC__asin_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__asinh_SERIAL[] = {  {&_swigt__p_GiNaC__asinh_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__atan2_SERIAL[] = {  {&_swigt__p_GiNaC__atan2_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__atan_SERIAL[] = {  {&_swigt__p_GiNaC__atan_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__atanh_SERIAL[] = {  {&_swigt__p_GiNaC__atanh_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__basic[] = {  {&_swigt__p_GiNaC__pseries, _p_GiNaC__pseriesTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__basic, 0, 0, 0},  {&_swigt__p_GiNaC__constant, _p_GiNaC__constantTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__spinmetric, _p_GiNaC__spinmetricTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__mul, _p_GiNaC__mulTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__ncmul, _p_GiNaC__ncmulTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__tensdelta, _p_GiNaC__tensdeltaTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__diracgamma, _p_GiNaC__diracgammaTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__diracgamma5, _p_GiNaC__diracgamma5To_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__symbol, _p_GiNaC__symbolTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__wildcard, _p_GiNaC__wildcardTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__varidx, _p_GiNaC__varidxTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__minkmetric, _p_GiNaC__minkmetricTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__tensmetric, _p_GiNaC__tensmetricTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__tensor, _p_GiNaC__tensorTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__function, _p_GiNaC__functionTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__clifford, _p_GiNaC__cliffordTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__integral, _p_GiNaC__integralTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__indexed, _p_GiNaC__indexedTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__cliffordunit, _p_GiNaC__cliffordunitTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__tensepsilon, _p_GiNaC__tensepsilonTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__diracgammaL, _p_GiNaC__diracgammaLTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__numeric, _p_GiNaC__numericTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__symmetry, _p_GiNaC__symmetryTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__add, _p_GiNaC__addTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__matrix, _p_GiNaC__matrixTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__relational, _p_GiNaC__relationalTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__idx, _p_GiNaC__idxTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__diracgammaR, _p_GiNaC__diracgammaRTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__power, _p_GiNaC__powerTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__expairseq, _p_GiNaC__expairseqTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__spinidx, _p_GiNaC__spinidxTo_p_GiNaC__basic, 0, 0},  {&_swigt__p_GiNaC__diracone, _p_GiNaC__diraconeTo_p_GiNaC__basic, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__beta_SERIAL[] = {  {&_swigt__p_GiNaC__beta_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__binomial_SERIAL[] = {  {&_swigt__p_GiNaC__binomial_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__clifford[] = {  {&_swigt__p_GiNaC__clifford, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__cliffordunit[] = {  {&_swigt__p_GiNaC__cliffordunit, 0, 0, 0},  {&_swigt__p_GiNaC__diracgamma, _p_GiNaC__diracgammaTo_p_GiNaC__cliffordunit, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__conjugate_function_SERIAL[] = {  {&_swigt__p_GiNaC__conjugate_function_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__constant[] = {  {&_swigt__p_GiNaC__constant, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__cos_SERIAL[] = {  {&_swigt__p_GiNaC__cos_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__cosh_SERIAL[] = {  {&_swigt__p_GiNaC__cosh_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__csgn_SERIAL[] = {  {&_swigt__p_GiNaC__csgn_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__determinant_algo[] = {  {&_swigt__p_GiNaC__determinant_algo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__diracgamma[] = {  {&_swigt__p_GiNaC__diracgamma, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__diracgamma5[] = {  {&_swigt__p_GiNaC__diracgamma5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__diracgammaL[] = {  {&_swigt__p_GiNaC__diracgammaL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__diracgammaR[] = {  {&_swigt__p_GiNaC__diracgammaR, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__diracone[] = {  {&_swigt__p_GiNaC__diracone, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__do_taylor[] = {  {&_swigt__p_GiNaC__do_taylor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__epvector__iterator[] = {  {&_swigt__p_GiNaC__epvector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__eta_SERIAL[] = {  {&_swigt__p_GiNaC__eta_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__ex[] = {  {&_swigt__p_GiNaC__ex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__exp_SERIAL[] = {  {&_swigt__p_GiNaC__exp_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__expairseq[] = {  {&_swigt__p_GiNaC__add, _p_GiNaC__addTo_p_GiNaC__expairseq, 0, 0},  {&_swigt__p_GiNaC__mul, _p_GiNaC__mulTo_p_GiNaC__expairseq, 0, 0},  {&_swigt__p_GiNaC__expairseq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__expand_options[] = {  {&_swigt__p_GiNaC__expand_options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__factorial_SERIAL[] = {  {&_swigt__p_GiNaC__factorial_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__function[] = {  {&_swigt__p_GiNaC__function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__function_options[] = {  {&_swigt__p_GiNaC__function_options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__idx[] = {  {&_swigt__p_GiNaC__idx, 0, 0, 0},  {&_swigt__p_GiNaC__varidx, _p_GiNaC__varidxTo_p_GiNaC__idx, 0, 0},  {&_swigt__p_GiNaC__spinidx, _p_GiNaC__spinidxTo_p_GiNaC__idx, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__indexed[] = {  {&_swigt__p_GiNaC__clifford, _p_GiNaC__cliffordTo_p_GiNaC__indexed, 0, 0},  {&_swigt__p_GiNaC__indexed, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__info_flags[] = {  {&_swigt__p_GiNaC__info_flags, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__integral[] = {  {&_swigt__p_GiNaC__integral, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__lgamma_SERIAL[] = {  {&_swigt__p_GiNaC__lgamma_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__log_SERIAL[] = {  {&_swigt__p_GiNaC__log_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__map_function[] = {  {&_swigt__p_GiNaC__map_function, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__matrix[] = {  {&_swigt__p_GiNaC__matrix, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__minkmetric[] = {  {&_swigt__p_GiNaC__minkmetric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__mul[] = {  {&_swigt__p_GiNaC__mul, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__ncmul[] = {  {&_swigt__p_GiNaC__ncmul, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__numeric[] = {  {&_swigt__p_GiNaC__numeric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__power[] = {  {&_swigt__p_GiNaC__power, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__print_context[] = {  {&_swigt__p_GiNaC__print_context, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__pseries[] = {  {&_swigt__p_GiNaC__pseries, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__refcounted[] = {  {&_swigt__p_GiNaC__diracgamma5, _p_GiNaC__diracgamma5To_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__spinmetric, _p_GiNaC__spinmetricTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__integral, _p_GiNaC__integralTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__tensor, _p_GiNaC__tensorTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__wildcard, _p_GiNaC__wildcardTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__constant, _p_GiNaC__constantTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__symbol, _p_GiNaC__symbolTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__numeric, _p_GiNaC__numericTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__power, _p_GiNaC__powerTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__symmetry, _p_GiNaC__symmetryTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__refcounted, 0, 0, 0},  {&_swigt__p_GiNaC__diracgamma, _p_GiNaC__diracgammaTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__spinidx, _p_GiNaC__spinidxTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__basic, _p_GiNaC__basicTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__idx, _p_GiNaC__idxTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__add, _p_GiNaC__addTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__tensepsilon, _p_GiNaC__tensepsilonTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__expairseq, _p_GiNaC__expairseqTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__mul, _p_GiNaC__mulTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__tensdelta, _p_GiNaC__tensdeltaTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__relational, _p_GiNaC__relationalTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__diracone, _p_GiNaC__diraconeTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__diracgammaL, _p_GiNaC__diracgammaLTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__indexed, _p_GiNaC__indexedTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__matrix, _p_GiNaC__matrixTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__tensmetric, _p_GiNaC__tensmetricTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__minkmetric, _p_GiNaC__minkmetricTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__diracgammaR, _p_GiNaC__diracgammaRTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__clifford, _p_GiNaC__cliffordTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__ncmul, _p_GiNaC__ncmulTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__function, _p_GiNaC__functionTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__cliffordunit, _p_GiNaC__cliffordunitTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__pseries, _p_GiNaC__pseriesTo_p_GiNaC__refcounted, 0, 0},  {&_swigt__p_GiNaC__varidx, _p_GiNaC__varidxTo_p_GiNaC__refcounted, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__registered_class_options[] = {  {&_swigt__p_GiNaC__registered_class_options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__relational[] = {  {&_swigt__p_GiNaC__relational, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__scalar_products[] = {  {&_swigt__p_GiNaC__scalar_products, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__sin_SERIAL[] = {  {&_swigt__p_GiNaC__sin_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__sinh_SERIAL[] = {  {&_swigt__p_GiNaC__sinh_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__spinidx[] = {  {&_swigt__p_GiNaC__spinidx, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__spinmetric[] = {  {&_swigt__p_GiNaC__spinmetric, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__spmapkey[] = {  {&_swigt__p_GiNaC__spmapkey, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__subs_options[] = {  {&_swigt__p_GiNaC__subs_options, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__symbol[] = {  {&_swigt__p_GiNaC__symbol, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__symmetry[] = {  {&_swigt__p_GiNaC__symmetry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__tan_SERIAL[] = {  {&_swigt__p_GiNaC__tan_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__tanh_SERIAL[] = {  {&_swigt__p_GiNaC__tanh_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__tensdelta[] = {  {&_swigt__p_GiNaC__tensdelta, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__tensepsilon[] = {  {&_swigt__p_GiNaC__tensepsilon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__tensmetric[] = {  {&_swigt__p_GiNaC__tensmetric, 0, 0, 0},  {&_swigt__p_GiNaC__minkmetric, _p_GiNaC__minkmetricTo_p_GiNaC__tensmetric, 0, 0},  {&_swigt__p_GiNaC__spinmetric, _p_GiNaC__spinmetricTo_p_GiNaC__tensmetric, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__tensor[] = {  {&_swigt__p_GiNaC__cliffordunit, _p_GiNaC__cliffordunitTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__tensdelta, _p_GiNaC__tensdeltaTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__diracgamma5, _p_GiNaC__diracgamma5To_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__tensepsilon, _p_GiNaC__tensepsilonTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__diracgammaR, _p_GiNaC__diracgammaRTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__diracgammaL, _p_GiNaC__diracgammaLTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__tensor, 0, 0, 0},  {&_swigt__p_GiNaC__tensmetric, _p_GiNaC__tensmetricTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__minkmetric, _p_GiNaC__minkmetricTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__diracone, _p_GiNaC__diraconeTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__diracgamma, _p_GiNaC__diracgammaTo_p_GiNaC__tensor, 0, 0},  {&_swigt__p_GiNaC__spinmetric, _p_GiNaC__spinmetricTo_p_GiNaC__tensor, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__tgamma_SERIAL[] = {  {&_swigt__p_GiNaC__tgamma_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__varidx[] = {  {&_swigt__p_GiNaC__varidx, 0, 0, 0},  {&_swigt__p_GiNaC__spinidx, _p_GiNaC__spinidxTo_p_GiNaC__varidx, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__visitor[] = {  {&_swigt__p_GiNaC__visitor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__wildcard[] = {  {&_swigt__p_GiNaC__wildcard, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_GiNaC__zetaderiv_SERIAL[] = {  {&_swigt__p_GiNaC__zetaderiv_SERIAL, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_class_infoTGiNaC__registered_class_options_t[] = {  {&_swigt__p_class_infoTGiNaC__registered_class_options_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_cln__cl_N[] = {  {&_swigt__p_cln__cl_N, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_conjugate_funcp_1[] = {  {&_swigt__p_conjugate_funcp_1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_conjugate_funcp_2[] = {  {&_swigt__p_conjugate_funcp_2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_conjugate_funcp_3[] = {  {&_swigt__p_conjugate_funcp_3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_conjugate_funcp_4[] = {  {&_swigt__p_conjugate_funcp_4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_conjugate_funcp_5[] = {  {&_swigt__p_conjugate_funcp_5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_conjugate_funcp_exvector[] = {  {&_swigt__p_conjugate_funcp_exvector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_derivative_funcp_1[] = {  {&_swigt__p_derivative_funcp_1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_derivative_funcp_2[] = {  {&_swigt__p_derivative_funcp_2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_derivative_funcp_3[] = {  {&_swigt__p_derivative_funcp_3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_derivative_funcp_4[] = {  {&_swigt__p_derivative_funcp_4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_derivative_funcp_5[] = {  {&_swigt__p_derivative_funcp_5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_derivative_funcp_exvector[] = {  {&_swigt__p_derivative_funcp_exvector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eval_funcp_1[] = {  {&_swigt__p_eval_funcp_1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eval_funcp_2[] = {  {&_swigt__p_eval_funcp_2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eval_funcp_3[] = {  {&_swigt__p_eval_funcp_3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eval_funcp_4[] = {  {&_swigt__p_eval_funcp_4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eval_funcp_5[] = {  {&_swigt__p_eval_funcp_5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_eval_funcp_exvector[] = {  {&_swigt__p_eval_funcp_exvector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_evalf_funcp_1[] = {  {&_swigt__p_evalf_funcp_1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_evalf_funcp_2[] = {  {&_swigt__p_evalf_funcp_2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_evalf_funcp_3[] = {  {&_swigt__p_evalf_funcp_3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_evalf_funcp_4[] = {  {&_swigt__p_evalf_funcp_4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_evalf_funcp_5[] = {  {&_swigt__p_evalf_funcp_5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_evalf_funcp_exvector[] = {  {&_swigt__p_evalf_funcp_exvector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_evalffunctype[] = {  {&_swigt__p_evalffunctype, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_exprseq[] = {  {&_swigt__p_exprseq, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_exvector[] = {  {&_swigt__p_exvector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_exvector__const_iterator[] = {  {&_swigt__p_exvector__const_iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_exvector__iterator[] = {  {&_swigt__p_exvector__iterator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex[] = {  {&_swigt__p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_lst[] = {  {&_swigt__p_lst, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_print_functor[] = {  {&_swigt__p_print_functor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_series_funcp_1[] = {  {&_swigt__p_series_funcp_1, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_series_funcp_2[] = {  {&_swigt__p_series_funcp_2, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_series_funcp_3[] = {  {&_swigt__p_series_funcp_3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_series_funcp_4[] = {  {&_swigt__p_series_funcp_4, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_series_funcp_5[] = {  {&_swigt__p_series_funcp_5, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_series_funcp_exvector[] = {  {&_swigt__p_series_funcp_exvector, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__listTGiNaC__epvector__iterator_t[] = {  {&_swigt__p_std__listTGiNaC__epvector__iterator_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__logic_error[] = {  {&_swigt__p_std__logic_error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t[] = {  {&_swigt__p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapTGiNaC__spmapkey_GiNaC__ex_t[] = {  {&_swigt__p_std__mapTGiNaC__spmapkey_GiNaC__ex_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__runtime_error[] = {  {&_swigt__p_std__runtime_error, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTexpair_t[] = {  {&_swigt__p_std__vectorTexpair_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTprint_functor_t[] = {  {&_swigt__p_std__vectorTprint_functor_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorTstd__listTGiNaC__epvector__iterator_t_t[] = {  {&_swigt__p_std__vectorTstd__listTGiNaC__epvector__iterator_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_symmetry_type[] = {  {&_swigt__p_symmetry_type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__ptrdiff_t[] = {  {&_swigt__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__size_t[] = {  {&_swigt__size_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__ptrdiff_t[] = {  {&_swigt__std__ptrdiff_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__std__size_t[] = {  {&_swigt__std__size_t, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_GiNaC__H_SERIAL,
  _swigc__p_GiNaC__Li2_SERIAL,
  _swigc__p_GiNaC__Li3_SERIAL,
  _swigc__p_GiNaC__Li_SERIAL,
  _swigc__p_GiNaC__Order_SERIAL,
  _swigc__p_GiNaC__S_SERIAL,
  _swigc__p_GiNaC__abs_SERIAL,
  _swigc__p_GiNaC__acos_SERIAL,
  _swigc__p_GiNaC__acosh_SERIAL,
  _swigc__p_GiNaC__add,
  _swigc__p_GiNaC__asin_SERIAL,
  _swigc__p_GiNaC__asinh_SERIAL,
  _swigc__p_GiNaC__atan2_SERIAL,
  _swigc__p_GiNaC__atan_SERIAL,
  _swigc__p_GiNaC__atanh_SERIAL,
  _swigc__p_GiNaC__basic,
  _swigc__p_GiNaC__beta_SERIAL,
  _swigc__p_GiNaC__binomial_SERIAL,
  _swigc__p_GiNaC__clifford,
  _swigc__p_GiNaC__cliffordunit,
  _swigc__p_GiNaC__conjugate_function_SERIAL,
  _swigc__p_GiNaC__constant,
  _swigc__p_GiNaC__cos_SERIAL,
  _swigc__p_GiNaC__cosh_SERIAL,
  _swigc__p_GiNaC__csgn_SERIAL,
  _swigc__p_GiNaC__determinant_algo,
  _swigc__p_GiNaC__diracgamma,
  _swigc__p_GiNaC__diracgamma5,
  _swigc__p_GiNaC__diracgammaL,
  _swigc__p_GiNaC__diracgammaR,
  _swigc__p_GiNaC__diracone,
  _swigc__p_GiNaC__do_taylor,
  _swigc__p_GiNaC__epvector__iterator,
  _swigc__p_GiNaC__eta_SERIAL,
  _swigc__p_GiNaC__ex,
  _swigc__p_GiNaC__exp_SERIAL,
  _swigc__p_GiNaC__expairseq,
  _swigc__p_GiNaC__expand_options,
  _swigc__p_GiNaC__factorial_SERIAL,
  _swigc__p_GiNaC__function,
  _swigc__p_GiNaC__function_options,
  _swigc__p_GiNaC__idx,
  _swigc__p_GiNaC__indexed,
  _swigc__p_GiNaC__info_flags,
  _swigc__p_GiNaC__integral,
  _swigc__p_GiNaC__lgamma_SERIAL,
  _swigc__p_GiNaC__log_SERIAL,
  _swigc__p_GiNaC__map_function,
  _swigc__p_GiNaC__matrix,
  _swigc__p_GiNaC__minkmetric,
  _swigc__p_GiNaC__mul,
  _swigc__p_GiNaC__ncmul,
  _swigc__p_GiNaC__numeric,
  _swigc__p_GiNaC__power,
  _swigc__p_GiNaC__print_context,
  _swigc__p_GiNaC__pseries,
  _swigc__p_GiNaC__refcounted,
  _swigc__p_GiNaC__registered_class_options,
  _swigc__p_GiNaC__relational,
  _swigc__p_GiNaC__scalar_products,
  _swigc__p_GiNaC__sin_SERIAL,
  _swigc__p_GiNaC__sinh_SERIAL,
  _swigc__p_GiNaC__spinidx,
  _swigc__p_GiNaC__spinmetric,
  _swigc__p_GiNaC__spmapkey,
  _swigc__p_GiNaC__subs_options,
  _swigc__p_GiNaC__symbol,
  _swigc__p_GiNaC__symmetry,
  _swigc__p_GiNaC__tan_SERIAL,
  _swigc__p_GiNaC__tanh_SERIAL,
  _swigc__p_GiNaC__tensdelta,
  _swigc__p_GiNaC__tensepsilon,
  _swigc__p_GiNaC__tensmetric,
  _swigc__p_GiNaC__tensor,
  _swigc__p_GiNaC__tgamma_SERIAL,
  _swigc__p_GiNaC__varidx,
  _swigc__p_GiNaC__visitor,
  _swigc__p_GiNaC__wildcard,
  _swigc__p_GiNaC__zetaderiv_SERIAL,
  _swigc__p_char,
  _swigc__p_class_infoTGiNaC__registered_class_options_t,
  _swigc__p_cln__cl_N,
  _swigc__p_conjugate_funcp_1,
  _swigc__p_conjugate_funcp_2,
  _swigc__p_conjugate_funcp_3,
  _swigc__p_conjugate_funcp_4,
  _swigc__p_conjugate_funcp_5,
  _swigc__p_conjugate_funcp_exvector,
  _swigc__p_derivative_funcp_1,
  _swigc__p_derivative_funcp_2,
  _swigc__p_derivative_funcp_3,
  _swigc__p_derivative_funcp_4,
  _swigc__p_derivative_funcp_5,
  _swigc__p_derivative_funcp_exvector,
  _swigc__p_eval_funcp_1,
  _swigc__p_eval_funcp_2,
  _swigc__p_eval_funcp_3,
  _swigc__p_eval_funcp_4,
  _swigc__p_eval_funcp_5,
  _swigc__p_eval_funcp_exvector,
  _swigc__p_evalf_funcp_1,
  _swigc__p_evalf_funcp_2,
  _swigc__p_evalf_funcp_3,
  _swigc__p_evalf_funcp_4,
  _swigc__p_evalf_funcp_5,
  _swigc__p_evalf_funcp_exvector,
  _swigc__p_evalffunctype,
  _swigc__p_exprseq,
  _swigc__p_exvector,
  _swigc__p_exvector__const_iterator,
  _swigc__p_exvector__iterator,
  _swigc__p_f_r_q_const__GiNaC__archive_node_r_lst__GiNaC__ex,
  _swigc__p_lst,
  _swigc__p_print_functor,
  _swigc__p_series_funcp_1,
  _swigc__p_series_funcp_2,
  _swigc__p_series_funcp_3,
  _swigc__p_series_funcp_4,
  _swigc__p_series_funcp_5,
  _swigc__p_series_funcp_exvector,
  _swigc__p_std__listTGiNaC__epvector__iterator_t,
  _swigc__p_std__logic_error,
  _swigc__p_std__mapTGiNaC__ex_GiNaC__ex_GiNaC__ex_is_less_t,
  _swigc__p_std__mapTGiNaC__spmapkey_GiNaC__ex_t,
  _swigc__p_std__runtime_error,
  _swigc__p_std__vectorTexpair_t,
  _swigc__p_std__vectorTprint_functor_t,
  _swigc__p_std__vectorTstd__listTGiNaC__epvector__iterator_t_t,
  _swigc__p_symmetry_type,
  _swigc__ptrdiff_t,
  _swigc__size_t,
  _swigc__std__ptrdiff_t,
  _swigc__std__size_t,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

static swig_const_info swig_const_table[] = {
{0, 0, 0, 0.0, 0, 0}};

#ifdef __cplusplus
}
#endif
/*************************************************************************
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.

 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop though that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.

 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
**/

#ifdef __cplusplus
extern "C" {
#endif
    
    SWIGRUNTIME void
    SWIG_InitializeModule(void *clientdata) {
        swig_type_info *type, *ret;
        swig_cast_info *cast;
        size_t i;
        swig_module_info *module_head;
        static int init_run = 0;
        
        clientdata = clientdata;
        
        if (init_run) return;
        init_run = 1;
        
        /* Initialize the swig_module */
        swig_module.type_initial = swig_type_initial;
        swig_module.cast_initial = swig_cast_initial;
        
        /* Try and load any already created modules */
        module_head = SWIG_GetModule(clientdata);
        if (module_head) {
            swig_module.next = module_head->next;
            module_head->next = &swig_module;
        } else {
            /* This is the first module loaded */
            swig_module.next = &swig_module;
            SWIG_SetModule(clientdata, &swig_module);
        }
        
        /* Now work on filling in swig_module.types */
        for (i = 0; i < swig_module.size; ++i) {
            type = 0;
            
            /* if there is another module already loaded */
            if (swig_module.next != &swig_module) {
                type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
            }
            if (type) {
                /* Overwrite clientdata field */
                if (swig_module.type_initial[i]->clientdata) type->clientdata = swig_module.type_initial[i]->clientdata;
            } else {
                type = swig_module.type_initial[i];
            }
            
            /* Insert casting types */
            cast = swig_module.cast_initial[i];
            while (cast->type) {
                /* Don't need to add information already in the list */
                ret = 0;
                if (swig_module.next != &swig_module) {
                    ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
                }
                if (ret && type == swig_module.type_initial[i]) {
                    cast->type = ret;
                    ret = 0;
                }
                
                if (!ret) {
                    if (type->cast) {
                        type->cast->prev = cast;
                        cast->next = type->cast;
                    }
                    type->cast = cast;
                }
                
                cast++;
            }
            
            /* Set entry in modules->types array equal to the type */
            swig_module.types[i] = type;
        }
    }
    
    /* This function will propagate the clientdata field of type to
    * any new swig_type_info structures that have been added into the list
    * of equivalent types.  It is like calling
    * SWIG_TypeClientData(type, clientdata) a second time.
    */
    SWIGRUNTIME void
    SWIG_PropagateClientData(void) {
        size_t i;
        swig_cast_info *equiv;
        static int init_run = 0;
        
        if (init_run) return;
        init_run = 1;
        
        for (i = 0; i < swig_module.size; i++) {
            if (swig_module.types[i]->clientdata) {
                equiv = swig_module.types[i]->cast;
                while (equiv) {
                    if (!equiv->converter) {
                        if (equiv->type && !equiv->type->clientdata)
                        SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
                    }
                    equiv = equiv->next;
                }
            }
        }
    }
    
#ifdef __cplusplus
}
#endif



#ifdef __cplusplus
extern "C" {
#endif
    
    /* Python-specific SWIG API */
#define SWIG_newvarlink()                             SWIG_Python_newvarlink()
#define SWIG_addvarlink(p, name, get_attr, set_attr)  SWIG_Python_addvarlink(p, name, get_attr, set_attr)
#define SWIG_InstallConstants(d, constants)           SWIG_Python_InstallConstants(d, constants)
    
    /* -----------------------------------------------------------------------------
     * global variable support code.
     * ----------------------------------------------------------------------------- */
    
    typedef struct swig_globalvar {
        char       *name;                  /* Name of global variable */
        PyObject *(*get_attr)(void);       /* Return the current value */
        int       (*set_attr)(PyObject *); /* Set the value */
        struct swig_globalvar *next;
    } swig_globalvar;
    
    typedef struct swig_varlinkobject {
        PyObject_HEAD
        swig_globalvar *vars;
    } swig_varlinkobject;
    
    SWIGINTERN PyObject *
    swig_varlink_repr(swig_varlinkobject *v) {
        v = v;
        return PyString_FromString("<Swig global variables>");
    }
    
    SWIGINTERN int
    swig_varlink_print(swig_varlinkobject *v, FILE *fp, int flags) {
        swig_globalvar  *var;
        flags = flags;
        fprintf(fp,"Swig global variables { ");
        for (var = v->vars; var; var=var->next) {
            fprintf(fp,"%s", var->name);
            if (var->next) fprintf(fp,", ");
        }
        fprintf(fp," }\n");
        return 0;
    }
    
    SWIGINTERN PyObject *
    swig_varlink_getattr(swig_varlinkobject *v, char *n) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->get_attr)();
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return NULL;
    }
    
    SWIGINTERN int
    swig_varlink_setattr(swig_varlinkobject *v, char *n, PyObject *p) {
        swig_globalvar *var = v->vars;
        while (var) {
            if (strcmp(var->name,n) == 0) {
                return (*var->set_attr)(p);
            }
            var = var->next;
        }
        PyErr_SetString(PyExc_NameError,"Unknown C global variable");
        return 1;
    }
    
    SWIGINTERN PyTypeObject*
    swig_varlink_type(void) {
        static char varlink__doc__[] = "Swig var link object";
        static PyTypeObject varlink_type
#if !defined(__cplusplus)
        ;
        static int type_init = 0;  
        if (!type_init) {
            PyTypeObject tmp
#endif
            = {
                PyObject_HEAD_INIT(&PyType_Type)
                0,                                  /* Number of items in variable part (ob_size) */
                (char *)"swigvarlink",              /* Type name (tp_name) */
                sizeof(swig_varlinkobject),         /* Basic size (tp_basicsize) */
                0,                                  /* Itemsize (tp_itemsize) */
                0,                                  /* Deallocator (tp_dealloc) */ 
                (printfunc) swig_varlink_print,     /* Print (tp_print) */
                (getattrfunc) swig_varlink_getattr, /* get attr (tp_getattr) */
                (setattrfunc) swig_varlink_setattr, /* Set attr (tp_setattr) */
                0,                                  /* tp_compare */
                (reprfunc) swig_varlink_repr,       /* tp_repr */
                0,                                  /* tp_as_number */
                0,                                  /* tp_as_sequence */
                0,                                  /* tp_as_mapping */
                0,                                  /* tp_hash */
                0,                                  /* tp_call */
                0,                                  /* tp_str */
                0,                                  /* tp_getattro */
                0,                                  /* tp_setattro */
                0,                                  /* tp_as_buffer */
                0,                                  /* tp_flags */
                varlink__doc__,                     /* tp_doc */
#if PY_VERSION_HEX >= 0x02000000
                0,                                  /* tp_traverse */
                0,                                  /* tp_clear */
#endif
#if PY_VERSION_HEX >= 0x02010000
                0,                                  /* tp_richcompare */
                0,                                  /* tp_weaklistoffset */
#endif
#if PY_VERSION_HEX >= 0x02020000
                0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0, /* tp_iter -> tp_weaklist */
#endif
#if PY_VERSION_HEX >= 0x02030000
                0,                                  /* tp_del */
#endif
#ifdef COUNT_ALLOCS
                0,0,0,0                             /* tp_alloc -> tp_next */
#endif
            };
#if !defined(__cplusplus)
            varlink_type = tmp;
            type_init = 1;
        }
#endif
        return &varlink_type;
    }
    
    /* Create a variable linking object for use later */
    SWIGINTERN PyObject *
    SWIG_Python_newvarlink(void) {
        swig_varlinkobject *result = PyObject_NEW(swig_varlinkobject, swig_varlink_type());
        if (result) {
            result->vars = 0;
        }
        return ((PyObject*) result);
    }
    
    SWIGINTERN void 
    SWIG_Python_addvarlink(PyObject *p, char *name, PyObject *(*get_attr)(void), int (*set_attr)(PyObject *p)) {
        swig_varlinkobject *v = (swig_varlinkobject *) p;
        swig_globalvar *gv = (swig_globalvar *) malloc(sizeof(swig_globalvar));
        if (gv) {
            size_t size = strlen(name)+1;
            gv->name = (char *)malloc(size);
            if (gv->name) {
                strncpy(gv->name,name,size);
                gv->get_attr = get_attr;
                gv->set_attr = set_attr;
                gv->next = v->vars;
            }
        }
        v->vars = gv;
    }
    
    /* -----------------------------------------------------------------------------
     * constants/methods manipulation
     * ----------------------------------------------------------------------------- */
    
    /* Install Constants */
    SWIGINTERN void
    SWIG_Python_InstallConstants(PyObject *d, swig_const_info constants[]) {
        PyObject *obj = 0;
        size_t i;
        for (i = 0; constants[i].type; ++i) {
            switch(constants[i].type) {
                case SWIG_PY_INT:
                obj = PyInt_FromLong(constants[i].lvalue);
                break;
                case SWIG_PY_FLOAT:
                obj = PyFloat_FromDouble(constants[i].dvalue);
                break;
                case SWIG_PY_STRING:
                if (constants[i].pvalue) {
                    obj = PyString_FromString((char *) constants[i].pvalue);
                } else {
                    Py_INCREF(Py_None);
                    obj = Py_None;
                }
                break;
                case SWIG_PY_POINTER:
                obj = SWIG_NewPointerObj(constants[i].pvalue, *(constants[i]).ptype,0);
                break;
                case SWIG_PY_BINARY:
                obj = SWIG_NewPackedObj(constants[i].pvalue, constants[i].lvalue, *(constants[i].ptype));
                break;
                default:
                obj = 0;
                break;
            }
            if (obj) {
                PyDict_SetItemString(d,constants[i].name,obj);
                Py_DECREF(obj);
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*/
    /* Fix SwigMethods to carry the callback ptrs when needed */
    /* -----------------------------------------------------------------------------*/
    
    SWIGINTERN void
    SWIG_Python_FixMethods(PyMethodDef *methods,
    swig_const_info *const_table,
    swig_type_info **types,
    swig_type_info **types_initial) {
        size_t i;
        for (i = 0; methods[i].ml_name; ++i) {
            char *c = methods[i].ml_doc;
            if (c && (c = strstr(c, "swig_ptr: "))) {
                int j;
                swig_const_info *ci = 0;
                char *name = c + 10;
                for (j = 0; const_table[j].type; ++j) {
                    if (strncmp(const_table[j].name, name, 
                    strlen(const_table[j].name)) == 0) {
                        ci = &(const_table[j]);
                        break;
                    }
                }
                if (ci) {
                    size_t shift = (ci->ptype) - types;
                    swig_type_info *ty = types_initial[shift];
                    size_t ldoc = (c - methods[i].ml_doc);
                    size_t lptr = strlen(ty->name)+2*sizeof(void*)+2;
                    char *ndoc = (char*)malloc(ldoc + lptr + 10);
                    if (ndoc) {
                        char *buff = ndoc;
                        void *ptr = (ci->type == SWIG_PY_POINTER) ? ci->pvalue : 0;
                        if (ptr) {
                            strncpy(buff, methods[i].ml_doc, ldoc);
                            buff += ldoc;
                            strncpy(buff, "swig_ptr: ", 10);
                            buff += 10;
                            SWIG_PackVoidPtr(buff, ptr, ty->name, lptr);
                            methods[i].ml_doc = ndoc;
                        }
                    }
                }
            }
        }
    }
    
    /* -----------------------------------------------------------------------------*
     *  Initialize type list
     * -----------------------------------------------------------------------------*/
    
#if PY_MAJOR_VERSION < 2
    /* PyModule_AddObject function was introduced in Python 2.0.  The following function
    is copied out of Python/modsupport.c in python version 2.3.4 */
    SWIGINTERN int
    PyModule_AddObject(PyObject *m, char *name, PyObject *o)
    {
        PyObject *dict;
        if (!PyModule_Check(m)) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs module as first arg");
            return -1;
        }
        if (!o) {
            PyErr_SetString(PyExc_TypeError,
            "PyModule_AddObject() needs non-NULL value");
            return -1;
        }
        
        dict = PyModule_GetDict(m);
        if (dict == NULL) {
            /* Internal error -- modules must have a dict! */
            PyErr_Format(PyExc_SystemError, "module '%s' has no __dict__",
            PyModule_GetName(m));
            return -1;
        }
        if (PyDict_SetItemString(dict, name, o))
        return -1;
        Py_DECREF(o);
        return 0;
    }
#endif
    
#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------*
 *  Partial Init method
 * -----------------------------------------------------------------------------*/

#ifdef __cplusplus
extern "C"
#endif
SWIGEXPORT void SWIG_init(void) {
    static PyObject *SWIG_globals = 0; 
    PyObject *m, *d;
    if (!SWIG_globals) SWIG_globals = SWIG_newvarlink();
    
    /* Fix SwigMethods to carry the callback ptrs when needed */
    SWIG_Python_FixMethods(SwigMethods, swig_const_table, swig_types, swig_type_initial);
    
    m = Py_InitModule((char *) SWIG_name, SwigMethods);
    d = PyModule_GetDict(m);
    
    SWIG_InitializeModule(0);
    SWIG_InstallConstants(d,swig_const_table);
    
    PyDict_SetItemString(d,(char*)"cvar", SWIG_globals);
    SWIG_addvarlink(SWIG_globals,(char*)"max_recursion_level",_wrap_max_recursion_level_get, _wrap_max_recursion_level_set);
    {
        PyDict_SetItemString(d,"relational_equal", SWIG_From_int((int)(GiNaC::relational::equal))); 
    }
    {
        PyDict_SetItemString(d,"relational_not_equal", SWIG_From_int((int)(GiNaC::relational::not_equal))); 
    }
    {
        PyDict_SetItemString(d,"relational_less", SWIG_From_int((int)(GiNaC::relational::less))); 
    }
    {
        PyDict_SetItemString(d,"relational_less_or_equal", SWIG_From_int((int)(GiNaC::relational::less_or_equal))); 
    }
    {
        PyDict_SetItemString(d,"relational_greater", SWIG_From_int((int)(GiNaC::relational::greater))); 
    }
    {
        PyDict_SetItemString(d,"relational_greater_or_equal", SWIG_From_int((int)(GiNaC::relational::greater_or_equal))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"Pi",_wrap_Pi_get, _wrap_Pi_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Catalan",_wrap_Catalan_get, _wrap_Catalan_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Euler",_wrap_Euler_get, _wrap_Euler_set);
    SWIG_addvarlink(SWIG_globals,(char*)"I",_wrap_I_get, _wrap_I_set);
    SWIG_addvarlink(SWIG_globals,(char*)"integral_max_integration_level",_wrap_integral_max_integration_level_get, _wrap_integral_max_integration_level_set);
    SWIG_addvarlink(SWIG_globals,(char*)"integral_relative_integration_error",_wrap_integral_relative_integration_error_get, _wrap_integral_relative_integration_error_set);
    {
        PyDict_SetItemString(d,"EXPAIRSEQ_USE_HASHTAB", SWIG_From_int((int)(0))); 
    }
    SWIG_addvarlink(SWIG_globals,(char*)"function_current_serial",_wrap_function_current_serial_get, _wrap_function_current_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"conjugate_function_SERIAL_serial",_wrap_conjugate_function_SERIAL_serial_get, _wrap_conjugate_function_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"conjugate_function_NPARAMS",_wrap_conjugate_function_NPARAMS_get, _wrap_conjugate_function_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"abs_SERIAL_serial",_wrap_abs_SERIAL_serial_get, _wrap_abs_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"abs_NPARAMS",_wrap_abs_NPARAMS_get, _wrap_abs_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"csgn_SERIAL_serial",_wrap_csgn_SERIAL_serial_get, _wrap_csgn_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"csgn_NPARAMS",_wrap_csgn_NPARAMS_get, _wrap_csgn_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"eta_SERIAL_serial",_wrap_eta_SERIAL_serial_get, _wrap_eta_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"eta_NPARAMS",_wrap_eta_NPARAMS_get, _wrap_eta_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"sin_SERIAL_serial",_wrap_sin_SERIAL_serial_get, _wrap_sin_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"sin_NPARAMS",_wrap_sin_NPARAMS_get, _wrap_sin_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"cos_SERIAL_serial",_wrap_cos_SERIAL_serial_get, _wrap_cos_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"cos_NPARAMS",_wrap_cos_NPARAMS_get, _wrap_cos_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"tan_SERIAL_serial",_wrap_tan_SERIAL_serial_get, _wrap_tan_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"tan_NPARAMS",_wrap_tan_NPARAMS_get, _wrap_tan_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"exp_SERIAL_serial",_wrap_exp_SERIAL_serial_get, _wrap_exp_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"exp_NPARAMS",_wrap_exp_NPARAMS_get, _wrap_exp_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"log_SERIAL_serial",_wrap_log_SERIAL_serial_get, _wrap_log_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"log_NPARAMS",_wrap_log_NPARAMS_get, _wrap_log_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"asin_SERIAL_serial",_wrap_asin_SERIAL_serial_get, _wrap_asin_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"asin_NPARAMS",_wrap_asin_NPARAMS_get, _wrap_asin_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"acos_SERIAL_serial",_wrap_acos_SERIAL_serial_get, _wrap_acos_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"acos_NPARAMS",_wrap_acos_NPARAMS_get, _wrap_acos_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"atan_SERIAL_serial",_wrap_atan_SERIAL_serial_get, _wrap_atan_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"atan_NPARAMS",_wrap_atan_NPARAMS_get, _wrap_atan_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"atan2_SERIAL_serial",_wrap_atan2_SERIAL_serial_get, _wrap_atan2_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"atan2_NPARAMS",_wrap_atan2_NPARAMS_get, _wrap_atan2_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"sinh_SERIAL_serial",_wrap_sinh_SERIAL_serial_get, _wrap_sinh_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"sinh_NPARAMS",_wrap_sinh_NPARAMS_get, _wrap_sinh_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"cosh_SERIAL_serial",_wrap_cosh_SERIAL_serial_get, _wrap_cosh_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"cosh_NPARAMS",_wrap_cosh_NPARAMS_get, _wrap_cosh_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"tanh_SERIAL_serial",_wrap_tanh_SERIAL_serial_get, _wrap_tanh_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"tanh_NPARAMS",_wrap_tanh_NPARAMS_get, _wrap_tanh_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"asinh_SERIAL_serial",_wrap_asinh_SERIAL_serial_get, _wrap_asinh_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"asinh_NPARAMS",_wrap_asinh_NPARAMS_get, _wrap_asinh_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"acosh_SERIAL_serial",_wrap_acosh_SERIAL_serial_get, _wrap_acosh_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"acosh_NPARAMS",_wrap_acosh_NPARAMS_get, _wrap_acosh_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"atanh_SERIAL_serial",_wrap_atanh_SERIAL_serial_get, _wrap_atanh_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"atanh_NPARAMS",_wrap_atanh_NPARAMS_get, _wrap_atanh_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Li2_SERIAL_serial",_wrap_Li2_SERIAL_serial_get, _wrap_Li2_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Li2_NPARAMS",_wrap_Li2_NPARAMS_get, _wrap_Li2_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Li3_SERIAL_serial",_wrap_Li3_SERIAL_serial_get, _wrap_Li3_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Li3_NPARAMS",_wrap_Li3_NPARAMS_get, _wrap_Li3_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"zetaderiv_SERIAL_serial",_wrap_zetaderiv_SERIAL_serial_get, _wrap_zetaderiv_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"zetaderiv_NPARAMS",_wrap_zetaderiv_NPARAMS_get, _wrap_zetaderiv_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Li_SERIAL_serial",_wrap_Li_SERIAL_serial_get, _wrap_Li_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Li_NPARAMS",_wrap_Li_NPARAMS_get, _wrap_Li_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"S_SERIAL_serial",_wrap_S_SERIAL_serial_get, _wrap_S_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"S_NPARAMS",_wrap_S_NPARAMS_get, _wrap_S_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"H_SERIAL_serial",_wrap_H_SERIAL_serial_get, _wrap_H_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"H_NPARAMS",_wrap_H_NPARAMS_get, _wrap_H_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"lgamma_SERIAL_serial",_wrap_lgamma_SERIAL_serial_get, _wrap_lgamma_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"lgamma_NPARAMS",_wrap_lgamma_NPARAMS_get, _wrap_lgamma_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"tgamma_SERIAL_serial",_wrap_tgamma_SERIAL_serial_get, _wrap_tgamma_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"tgamma_NPARAMS",_wrap_tgamma_NPARAMS_get, _wrap_tgamma_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"beta_SERIAL_serial",_wrap_beta_SERIAL_serial_get, _wrap_beta_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"beta_NPARAMS",_wrap_beta_NPARAMS_get, _wrap_beta_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"factorial_SERIAL_serial",_wrap_factorial_SERIAL_serial_get, _wrap_factorial_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"factorial_NPARAMS",_wrap_factorial_NPARAMS_get, _wrap_factorial_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"binomial_SERIAL_serial",_wrap_binomial_SERIAL_serial_get, _wrap_binomial_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"binomial_NPARAMS",_wrap_binomial_NPARAMS_get, _wrap_binomial_NPARAMS_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Order_SERIAL_serial",_wrap_Order_SERIAL_serial_get, _wrap_Order_SERIAL_serial_set);
    SWIG_addvarlink(SWIG_globals,(char*)"Order_NPARAMS",_wrap_Order_NPARAMS_get, _wrap_Order_NPARAMS_set);
    {
        PyDict_SetItemString(d,"symmetry_none", SWIG_From_int((int)(GiNaC::symmetry::none))); 
    }
    {
        PyDict_SetItemString(d,"symmetry_symmetric", SWIG_From_int((int)(GiNaC::symmetry::symmetric))); 
    }
    {
        PyDict_SetItemString(d,"symmetry_antisymmetric", SWIG_From_int((int)(GiNaC::symmetry::antisymmetric))); 
    }
    {
        PyDict_SetItemString(d,"symmetry_cyclic", SWIG_From_int((int)(GiNaC::symmetry::cyclic))); 
    }
    {
        PyDict_SetItemString(d,"expand_options_expand_indexed", SWIG_From_int((int)(GiNaC::expand_options::expand_indexed))); 
    }
    {
        PyDict_SetItemString(d,"expand_options_expand_function_args", SWIG_From_int((int)(GiNaC::expand_options::expand_function_args))); 
    }
    {
        PyDict_SetItemString(d,"subs_options_no_pattern", SWIG_From_int((int)(GiNaC::subs_options::no_pattern))); 
    }
    {
        PyDict_SetItemString(d,"subs_options_subs_no_pattern", SWIG_From_int((int)(GiNaC::subs_options::subs_no_pattern))); 
    }
    {
        PyDict_SetItemString(d,"subs_options_algebraic", SWIG_From_int((int)(GiNaC::subs_options::algebraic))); 
    }
    {
        PyDict_SetItemString(d,"subs_options_subs_algebraic", SWIG_From_int((int)(GiNaC::subs_options::subs_algebraic))); 
    }
    {
        PyDict_SetItemString(d,"subs_options_pattern_is_product", SWIG_From_int((int)(GiNaC::subs_options::pattern_is_product))); 
    }
    {
        PyDict_SetItemString(d,"subs_options_pattern_is_not_product", SWIG_From_int((int)(GiNaC::subs_options::pattern_is_not_product))); 
    }
    {
        PyDict_SetItemString(d,"determinant_algo_automatic", SWIG_From_int((int)(GiNaC::determinant_algo::automatic))); 
    }
    {
        PyDict_SetItemString(d,"determinant_algo_gauss", SWIG_From_int((int)(GiNaC::determinant_algo::gauss))); 
    }
    {
        PyDict_SetItemString(d,"determinant_algo_divfree", SWIG_From_int((int)(GiNaC::determinant_algo::divfree))); 
    }
    {
        PyDict_SetItemString(d,"determinant_algo_laplace", SWIG_From_int((int)(GiNaC::determinant_algo::laplace))); 
    }
    {
        PyDict_SetItemString(d,"determinant_algo_bareiss", SWIG_From_int((int)(GiNaC::determinant_algo::bareiss))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_numeric", SWIG_From_int((int)(GiNaC::info_flags::numeric))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_real", SWIG_From_int((int)(GiNaC::info_flags::real))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_rational", SWIG_From_int((int)(GiNaC::info_flags::rational))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_integer", SWIG_From_int((int)(GiNaC::info_flags::integer))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_crational", SWIG_From_int((int)(GiNaC::info_flags::crational))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_cinteger", SWIG_From_int((int)(GiNaC::info_flags::cinteger))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_positive", SWIG_From_int((int)(GiNaC::info_flags::positive))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_negative", SWIG_From_int((int)(GiNaC::info_flags::negative))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_nonnegative", SWIG_From_int((int)(GiNaC::info_flags::nonnegative))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_posint", SWIG_From_int((int)(GiNaC::info_flags::posint))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_negint", SWIG_From_int((int)(GiNaC::info_flags::negint))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_nonnegint", SWIG_From_int((int)(GiNaC::info_flags::nonnegint))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_even", SWIG_From_int((int)(GiNaC::info_flags::even))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_odd", SWIG_From_int((int)(GiNaC::info_flags::odd))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_prime", SWIG_From_int((int)(GiNaC::info_flags::prime))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_relation", SWIG_From_int((int)(GiNaC::info_flags::relation))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_relation_equal", SWIG_From_int((int)(GiNaC::info_flags::relation_equal))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_relation_not_equal", SWIG_From_int((int)(GiNaC::info_flags::relation_not_equal))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_relation_less", SWIG_From_int((int)(GiNaC::info_flags::relation_less))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_relation_less_or_equal", SWIG_From_int((int)(GiNaC::info_flags::relation_less_or_equal))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_relation_greater", SWIG_From_int((int)(GiNaC::info_flags::relation_greater))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_relation_greater_or_equal", SWIG_From_int((int)(GiNaC::info_flags::relation_greater_or_equal))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_symbol", SWIG_From_int((int)(GiNaC::info_flags::symbol))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_list", SWIG_From_int((int)(GiNaC::info_flags::list))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_exprseq", SWIG_From_int((int)(GiNaC::info_flags::exprseq))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_polynomial", SWIG_From_int((int)(GiNaC::info_flags::polynomial))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_integer_polynomial", SWIG_From_int((int)(GiNaC::info_flags::integer_polynomial))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_cinteger_polynomial", SWIG_From_int((int)(GiNaC::info_flags::cinteger_polynomial))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_rational_polynomial", SWIG_From_int((int)(GiNaC::info_flags::rational_polynomial))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_crational_polynomial", SWIG_From_int((int)(GiNaC::info_flags::crational_polynomial))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_rational_function", SWIG_From_int((int)(GiNaC::info_flags::rational_function))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_algebraic", SWIG_From_int((int)(GiNaC::info_flags::algebraic))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_indexed", SWIG_From_int((int)(GiNaC::info_flags::indexed))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_has_indices", SWIG_From_int((int)(GiNaC::info_flags::has_indices))); 
    }
    {
        PyDict_SetItemString(d,"info_flags_idx", SWIG_From_int((int)(GiNaC::info_flags::idx))); 
    }
}

